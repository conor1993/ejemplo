' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: 2.0.0.0
' // Code is generated on: miércoles, 31 de enero de 2018 11:15:26
' // Code is generated using templates: SD.TemplateBindings.SqlServerSpecific.NET20
' // Templates vendor: Solutions Design.
' // Templates version: 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports System.Data.SqlClient

Imports SD.LLBLGen.Pro.ORMSupportClasses

Imports Integralab.ORM.HelperClasses

Namespace Integralab.ORM.StoredProcedureCallerClasses
	''' <summary>
	''' Class which contains the static logic to execute action stored procedures in the database.
	''' </summary>
	Public Class ActionProcedures
		''' <summary>
		''' Private CTor so no instance can be created.
		''' </summary>
		Private Sub New()
		End Sub

	
		''' <summary>
		''' Delegate definition for stored procedure 'ClienteIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ClienteInsCallBack(clnombres As System.String, clapPaterno As System.String, clapMaterno As System.String, clidUsuarioAlta As System.Int32, clpersonaFisica As System.Int16, clestatus As System.Int16, rfc As System.String, clidZona As System.Int32, clidPlaza As System.Int32, clidListaPrecios As System.Int32, clesComprador As System.Boolean _
, ByRef clidCliente As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ClienteIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="clidCliente">InputOutput parameter of stored procedure</param>
		''' <param name="clnombres">Input parameter of stored procedure</param>
		''' <param name="clapPaterno">Input parameter of stored procedure</param>
		''' <param name="clapMaterno">Input parameter of stored procedure</param>
		''' <param name="clidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="clpersonaFisica">Input parameter of stored procedure</param>
		''' <param name="clestatus">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="clidZona">Input parameter of stored procedure</param>
		''' <param name="clidPlaza">Input parameter of stored procedure</param>
		''' <param name="clidListaPrecios">Input parameter of stored procedure</param>
		''' <param name="clesComprador">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ClienteIns(clnombres As System.String, clapPaterno As System.String, clapMaterno As System.String, clidUsuarioAlta As System.Int32, clpersonaFisica As System.Int16, clestatus As System.Int16, rfc As System.String, clidZona As System.Int32, clidPlaza As System.Int32, clidListaPrecios As System.Int32, clesComprador As System.Boolean _
, ByRef clidCliente As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@CLNombres", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clnombres)
			parameters(2) = New SqlParameter("@CLApPaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapPaterno)
			parameters(3) = New SqlParameter("@CLApMaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapMaterno)
			parameters(4) = New SqlParameter("@CLIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidUsuarioAlta)
			parameters(5) = New SqlParameter("@CLPersonaFisica", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clpersonaFisica)
			parameters(6) = New SqlParameter("@CLEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clestatus)
			parameters(7) = New SqlParameter("@RFC", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(8) = New SqlParameter("@CLIdZona", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidZona)
			parameters(9) = New SqlParameter("@CLIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidPlaza)
			parameters(10) = New SqlParameter("@CLIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidListaPrecios)
			parameters(11) = New SqlParameter("@CLEsComprador", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clesComprador)
			parameters(0) = new SqlParameter("@CLIdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, clidCliente)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ClienteIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				clidCliente = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ClienteIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="clidCliente">InputOutput parameter of stored procedure</param>
		''' <param name="clnombres">Input parameter of stored procedure</param>
		''' <param name="clapPaterno">Input parameter of stored procedure</param>
		''' <param name="clapMaterno">Input parameter of stored procedure</param>
		''' <param name="clidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="clpersonaFisica">Input parameter of stored procedure</param>
		''' <param name="clestatus">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="clidZona">Input parameter of stored procedure</param>
		''' <param name="clidPlaza">Input parameter of stored procedure</param>
		''' <param name="clidListaPrecios">Input parameter of stored procedure</param>
		''' <param name="clesComprador">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ClienteIns(clnombres As System.String, clapPaterno As System.String, clapMaterno As System.String, clidUsuarioAlta As System.Int32, clpersonaFisica As System.Int16, clestatus As System.Int16, rfc As System.String, clidZona As System.Int32, clidPlaza As System.Int32, clidListaPrecios As System.Int32, clesComprador As System.Boolean _
, ByRef clidCliente As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@CLNombres", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clnombres)
			parameters(2) = New SqlParameter("@CLApPaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapPaterno)
			parameters(3) = New SqlParameter("@CLApMaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapMaterno)
			parameters(4) = New SqlParameter("@CLIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidUsuarioAlta)
			parameters(5) = New SqlParameter("@CLPersonaFisica", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clpersonaFisica)
			parameters(6) = New SqlParameter("@CLEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clestatus)
			parameters(7) = New SqlParameter("@RFC", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(8) = New SqlParameter("@CLIdZona", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidZona)
			parameters(9) = New SqlParameter("@CLIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidPlaza)
			parameters(10) = New SqlParameter("@CLIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidListaPrecios)
			parameters(11) = New SqlParameter("@CLEsComprador", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clesComprador)
			parameters(0) = new SqlParameter("@CLIdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, clidCliente)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ClienteIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				clidCliente = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ClienteIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="clidCliente">InputOutput parameter of stored procedure</param>
		''' <param name="clnombres">Input parameter of stored procedure</param>
		''' <param name="clapPaterno">Input parameter of stored procedure</param>
		''' <param name="clapMaterno">Input parameter of stored procedure</param>
		''' <param name="clidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="clpersonaFisica">Input parameter of stored procedure</param>
		''' <param name="clestatus">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="clidZona">Input parameter of stored procedure</param>
		''' <param name="clidPlaza">Input parameter of stored procedure</param>
		''' <param name="clidListaPrecios">Input parameter of stored procedure</param>
		''' <param name="clesComprador">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ClienteIns(clnombres As System.String, clapPaterno As System.String, clapMaterno As System.String, clidUsuarioAlta As System.Int32, clpersonaFisica As System.Int16, clestatus As System.Int16, rfc As System.String, clidZona As System.Int32, clidPlaza As System.Int32, clidListaPrecios As System.Int32, clesComprador As System.Boolean _
, ByRef clidCliente As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@CLNombres", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clnombres)
			parameters(2) = New SqlParameter("@CLApPaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapPaterno)
			parameters(3) = New SqlParameter("@CLApMaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapMaterno)
			parameters(4) = New SqlParameter("@CLIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidUsuarioAlta)
			parameters(5) = New SqlParameter("@CLPersonaFisica", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clpersonaFisica)
			parameters(6) = New SqlParameter("@CLEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clestatus)
			parameters(7) = New SqlParameter("@RFC", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(8) = New SqlParameter("@CLIdZona", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidZona)
			parameters(9) = New SqlParameter("@CLIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidPlaza)
			parameters(10) = New SqlParameter("@CLIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidListaPrecios)
			parameters(11) = New SqlParameter("@CLEsComprador", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clesComprador)
			parameters(0) = new SqlParameter("@CLIdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, clidCliente)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ClienteIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				clidCliente = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ClienteIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="clidCliente">InputOutput parameter of stored procedure</param>
		''' <param name="clnombres">Input parameter of stored procedure</param>
		''' <param name="clapPaterno">Input parameter of stored procedure</param>
		''' <param name="clapMaterno">Input parameter of stored procedure</param>
		''' <param name="clidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="clpersonaFisica">Input parameter of stored procedure</param>
		''' <param name="clestatus">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="clidZona">Input parameter of stored procedure</param>
		''' <param name="clidPlaza">Input parameter of stored procedure</param>
		''' <param name="clidListaPrecios">Input parameter of stored procedure</param>
		''' <param name="clesComprador">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ClienteIns(clnombres As System.String, clapPaterno As System.String, clapMaterno As System.String, clidUsuarioAlta As System.Int32, clpersonaFisica As System.Int16, clestatus As System.Int16, rfc As System.String, clidZona As System.Int32, clidPlaza As System.Int32, clidListaPrecios As System.Int32, clesComprador As System.Boolean _
, ByRef clidCliente As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@CLNombres", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clnombres)
			parameters(2) = New SqlParameter("@CLApPaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapPaterno)
			parameters(3) = New SqlParameter("@CLApMaterno", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clapMaterno)
			parameters(4) = New SqlParameter("@CLIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidUsuarioAlta)
			parameters(5) = New SqlParameter("@CLPersonaFisica", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clpersonaFisica)
			parameters(6) = New SqlParameter("@CLEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, clestatus)
			parameters(7) = New SqlParameter("@RFC", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(8) = New SqlParameter("@CLIdZona", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidZona)
			parameters(9) = New SqlParameter("@CLIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidPlaza)
			parameters(10) = New SqlParameter("@CLIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clidListaPrecios)
			parameters(11) = New SqlParameter("@CLEsComprador", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, clesComprador)
			parameters(0) = new SqlParameter("@CLIdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, clidCliente)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ClienteIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				clidCliente = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'ConsultaTipoVentaXEstatus' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ConsultaTipoVentaXestatusCallBack(estatus As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ConsultaTipoVentaXEstatus'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ConsultaTipoVentaXestatus(estatus As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ConsultaTipoVentaXEstatus]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ConsultaTipoVentaXEstatus'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ConsultaTipoVentaXestatus(estatus As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ConsultaTipoVentaXEstatus]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ConsultaTipoVentaXEstatus'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ConsultaTipoVentaXestatus(estatus As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ConsultaTipoVentaXEstatus]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ConsultaTipoVentaXEstatus'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ConsultaTipoVentaXestatus(estatus As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ConsultaTipoVentaXEstatus]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'CotizacionIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function CotizacionInsCallBack(rcidPlaza As System.Int32, rcidCliente As System.Int32, rcidVendedor As System.Int32, rcdiasVigencia As System.Int32, rcsubTotal As System.Decimal, rcdescuento As System.Decimal, rciva As System.Decimal, rctotal As System.Decimal, rcobservaciones As System.String, rcestatus As System.Int16, rcidUsuarioElaboro As System.Int32 _
, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'CotizacionIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="rcidPlaza">Input parameter of stored procedure</param>
		''' <param name="rcidCliente">Input parameter of stored procedure</param>
		''' <param name="rcidVendedor">Input parameter of stored procedure</param>
		''' <param name="rcdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="rcsubTotal">Input parameter of stored procedure</param>
		''' <param name="rcdescuento">Input parameter of stored procedure</param>
		''' <param name="rciva">Input parameter of stored procedure</param>
		''' <param name="rctotal">Input parameter of stored procedure</param>
		''' <param name="rcobservaciones">Input parameter of stored procedure</param>
		''' <param name="rcestatus">Input parameter of stored procedure</param>
		''' <param name="rcidUsuarioElaboro">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function CotizacionIns(rcidPlaza As System.Int32, rcidCliente As System.Int32, rcidVendedor As System.Int32, rcdiasVigencia As System.Int32, rcsubTotal As System.Decimal, rcdescuento As System.Decimal, rciva As System.Decimal, rctotal As System.Decimal, rcobservaciones As System.String, rcestatus As System.Int16, rcidUsuarioElaboro As System.Int32 _
, ByRef codigo As System.Int64) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@RCIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidPlaza)
			parameters(2) = New SqlParameter("@RCIdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidCliente)
			parameters(3) = New SqlParameter("@RCIdVendedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidVendedor)
			parameters(4) = New SqlParameter("@RCDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcdiasVigencia)
			parameters(5) = New SqlParameter("@RCSubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcsubTotal)
			parameters(6) = New SqlParameter("@RCDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcdescuento)
			parameters(7) = New SqlParameter("@RCIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rciva)
			parameters(8) = New SqlParameter("@RCTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rctotal)
			parameters(9) = New SqlParameter("@RCObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rcobservaciones)
			parameters(10) = New SqlParameter("@RCEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, rcestatus)
			parameters(11) = New SqlParameter("@RCIdUsuarioElaboro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidUsuarioElaboro)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[CotizacionIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'CotizacionIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="rcidPlaza">Input parameter of stored procedure</param>
		''' <param name="rcidCliente">Input parameter of stored procedure</param>
		''' <param name="rcidVendedor">Input parameter of stored procedure</param>
		''' <param name="rcdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="rcsubTotal">Input parameter of stored procedure</param>
		''' <param name="rcdescuento">Input parameter of stored procedure</param>
		''' <param name="rciva">Input parameter of stored procedure</param>
		''' <param name="rctotal">Input parameter of stored procedure</param>
		''' <param name="rcobservaciones">Input parameter of stored procedure</param>
		''' <param name="rcestatus">Input parameter of stored procedure</param>
		''' <param name="rcidUsuarioElaboro">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function CotizacionIns(rcidPlaza As System.Int32, rcidCliente As System.Int32, rcidVendedor As System.Int32, rcdiasVigencia As System.Int32, rcsubTotal As System.Decimal, rcdescuento As System.Decimal, rciva As System.Decimal, rctotal As System.Decimal, rcobservaciones As System.String, rcestatus As System.Int16, rcidUsuarioElaboro As System.Int32 _
, ByRef codigo As System.Int64, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@RCIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidPlaza)
			parameters(2) = New SqlParameter("@RCIdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidCliente)
			parameters(3) = New SqlParameter("@RCIdVendedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidVendedor)
			parameters(4) = New SqlParameter("@RCDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcdiasVigencia)
			parameters(5) = New SqlParameter("@RCSubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcsubTotal)
			parameters(6) = New SqlParameter("@RCDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcdescuento)
			parameters(7) = New SqlParameter("@RCIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rciva)
			parameters(8) = New SqlParameter("@RCTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rctotal)
			parameters(9) = New SqlParameter("@RCObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rcobservaciones)
			parameters(10) = New SqlParameter("@RCEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, rcestatus)
			parameters(11) = New SqlParameter("@RCIdUsuarioElaboro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidUsuarioElaboro)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[CotizacionIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'CotizacionIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="rcidPlaza">Input parameter of stored procedure</param>
		''' <param name="rcidCliente">Input parameter of stored procedure</param>
		''' <param name="rcidVendedor">Input parameter of stored procedure</param>
		''' <param name="rcdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="rcsubTotal">Input parameter of stored procedure</param>
		''' <param name="rcdescuento">Input parameter of stored procedure</param>
		''' <param name="rciva">Input parameter of stored procedure</param>
		''' <param name="rctotal">Input parameter of stored procedure</param>
		''' <param name="rcobservaciones">Input parameter of stored procedure</param>
		''' <param name="rcestatus">Input parameter of stored procedure</param>
		''' <param name="rcidUsuarioElaboro">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function CotizacionIns(rcidPlaza As System.Int32, rcidCliente As System.Int32, rcidVendedor As System.Int32, rcdiasVigencia As System.Int32, rcsubTotal As System.Decimal, rcdescuento As System.Decimal, rciva As System.Decimal, rctotal As System.Decimal, rcobservaciones As System.String, rcestatus As System.Int16, rcidUsuarioElaboro As System.Int32 _
, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@RCIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidPlaza)
			parameters(2) = New SqlParameter("@RCIdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidCliente)
			parameters(3) = New SqlParameter("@RCIdVendedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidVendedor)
			parameters(4) = New SqlParameter("@RCDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcdiasVigencia)
			parameters(5) = New SqlParameter("@RCSubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcsubTotal)
			parameters(6) = New SqlParameter("@RCDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcdescuento)
			parameters(7) = New SqlParameter("@RCIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rciva)
			parameters(8) = New SqlParameter("@RCTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rctotal)
			parameters(9) = New SqlParameter("@RCObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rcobservaciones)
			parameters(10) = New SqlParameter("@RCEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, rcestatus)
			parameters(11) = New SqlParameter("@RCIdUsuarioElaboro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidUsuarioElaboro)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[CotizacionIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'CotizacionIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="rcidPlaza">Input parameter of stored procedure</param>
		''' <param name="rcidCliente">Input parameter of stored procedure</param>
		''' <param name="rcidVendedor">Input parameter of stored procedure</param>
		''' <param name="rcdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="rcsubTotal">Input parameter of stored procedure</param>
		''' <param name="rcdescuento">Input parameter of stored procedure</param>
		''' <param name="rciva">Input parameter of stored procedure</param>
		''' <param name="rctotal">Input parameter of stored procedure</param>
		''' <param name="rcobservaciones">Input parameter of stored procedure</param>
		''' <param name="rcestatus">Input parameter of stored procedure</param>
		''' <param name="rcidUsuarioElaboro">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function CotizacionIns(rcidPlaza As System.Int32, rcidCliente As System.Int32, rcidVendedor As System.Int32, rcdiasVigencia As System.Int32, rcsubTotal As System.Decimal, rcdescuento As System.Decimal, rciva As System.Decimal, rctotal As System.Decimal, rcobservaciones As System.String, rcestatus As System.Int16, rcidUsuarioElaboro As System.Int32 _
, ByRef codigo As System.Int64, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@RCIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidPlaza)
			parameters(2) = New SqlParameter("@RCIdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidCliente)
			parameters(3) = New SqlParameter("@RCIdVendedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidVendedor)
			parameters(4) = New SqlParameter("@RCDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcdiasVigencia)
			parameters(5) = New SqlParameter("@RCSubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcsubTotal)
			parameters(6) = New SqlParameter("@RCDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rcdescuento)
			parameters(7) = New SqlParameter("@RCIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rciva)
			parameters(8) = New SqlParameter("@RCTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rctotal)
			parameters(9) = New SqlParameter("@RCObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rcobservaciones)
			parameters(10) = New SqlParameter("@RCEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, rcestatus)
			parameters(11) = New SqlParameter("@RCIdUsuarioElaboro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, rcidUsuarioElaboro)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[CotizacionIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'DevolucionesIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function DevolucionesInsCallBack(sucursalId As System.Int32, clienteId As System.Int32, notaVentaId As System.Int64, comisionistaId As System.Int32, estatus As System.Int16, importe As System.Decimal, descuento As System.Decimal, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'DevolucionesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursalId">Input parameter of stored procedure</param>
		''' <param name="clienteId">Input parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="comisionistaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function DevolucionesIns(sucursalId As System.Int32, clienteId As System.Int32, notaVentaId As System.Int64, comisionistaId As System.Int32, estatus As System.Int16, importe As System.Decimal, descuento As System.Decimal, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal, ByRef codigo As System.Int64) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(1) = New SqlParameter("@SucursalId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursalId)
			parameters(2) = New SqlParameter("@ClienteId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clienteId)
			parameters(3) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(4) = New SqlParameter("@ComisionistaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comisionistaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@Iva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[DevolucionesIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'DevolucionesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursalId">Input parameter of stored procedure</param>
		''' <param name="clienteId">Input parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="comisionistaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function DevolucionesIns(sucursalId As System.Int32, clienteId As System.Int32, notaVentaId As System.Int64, comisionistaId As System.Int32, estatus As System.Int16, importe As System.Decimal, descuento As System.Decimal, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal, ByRef codigo As System.Int64, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(1) = New SqlParameter("@SucursalId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursalId)
			parameters(2) = New SqlParameter("@ClienteId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clienteId)
			parameters(3) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(4) = New SqlParameter("@ComisionistaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comisionistaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@Iva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[DevolucionesIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'DevolucionesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursalId">Input parameter of stored procedure</param>
		''' <param name="clienteId">Input parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="comisionistaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function DevolucionesIns(sucursalId As System.Int32, clienteId As System.Int32, notaVentaId As System.Int64, comisionistaId As System.Int32, estatus As System.Int16, importe As System.Decimal, descuento As System.Decimal, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(1) = New SqlParameter("@SucursalId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursalId)
			parameters(2) = New SqlParameter("@ClienteId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clienteId)
			parameters(3) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(4) = New SqlParameter("@ComisionistaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comisionistaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@Iva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[DevolucionesIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'DevolucionesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursalId">Input parameter of stored procedure</param>
		''' <param name="clienteId">Input parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="comisionistaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function DevolucionesIns(sucursalId As System.Int32, clienteId As System.Int32, notaVentaId As System.Int64, comisionistaId As System.Int32, estatus As System.Int16, importe As System.Decimal, descuento As System.Decimal, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal, ByRef codigo As System.Int64, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(1) = New SqlParameter("@SucursalId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursalId)
			parameters(2) = New SqlParameter("@ClienteId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, clienteId)
			parameters(3) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(4) = New SqlParameter("@ComisionistaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comisionistaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@Iva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[DevolucionesIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'FolioRegistroSacrificios' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function FolioRegistroSacrificiosCallBack(ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'FolioRegistroSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FolioRegistroSacrificios(ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FolioRegistroSacrificios]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FolioRegistroSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FolioRegistroSacrificios(ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FolioRegistroSacrificios]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FolioRegistroSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FolioRegistroSacrificios(ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FolioRegistroSacrificios]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FolioRegistroSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FolioRegistroSacrificios(ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 10, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FolioRegistroSacrificios]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'FoliosIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function FoliosInsCallBack(letra As System.String, ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'FoliosIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FoliosIns(letra As System.String, ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Letra", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 20, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FoliosIns]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FoliosIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FoliosIns(letra As System.String, ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Letra", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 20, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FoliosIns]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FoliosIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FoliosIns(letra As System.String, ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Letra", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 20, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FoliosIns]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'FoliosIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function FoliosIns(letra As System.String, ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Letra", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 20, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[FoliosIns]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'ListaPrecioIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ListaPrecioInsCallBack(lpidPlaza As System.Int32, lpdescripcion As System.String, lpdescCorta As System.String, lpobservaciones As System.String, lpvigencia As System.Boolean, lpdiasVigencia As System.Int32, lpfechaVigencia As System.DateTime, lpfechaVigenciaA As System.DateTime, lpesListaBase As System.Boolean, lpestatus As System.Int16, lpidUsuarioAlta As System.Int32,  _
lplistaBase As System.Int32, lpidTipoVenta As System.Int32, ByRef lpidListaPrecios As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ListaPrecioIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="lpidPlaza">Input parameter of stored procedure</param>
		''' <param name="lpidListaPrecios">InputOutput parameter of stored procedure</param>
		''' <param name="lpdescripcion">Input parameter of stored procedure</param>
		''' <param name="lpdescCorta">Input parameter of stored procedure</param>
		''' <param name="lpobservaciones">Input parameter of stored procedure</param>
		''' <param name="lpvigencia">Input parameter of stored procedure</param>
		''' <param name="lpdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigenciaA">Input parameter of stored procedure</param>
		''' <param name="lpesListaBase">Input parameter of stored procedure</param>
		''' <param name="lpestatus">Input parameter of stored procedure</param>
		''' <param name="lpidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="lplistaBase">Input parameter of stored procedure</param>
		''' <param name="lpidTipoVenta">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaPrecioIns(lpidPlaza As System.Int32, lpdescripcion As System.String, lpdescCorta As System.String, lpobservaciones As System.String, lpvigencia As System.Boolean, lpdiasVigencia As System.Int32, lpfechaVigencia As System.DateTime, lpfechaVigenciaA As System.DateTime, lpesListaBase As System.Boolean, lpestatus As System.Int16, lpidUsuarioAlta As System.Int32,  _
lplistaBase As System.Int32, lpidTipoVenta As System.Int32, ByRef lpidListaPrecios As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@LPIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidPlaza)
			parameters(2) = New SqlParameter("@LPDescripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescripcion)
			parameters(3) = New SqlParameter("@LPDescCorta", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescCorta)
			parameters(4) = New SqlParameter("@LPObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpobservaciones)
			parameters(5) = New SqlParameter("@LPVigencia", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpvigencia)
			parameters(6) = New SqlParameter("@LPDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpdiasVigencia)
			parameters(7) = New SqlParameter("@LPFechaVigencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigencia)
			parameters(8) = New SqlParameter("@LPFechaVigenciaA", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigenciaA)
			parameters(9) = New SqlParameter("@LPEsListaBase", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpesListaBase)
			parameters(10) = New SqlParameter("@LPEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lpestatus)
			parameters(11) = New SqlParameter("@LPIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidUsuarioAlta)
			parameters(12) = New SqlParameter("@LPListaBase", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lplistaBase)
			parameters(13) = New SqlParameter("@LPIdTipoVenta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidTipoVenta)
			parameters(1) = new SqlParameter("@LPIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, lpidListaPrecios)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaPrecioIns]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				lpidListaPrecios = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaPrecioIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="lpidPlaza">Input parameter of stored procedure</param>
		''' <param name="lpidListaPrecios">InputOutput parameter of stored procedure</param>
		''' <param name="lpdescripcion">Input parameter of stored procedure</param>
		''' <param name="lpdescCorta">Input parameter of stored procedure</param>
		''' <param name="lpobservaciones">Input parameter of stored procedure</param>
		''' <param name="lpvigencia">Input parameter of stored procedure</param>
		''' <param name="lpdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigenciaA">Input parameter of stored procedure</param>
		''' <param name="lpesListaBase">Input parameter of stored procedure</param>
		''' <param name="lpestatus">Input parameter of stored procedure</param>
		''' <param name="lpidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="lplistaBase">Input parameter of stored procedure</param>
		''' <param name="lpidTipoVenta">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaPrecioIns(lpidPlaza As System.Int32, lpdescripcion As System.String, lpdescCorta As System.String, lpobservaciones As System.String, lpvigencia As System.Boolean, lpdiasVigencia As System.Int32, lpfechaVigencia As System.DateTime, lpfechaVigenciaA As System.DateTime, lpesListaBase As System.Boolean, lpestatus As System.Int16, lpidUsuarioAlta As System.Int32,  _
lplistaBase As System.Int32, lpidTipoVenta As System.Int32, ByRef lpidListaPrecios As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@LPIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidPlaza)
			parameters(2) = New SqlParameter("@LPDescripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescripcion)
			parameters(3) = New SqlParameter("@LPDescCorta", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescCorta)
			parameters(4) = New SqlParameter("@LPObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpobservaciones)
			parameters(5) = New SqlParameter("@LPVigencia", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpvigencia)
			parameters(6) = New SqlParameter("@LPDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpdiasVigencia)
			parameters(7) = New SqlParameter("@LPFechaVigencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigencia)
			parameters(8) = New SqlParameter("@LPFechaVigenciaA", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigenciaA)
			parameters(9) = New SqlParameter("@LPEsListaBase", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpesListaBase)
			parameters(10) = New SqlParameter("@LPEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lpestatus)
			parameters(11) = New SqlParameter("@LPIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidUsuarioAlta)
			parameters(12) = New SqlParameter("@LPListaBase", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lplistaBase)
			parameters(13) = New SqlParameter("@LPIdTipoVenta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidTipoVenta)
			parameters(1) = new SqlParameter("@LPIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, lpidListaPrecios)
			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaPrecioIns]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				lpidListaPrecios = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaPrecioIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="lpidPlaza">Input parameter of stored procedure</param>
		''' <param name="lpidListaPrecios">InputOutput parameter of stored procedure</param>
		''' <param name="lpdescripcion">Input parameter of stored procedure</param>
		''' <param name="lpdescCorta">Input parameter of stored procedure</param>
		''' <param name="lpobservaciones">Input parameter of stored procedure</param>
		''' <param name="lpvigencia">Input parameter of stored procedure</param>
		''' <param name="lpdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigenciaA">Input parameter of stored procedure</param>
		''' <param name="lpesListaBase">Input parameter of stored procedure</param>
		''' <param name="lpestatus">Input parameter of stored procedure</param>
		''' <param name="lpidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="lplistaBase">Input parameter of stored procedure</param>
		''' <param name="lpidTipoVenta">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaPrecioIns(lpidPlaza As System.Int32, lpdescripcion As System.String, lpdescCorta As System.String, lpobservaciones As System.String, lpvigencia As System.Boolean, lpdiasVigencia As System.Int32, lpfechaVigencia As System.DateTime, lpfechaVigenciaA As System.DateTime, lpesListaBase As System.Boolean, lpestatus As System.Int16, lpidUsuarioAlta As System.Int32,  _
lplistaBase As System.Int32, lpidTipoVenta As System.Int32, ByRef lpidListaPrecios As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@LPIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidPlaza)
			parameters(2) = New SqlParameter("@LPDescripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescripcion)
			parameters(3) = New SqlParameter("@LPDescCorta", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescCorta)
			parameters(4) = New SqlParameter("@LPObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpobservaciones)
			parameters(5) = New SqlParameter("@LPVigencia", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpvigencia)
			parameters(6) = New SqlParameter("@LPDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpdiasVigencia)
			parameters(7) = New SqlParameter("@LPFechaVigencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigencia)
			parameters(8) = New SqlParameter("@LPFechaVigenciaA", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigenciaA)
			parameters(9) = New SqlParameter("@LPEsListaBase", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpesListaBase)
			parameters(10) = New SqlParameter("@LPEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lpestatus)
			parameters(11) = New SqlParameter("@LPIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidUsuarioAlta)
			parameters(12) = New SqlParameter("@LPListaBase", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lplistaBase)
			parameters(13) = New SqlParameter("@LPIdTipoVenta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidTipoVenta)
			parameters(1) = new SqlParameter("@LPIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, lpidListaPrecios)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaPrecioIns]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				lpidListaPrecios = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaPrecioIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="lpidPlaza">Input parameter of stored procedure</param>
		''' <param name="lpidListaPrecios">InputOutput parameter of stored procedure</param>
		''' <param name="lpdescripcion">Input parameter of stored procedure</param>
		''' <param name="lpdescCorta">Input parameter of stored procedure</param>
		''' <param name="lpobservaciones">Input parameter of stored procedure</param>
		''' <param name="lpvigencia">Input parameter of stored procedure</param>
		''' <param name="lpdiasVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigencia">Input parameter of stored procedure</param>
		''' <param name="lpfechaVigenciaA">Input parameter of stored procedure</param>
		''' <param name="lpesListaBase">Input parameter of stored procedure</param>
		''' <param name="lpestatus">Input parameter of stored procedure</param>
		''' <param name="lpidUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="lplistaBase">Input parameter of stored procedure</param>
		''' <param name="lpidTipoVenta">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaPrecioIns(lpidPlaza As System.Int32, lpdescripcion As System.String, lpdescCorta As System.String, lpobservaciones As System.String, lpvigencia As System.Boolean, lpdiasVigencia As System.Int32, lpfechaVigencia As System.DateTime, lpfechaVigenciaA As System.DateTime, lpesListaBase As System.Boolean, lpestatus As System.Int16, lpidUsuarioAlta As System.Int32,  _
lplistaBase As System.Int32, lpidTipoVenta As System.Int32, ByRef lpidListaPrecios As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@LPIdPlaza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidPlaza)
			parameters(2) = New SqlParameter("@LPDescripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescripcion)
			parameters(3) = New SqlParameter("@LPDescCorta", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpdescCorta)
			parameters(4) = New SqlParameter("@LPObservaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpobservaciones)
			parameters(5) = New SqlParameter("@LPVigencia", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpvigencia)
			parameters(6) = New SqlParameter("@LPDiasVigencia", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpdiasVigencia)
			parameters(7) = New SqlParameter("@LPFechaVigencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigencia)
			parameters(8) = New SqlParameter("@LPFechaVigenciaA", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpfechaVigenciaA)
			parameters(9) = New SqlParameter("@LPEsListaBase", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lpesListaBase)
			parameters(10) = New SqlParameter("@LPEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lpestatus)
			parameters(11) = New SqlParameter("@LPIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidUsuarioAlta)
			parameters(12) = New SqlParameter("@LPListaBase", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lplistaBase)
			parameters(13) = New SqlParameter("@LPIdTipoVenta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lpidTipoVenta)
			parameters(1) = new SqlParameter("@LPIdListaPrecios", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, lpidListaPrecios)
			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaPrecioIns]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				lpidListaPrecios = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'ListaProductosOrdenSurtido' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ListaProductosOrdenSurtidoCallBack(codigo As System.Int64, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ListaProductosOrdenSurtido'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaProductosOrdenSurtido(codigo As System.Int64) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaProductosOrdenSurtido]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaProductosOrdenSurtido'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaProductosOrdenSurtido(codigo As System.Int64, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaProductosOrdenSurtido]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaProductosOrdenSurtido'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaProductosOrdenSurtido(codigo As System.Int64, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaProductosOrdenSurtido]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ListaProductosOrdenSurtido'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ListaProductosOrdenSurtido(codigo As System.Int64, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ListaProductosOrdenSurtido]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'MotivoBajaUsado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function MotivoBajaUsadoCallBack(codigo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'MotivoBajaUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoBajaUsado(codigo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoBajaUsado]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoBajaUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoBajaUsado(codigo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoBajaUsado]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoBajaUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoBajaUsado(codigo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoBajaUsado]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoBajaUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoBajaUsado(codigo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoBajaUsado]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'MotivoCancelacionUsado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function MotivoCancelacionUsadoCallBack(codigo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'MotivoCancelacionUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoCancelacionUsado(codigo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoCancelacionUsado]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoCancelacionUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoCancelacionUsado(codigo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoCancelacionUsado]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoCancelacionUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoCancelacionUsado(codigo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoCancelacionUsado]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'MotivoCancelacionUsado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function MotivoCancelacionUsado(codigo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[MotivoCancelacionUsado]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'NotaVentaIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function NotaVentaInsCallBack(sucursal As System.Int32, cliente As System.Int32, comicionista As System.Int32, tipoVentaId As System.Int32, estatus As System.Int16, subTotal As System.Decimal, descuento As System.Decimal, total As System.Decimal, usuarioAlta As System.Int32, iva As System.Decimal, importe As System.Decimal,  _
cotizacionId As System.Int64, ByRef codigo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'NotaVentaIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursal">Input parameter of stored procedure</param>
		''' <param name="cliente">Input parameter of stored procedure</param>
		''' <param name="comicionista">Input parameter of stored procedure</param>
		''' <param name="tipoVentaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cotizacionId">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function NotaVentaIns(sucursal As System.Int32, cliente As System.Int32, comicionista As System.Int32, tipoVentaId As System.Int32, estatus As System.Int16, subTotal As System.Decimal, descuento As System.Decimal, total As System.Decimal, usuarioAlta As System.Int32, iva As System.Decimal, importe As System.Decimal,  _
cotizacionId As System.Int64, ByRef codigo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Sucursal", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursal)
			parameters(2) = New SqlParameter("@Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cliente)
			parameters(3) = New SqlParameter("@Comicionista", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comicionista)
			parameters(4) = New SqlParameter("@TipoVentaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoVentaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(9) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(10) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(11) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(12) = New SqlParameter("@CotizacionId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, cotizacionId)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[NotaVentaIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'NotaVentaIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursal">Input parameter of stored procedure</param>
		''' <param name="cliente">Input parameter of stored procedure</param>
		''' <param name="comicionista">Input parameter of stored procedure</param>
		''' <param name="tipoVentaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cotizacionId">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function NotaVentaIns(sucursal As System.Int32, cliente As System.Int32, comicionista As System.Int32, tipoVentaId As System.Int32, estatus As System.Int16, subTotal As System.Decimal, descuento As System.Decimal, total As System.Decimal, usuarioAlta As System.Int32, iva As System.Decimal, importe As System.Decimal,  _
cotizacionId As System.Int64, ByRef codigo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Sucursal", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursal)
			parameters(2) = New SqlParameter("@Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cliente)
			parameters(3) = New SqlParameter("@Comicionista", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comicionista)
			parameters(4) = New SqlParameter("@TipoVentaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoVentaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(9) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(10) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(11) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(12) = New SqlParameter("@CotizacionId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, cotizacionId)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[NotaVentaIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'NotaVentaIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursal">Input parameter of stored procedure</param>
		''' <param name="cliente">Input parameter of stored procedure</param>
		''' <param name="comicionista">Input parameter of stored procedure</param>
		''' <param name="tipoVentaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cotizacionId">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function NotaVentaIns(sucursal As System.Int32, cliente As System.Int32, comicionista As System.Int32, tipoVentaId As System.Int32, estatus As System.Int16, subTotal As System.Decimal, descuento As System.Decimal, total As System.Decimal, usuarioAlta As System.Int32, iva As System.Decimal, importe As System.Decimal,  _
cotizacionId As System.Int64, ByRef codigo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Sucursal", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursal)
			parameters(2) = New SqlParameter("@Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cliente)
			parameters(3) = New SqlParameter("@Comicionista", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comicionista)
			parameters(4) = New SqlParameter("@TipoVentaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoVentaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(9) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(10) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(11) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(12) = New SqlParameter("@CotizacionId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, cotizacionId)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[NotaVentaIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'NotaVentaIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="sucursal">Input parameter of stored procedure</param>
		''' <param name="cliente">Input parameter of stored procedure</param>
		''' <param name="comicionista">Input parameter of stored procedure</param>
		''' <param name="tipoVentaId">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="descuento">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cotizacionId">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function NotaVentaIns(sucursal As System.Int32, cliente As System.Int32, comicionista As System.Int32, tipoVentaId As System.Int32, estatus As System.Int16, subTotal As System.Decimal, descuento As System.Decimal, total As System.Decimal, usuarioAlta As System.Int32, iva As System.Decimal, importe As System.Decimal,  _
cotizacionId As System.Int64, ByRef codigo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Sucursal", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, sucursal)
			parameters(2) = New SqlParameter("@Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cliente)
			parameters(3) = New SqlParameter("@Comicionista", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, comicionista)
			parameters(4) = New SqlParameter("@TipoVentaId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoVentaId)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(7) = New SqlParameter("@Descuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, descuento)
			parameters(8) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(9) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(10) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(11) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(12) = New SqlParameter("@CotizacionId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, cotizacionId)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[NotaVentaIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'ObtenerFolioMovimiento' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ObtenerFolioMovimientoCallBack(letras As System.String, ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ObtenerFolioMovimiento'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letras">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ObtenerFolioMovimiento(letras As System.String, ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Letras", SqlDbType.VarChar, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letras)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 30, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ObtenerFolioMovimiento]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ObtenerFolioMovimiento'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letras">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ObtenerFolioMovimiento(letras As System.String, ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Letras", SqlDbType.VarChar, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letras)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 30, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ObtenerFolioMovimiento]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ObtenerFolioMovimiento'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letras">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ObtenerFolioMovimiento(letras As System.String, ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Letras", SqlDbType.VarChar, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letras)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 30, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ObtenerFolioMovimiento]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ObtenerFolioMovimiento'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letras">Input parameter of stored procedure</param>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ObtenerFolioMovimiento(letras As System.String, ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Letras", SqlDbType.VarChar, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letras)
			parameters(1) = new SqlParameter("@Folio", SqlDbType.VarChar, 30, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ObtenerFolioMovimiento]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				folio = CType(parameters(1).Value, System.String)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'OrdenSurtidoIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function OrdenSurtidoInsCallBack(notaVentaId As System.Int64, almacenId As System.Int32, observaciones As System.String, estatus As System.Int16, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'OrdenSurtidoIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="almacenId">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function OrdenSurtidoIns(notaVentaId As System.Int64, almacenId As System.Int32, observaciones As System.String, estatus As System.Int16, ByRef codigo As System.Int64) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(1) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(2) = New SqlParameter("@AlmacenId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacenId)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[OrdenSurtidoIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'OrdenSurtidoIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="almacenId">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function OrdenSurtidoIns(notaVentaId As System.Int64, almacenId As System.Int32, observaciones As System.String, estatus As System.Int16, ByRef codigo As System.Int64, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(1) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(2) = New SqlParameter("@AlmacenId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacenId)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[OrdenSurtidoIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'OrdenSurtidoIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="almacenId">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function OrdenSurtidoIns(notaVentaId As System.Int64, almacenId As System.Int32, observaciones As System.String, estatus As System.Int16, ByRef codigo As System.Int64, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(1) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(2) = New SqlParameter("@AlmacenId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacenId)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[OrdenSurtidoIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'OrdenSurtidoIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="notaVentaId">Input parameter of stored procedure</param>
		''' <param name="almacenId">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function OrdenSurtidoIns(notaVentaId As System.Int64, almacenId As System.Int32, observaciones As System.String, estatus As System.Int16, ByRef codigo As System.Int64, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(1) = New SqlParameter("@NotaVentaId", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, notaVentaId)
			parameters(2) = New SqlParameter("@AlmacenId", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacenId)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(0) = new SqlParameter("@Codigo", SqlDbType.BigInt, 0, ParameterDirection.InputOutput, True, 19, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[OrdenSurtidoIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				codigo = CType(parameters(0).Value, System.Int64)
			End If

			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'PACompCancelaProductosSolicitados' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function PacompCancelaProductosSolicitadosCallBack(folio As System.String, idProducto As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'PACompCancelaProductosSolicitados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function PacompCancelaProductosSolicitados(folio As System.String, idProducto As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[PACompCancelaProductosSolicitados]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'PACompCancelaProductosSolicitados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function PacompCancelaProductosSolicitados(folio As System.String, idProducto As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)

			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[PACompCancelaProductosSolicitados]", parameters, Nothing)


			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'PACompCancelaProductosSolicitados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function PacompCancelaProductosSolicitados(folio As System.String, idProducto As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[PACompCancelaProductosSolicitados]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'PACompCancelaProductosSolicitados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function PacompCancelaProductosSolicitados(folio As System.String, idProducto As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)

			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[PACompCancelaProductosSolicitados]", parameters, transactionToUse)


			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'ProveedoresIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function ProveedoresInsCallBack(prRfc As System.String, prRazSocial As System.String, prBeneficiario As System.String, prContacto As System.String, prRepLegal As System.String, prEstatus As System.Int16, prDomicilio As System.String, prColonia As System.String, prCodPos As System.String, prIdPoblacion As System.Int32, prIdUsuarioAlta As System.Int32,  _
cuentaCont As System.Int32, cuentaAnt As System.Int32, ByRef prIdProveedor As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'ProveedoresIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="prIdProveedor">InputOutput parameter of stored procedure</param>
		''' <param name="prRfc">Input parameter of stored procedure</param>
		''' <param name="prRazSocial">Input parameter of stored procedure</param>
		''' <param name="prBeneficiario">Input parameter of stored procedure</param>
		''' <param name="prContacto">Input parameter of stored procedure</param>
		''' <param name="prRepLegal">Input parameter of stored procedure</param>
		''' <param name="prEstatus">Input parameter of stored procedure</param>
		''' <param name="prDomicilio">Input parameter of stored procedure</param>
		''' <param name="prColonia">Input parameter of stored procedure</param>
		''' <param name="prCodPos">Input parameter of stored procedure</param>
		''' <param name="prIdPoblacion">Input parameter of stored procedure</param>
		''' <param name="prIdUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="cuentaCont">Input parameter of stored procedure</param>
		''' <param name="cuentaAnt">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ProveedoresIns(prRfc As System.String, prRazSocial As System.String, prBeneficiario As System.String, prContacto As System.String, prRepLegal As System.String, prEstatus As System.Int16, prDomicilio As System.String, prColonia As System.String, prCodPos As System.String, prIdPoblacion As System.Int32, prIdUsuarioAlta As System.Int32,  _
cuentaCont As System.Int32, cuentaAnt As System.Int32, ByRef prIdProveedor As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(1) = New SqlParameter("@PrRFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRfc)
			parameters(2) = New SqlParameter("@PrRazSocial", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRazSocial)
			parameters(3) = New SqlParameter("@PrBeneficiario", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prBeneficiario)
			parameters(4) = New SqlParameter("@PrContacto", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prContacto)
			parameters(5) = New SqlParameter("@PrRepLegal", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRepLegal)
			parameters(6) = New SqlParameter("@PrEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, prEstatus)
			parameters(7) = New SqlParameter("@PrDomicilio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prDomicilio)
			parameters(8) = New SqlParameter("@PrColonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prColonia)
			parameters(9) = New SqlParameter("@PrCodPos", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prCodPos)
			parameters(10) = New SqlParameter("@PrIdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdPoblacion)
			parameters(11) = New SqlParameter("@PrIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdUsuarioAlta)
			parameters(12) = New SqlParameter("@CuentaCont", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaCont)
			parameters(13) = New SqlParameter("@CuentaAnt", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaAnt)
			parameters(0) = new SqlParameter("@PrIdProveedor", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, prIdProveedor)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ProveedoresIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				prIdProveedor = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ProveedoresIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="prIdProveedor">InputOutput parameter of stored procedure</param>
		''' <param name="prRfc">Input parameter of stored procedure</param>
		''' <param name="prRazSocial">Input parameter of stored procedure</param>
		''' <param name="prBeneficiario">Input parameter of stored procedure</param>
		''' <param name="prContacto">Input parameter of stored procedure</param>
		''' <param name="prRepLegal">Input parameter of stored procedure</param>
		''' <param name="prEstatus">Input parameter of stored procedure</param>
		''' <param name="prDomicilio">Input parameter of stored procedure</param>
		''' <param name="prColonia">Input parameter of stored procedure</param>
		''' <param name="prCodPos">Input parameter of stored procedure</param>
		''' <param name="prIdPoblacion">Input parameter of stored procedure</param>
		''' <param name="prIdUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="cuentaCont">Input parameter of stored procedure</param>
		''' <param name="cuentaAnt">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ProveedoresIns(prRfc As System.String, prRazSocial As System.String, prBeneficiario As System.String, prContacto As System.String, prRepLegal As System.String, prEstatus As System.Int16, prDomicilio As System.String, prColonia As System.String, prCodPos As System.String, prIdPoblacion As System.Int32, prIdUsuarioAlta As System.Int32,  _
cuentaCont As System.Int32, cuentaAnt As System.Int32, ByRef prIdProveedor As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(1) = New SqlParameter("@PrRFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRfc)
			parameters(2) = New SqlParameter("@PrRazSocial", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRazSocial)
			parameters(3) = New SqlParameter("@PrBeneficiario", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prBeneficiario)
			parameters(4) = New SqlParameter("@PrContacto", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prContacto)
			parameters(5) = New SqlParameter("@PrRepLegal", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRepLegal)
			parameters(6) = New SqlParameter("@PrEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, prEstatus)
			parameters(7) = New SqlParameter("@PrDomicilio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prDomicilio)
			parameters(8) = New SqlParameter("@PrColonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prColonia)
			parameters(9) = New SqlParameter("@PrCodPos", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prCodPos)
			parameters(10) = New SqlParameter("@PrIdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdPoblacion)
			parameters(11) = New SqlParameter("@PrIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdUsuarioAlta)
			parameters(12) = New SqlParameter("@CuentaCont", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaCont)
			parameters(13) = New SqlParameter("@CuentaAnt", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaAnt)
			parameters(0) = new SqlParameter("@PrIdProveedor", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, prIdProveedor)
			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ProveedoresIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				prIdProveedor = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ProveedoresIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="prIdProveedor">InputOutput parameter of stored procedure</param>
		''' <param name="prRfc">Input parameter of stored procedure</param>
		''' <param name="prRazSocial">Input parameter of stored procedure</param>
		''' <param name="prBeneficiario">Input parameter of stored procedure</param>
		''' <param name="prContacto">Input parameter of stored procedure</param>
		''' <param name="prRepLegal">Input parameter of stored procedure</param>
		''' <param name="prEstatus">Input parameter of stored procedure</param>
		''' <param name="prDomicilio">Input parameter of stored procedure</param>
		''' <param name="prColonia">Input parameter of stored procedure</param>
		''' <param name="prCodPos">Input parameter of stored procedure</param>
		''' <param name="prIdPoblacion">Input parameter of stored procedure</param>
		''' <param name="prIdUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="cuentaCont">Input parameter of stored procedure</param>
		''' <param name="cuentaAnt">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ProveedoresIns(prRfc As System.String, prRazSocial As System.String, prBeneficiario As System.String, prContacto As System.String, prRepLegal As System.String, prEstatus As System.Int16, prDomicilio As System.String, prColonia As System.String, prCodPos As System.String, prIdPoblacion As System.Int32, prIdUsuarioAlta As System.Int32,  _
cuentaCont As System.Int32, cuentaAnt As System.Int32, ByRef prIdProveedor As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(1) = New SqlParameter("@PrRFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRfc)
			parameters(2) = New SqlParameter("@PrRazSocial", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRazSocial)
			parameters(3) = New SqlParameter("@PrBeneficiario", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prBeneficiario)
			parameters(4) = New SqlParameter("@PrContacto", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prContacto)
			parameters(5) = New SqlParameter("@PrRepLegal", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRepLegal)
			parameters(6) = New SqlParameter("@PrEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, prEstatus)
			parameters(7) = New SqlParameter("@PrDomicilio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prDomicilio)
			parameters(8) = New SqlParameter("@PrColonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prColonia)
			parameters(9) = New SqlParameter("@PrCodPos", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prCodPos)
			parameters(10) = New SqlParameter("@PrIdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdPoblacion)
			parameters(11) = New SqlParameter("@PrIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdUsuarioAlta)
			parameters(12) = New SqlParameter("@CuentaCont", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaCont)
			parameters(13) = New SqlParameter("@CuentaAnt", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaAnt)
			parameters(0) = new SqlParameter("@PrIdProveedor", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, prIdProveedor)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ProveedoresIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				prIdProveedor = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'ProveedoresIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="prIdProveedor">InputOutput parameter of stored procedure</param>
		''' <param name="prRfc">Input parameter of stored procedure</param>
		''' <param name="prRazSocial">Input parameter of stored procedure</param>
		''' <param name="prBeneficiario">Input parameter of stored procedure</param>
		''' <param name="prContacto">Input parameter of stored procedure</param>
		''' <param name="prRepLegal">Input parameter of stored procedure</param>
		''' <param name="prEstatus">Input parameter of stored procedure</param>
		''' <param name="prDomicilio">Input parameter of stored procedure</param>
		''' <param name="prColonia">Input parameter of stored procedure</param>
		''' <param name="prCodPos">Input parameter of stored procedure</param>
		''' <param name="prIdPoblacion">Input parameter of stored procedure</param>
		''' <param name="prIdUsuarioAlta">Input parameter of stored procedure</param>
		''' <param name="cuentaCont">Input parameter of stored procedure</param>
		''' <param name="cuentaAnt">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function ProveedoresIns(prRfc As System.String, prRazSocial As System.String, prBeneficiario As System.String, prContacto As System.String, prRepLegal As System.String, prEstatus As System.Int16, prDomicilio As System.String, prColonia As System.String, prCodPos As System.String, prIdPoblacion As System.Int32, prIdUsuarioAlta As System.Int32,  _
cuentaCont As System.Int32, cuentaAnt As System.Int32, ByRef prIdProveedor As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(1) = New SqlParameter("@PrRFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRfc)
			parameters(2) = New SqlParameter("@PrRazSocial", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRazSocial)
			parameters(3) = New SqlParameter("@PrBeneficiario", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prBeneficiario)
			parameters(4) = New SqlParameter("@PrContacto", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prContacto)
			parameters(5) = New SqlParameter("@PrRepLegal", SqlDbType.VarChar, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prRepLegal)
			parameters(6) = New SqlParameter("@PrEstatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, prEstatus)
			parameters(7) = New SqlParameter("@PrDomicilio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prDomicilio)
			parameters(8) = New SqlParameter("@PrColonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prColonia)
			parameters(9) = New SqlParameter("@PrCodPos", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, prCodPos)
			parameters(10) = New SqlParameter("@PrIdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdPoblacion)
			parameters(11) = New SqlParameter("@PrIdUsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, prIdUsuarioAlta)
			parameters(12) = New SqlParameter("@CuentaCont", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaCont)
			parameters(13) = New SqlParameter("@CuentaAnt", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cuentaAnt)
			parameters(0) = new SqlParameter("@PrIdProveedor", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, prIdProveedor)
			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[ProveedoresIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				prIdProveedor = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'UPCon_MCGCatTipoGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UpconMcgcatTipoGanadoCallBack(numOpc As System.Int32, idTipoGanado As System.Int32, nombreTipoGan As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'UPCon_MCGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpconMcgcatTipoGanado(numOpc As System.Int32, idTipoGanado As System.Int32, nombreTipoGan As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UPCon_MCGCatTipoGanado]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UPCon_MCGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpconMcgcatTipoGanado(numOpc As System.Int32, idTipoGanado As System.Int32, nombreTipoGan As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)

			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UPCon_MCGCatTipoGanado]", parameters, Nothing)


			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UPCon_MCGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpconMcgcatTipoGanado(numOpc As System.Int32, idTipoGanado As System.Int32, nombreTipoGan As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UPCon_MCGCatTipoGanado]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UPCon_MCGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpconMcgcatTipoGanado(numOpc As System.Int32, idTipoGanado As System.Int32, nombreTipoGan As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)

			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UPCon_MCGCatTipoGanado]", parameters, transactionToUse)


			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'UP_Select_Datos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UpSelectDatosCallBack(sentencia As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'UP_Select_Datos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="sentencia">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpSelectDatos(sentencia As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Sentencia", SqlDbType.Char, 8000, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sentencia)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UP_Select_Datos]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UP_Select_Datos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="sentencia">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpSelectDatos(sentencia As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Sentencia", SqlDbType.Char, 8000, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sentencia)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UP_Select_Datos]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UP_Select_Datos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="sentencia">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpSelectDatos(sentencia As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@Sentencia", SqlDbType.Char, 8000, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sentencia)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UP_Select_Datos]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UP_Select_Datos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="sentencia">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UpSelectDatos(sentencia As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@Sentencia", SqlDbType.Char, 8000, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sentencia)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UP_Select_Datos]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_ActualizarSaldos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspActualizarSaldosCallBack(fechaFinal As System.DateTime, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_ActualizarSaldos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspActualizarSaldos(fechaFinal As System.DateTime) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_ActualizarSaldos]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_ActualizarSaldos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspActualizarSaldos(fechaFinal As System.DateTime, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_ActualizarSaldos]", parameters, Nothing)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_ActualizarSaldos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspActualizarSaldos(fechaFinal As System.DateTime, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}
			parameters(0) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_ActualizarSaldos]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_ActualizarSaldos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspActualizarSaldos(fechaFinal As System.DateTime, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}
			parameters(0) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_ActualizarSaldos]", parameters, transactionToUse)


			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_APCatIngrediente' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspApcatIngredienteCallBack(codigo As System.Int32, nombre As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_APCatIngrediente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatIngrediente(codigo As System.Int32, nombre As System.String, estatus As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatIngrediente]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatIngrediente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatIngrediente(codigo As System.Int32, nombre As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatIngrediente]", parameters, Nothing)


			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatIngrediente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatIngrediente(codigo As System.Int32, nombre As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatIngrediente]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatIngrediente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatIngrediente(codigo As System.Int32, nombre As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatIngrediente]", parameters, transactionToUse)


			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_APCatNutrientes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspApcatNutrientesCallBack(cveNutriente As System.Int32, nomNutriente As System.String, unidad As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_APCatNutrientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveNutriente">Input parameter of stored procedure</param>
		''' <param name="nomNutriente">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatNutrientes(cveNutriente As System.Int32, nomNutriente As System.String, unidad As System.String, estatus As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Nutriente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveNutriente)
			parameters(1) = New SqlParameter("@Nom_Nutriente", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomNutriente)
			parameters(2) = New SqlParameter("@Unidad", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatNutrientes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatNutrientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveNutriente">Input parameter of stored procedure</param>
		''' <param name="nomNutriente">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatNutrientes(cveNutriente As System.Int32, nomNutriente As System.String, unidad As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Cve_Nutriente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveNutriente)
			parameters(1) = New SqlParameter("@Nom_Nutriente", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomNutriente)
			parameters(2) = New SqlParameter("@Unidad", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatNutrientes]", parameters, Nothing)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatNutrientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveNutriente">Input parameter of stored procedure</param>
		''' <param name="nomNutriente">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatNutrientes(cveNutriente As System.Int32, nomNutriente As System.String, unidad As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Nutriente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveNutriente)
			parameters(1) = New SqlParameter("@Nom_Nutriente", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomNutriente)
			parameters(2) = New SqlParameter("@Unidad", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatNutrientes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_APCatNutrientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveNutriente">Input parameter of stored procedure</param>
		''' <param name="nomNutriente">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspApcatNutrientes(cveNutriente As System.Int32, nomNutriente As System.String, unidad As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Cve_Nutriente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveNutriente)
			parameters(1) = New SqlParameter("@Nom_Nutriente", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomNutriente)
			parameters(2) = New SqlParameter("@Unidad", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_APCatNutrientes]", parameters, transactionToUse)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CabCorPza' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCabCorPzaCallBack(folCorPza As System.String, fecCorPza As System.DateTime, folRastro As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, piezas As System.Int16, kilos As System.Decimal, rendimiento As System.Decimal, cveAlmCorOri As System.Int16, cveAlmCorDes As System.Int16, status As System.String,  _
costoxKilo As System.Decimal, costoMovto As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CabCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fecCorPza">Input parameter of stored procedure</param>
		''' <param name="folRastro">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorOri">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorDes">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="costoMovto">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCabCorPza(folCorPza As System.String, fecCorPza As System.DateTime, folRastro As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, piezas As System.Int16, kilos As System.Decimal, rendimiento As System.Decimal, cveAlmCorOri As System.Int16, cveAlmCorDes As System.Int16, status As System.String,  _
costoxKilo As System.Decimal, costoMovto As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Fec_CorPza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecCorPza)
			parameters(2) = New SqlParameter("@Fol_Rastro", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folRastro)
			parameters(3) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(4) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(8) = New SqlParameter("@Cve_AlmCorOri", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorOri)
			parameters(9) = New SqlParameter("@Cve_AlmCorDes", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorDes)
			parameters(10) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(11) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(12) = New SqlParameter("@CostoMovto", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoMovto)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CabCorPza]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CabCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fecCorPza">Input parameter of stored procedure</param>
		''' <param name="folRastro">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorOri">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorDes">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="costoMovto">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCabCorPza(folCorPza As System.String, fecCorPza As System.DateTime, folRastro As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, piezas As System.Int16, kilos As System.Decimal, rendimiento As System.Decimal, cveAlmCorOri As System.Int16, cveAlmCorDes As System.Int16, status As System.String,  _
costoxKilo As System.Decimal, costoMovto As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Fec_CorPza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecCorPza)
			parameters(2) = New SqlParameter("@Fol_Rastro", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folRastro)
			parameters(3) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(4) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(8) = New SqlParameter("@Cve_AlmCorOri", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorOri)
			parameters(9) = New SqlParameter("@Cve_AlmCorDes", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorDes)
			parameters(10) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(11) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(12) = New SqlParameter("@CostoMovto", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoMovto)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CabCorPza]", parameters, Nothing)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CabCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fecCorPza">Input parameter of stored procedure</param>
		''' <param name="folRastro">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorOri">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorDes">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="costoMovto">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCabCorPza(folCorPza As System.String, fecCorPza As System.DateTime, folRastro As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, piezas As System.Int16, kilos As System.Decimal, rendimiento As System.Decimal, cveAlmCorOri As System.Int16, cveAlmCorDes As System.Int16, status As System.String,  _
costoxKilo As System.Decimal, costoMovto As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Fec_CorPza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecCorPza)
			parameters(2) = New SqlParameter("@Fol_Rastro", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folRastro)
			parameters(3) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(4) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(8) = New SqlParameter("@Cve_AlmCorOri", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorOri)
			parameters(9) = New SqlParameter("@Cve_AlmCorDes", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorDes)
			parameters(10) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(11) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(12) = New SqlParameter("@CostoMovto", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoMovto)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CabCorPza]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CabCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fecCorPza">Input parameter of stored procedure</param>
		''' <param name="folRastro">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorOri">Input parameter of stored procedure</param>
		''' <param name="cveAlmCorDes">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="costoMovto">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCabCorPza(folCorPza As System.String, fecCorPza As System.DateTime, folRastro As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, piezas As System.Int16, kilos As System.Decimal, rendimiento As System.Decimal, cveAlmCorOri As System.Int16, cveAlmCorDes As System.Int16, status As System.String,  _
costoxKilo As System.Decimal, costoMovto As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Fec_CorPza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecCorPza)
			parameters(2) = New SqlParameter("@Fol_Rastro", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folRastro)
			parameters(3) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(4) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(8) = New SqlParameter("@Cve_AlmCorOri", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorOri)
			parameters(9) = New SqlParameter("@Cve_AlmCorDes", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveAlmCorDes)
			parameters(10) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(11) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(12) = New SqlParameter("@CostoMovto", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoMovto)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CabCorPza]", parameters, transactionToUse)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatAlmCorRas' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatAlmCorRasCallBack(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmCorRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmCorRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmCorRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmCorRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmCorRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmCorRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmCorRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmCorRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmCorRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmCorRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmCorRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmCorRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatAlmProRas' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatAlmProRasCallBack(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmProRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmProRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmProRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmProRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmProRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmProRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmProRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmProRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmProRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatAlmProRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveAlmacen">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveScta">Input parameter of stored procedure</param>
		''' <param name="cveSsCta">Input parameter of stored procedure</param>
		''' <param name="cveSssCta">Input parameter of stored procedure</param>
		''' <param name="staPropietario">Input parameter of stored procedure</param>
		''' <param name="cveCliente">Input parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatAlmProRas(nomAlmacen As System.String, nomCorto As System.String, cveCta As System.String, cveScta As System.String, cveSsCta As System.String, cveSssCta As System.String, staPropietario As System.String, cveCliente As System.Int32, staLetraSerie As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveAlmacen As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_Almacen", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(4) = New SqlParameter("@Cve_SCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveScta)
			parameters(5) = New SqlParameter("@Cve_SsCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsCta)
			parameters(6) = New SqlParameter("@Cve_SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssCta)
			parameters(7) = New SqlParameter("@Sta_Propietario", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staPropietario)
			parameters(8) = New SqlParameter("@Cve_Cliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCliente)
			parameters(9) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Almacen", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveAlmacen)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatAlmProRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveAlmacen = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_CatBancos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatBancosCallBack(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBanco As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_CatBancos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBanco">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBancos(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBanco As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBanco", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBanco)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBancos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBanco = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBancos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBanco">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBancos(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBanco As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBanco", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBanco)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBancos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBanco = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBancos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBanco">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBancos(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBanco As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBanco", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBanco)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBancos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBanco = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBancos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBanco">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBancos(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBanco As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBanco", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBanco)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBancos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBanco = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_CatBeneficiarios' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatBeneficiariosCallBack(nombre As System.String, nombreCorto As System.String, tipoBeneficiario As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBeneficiario As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_CatBeneficiarios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBeneficiario">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoBeneficiario">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBeneficiarios(nombre As System.String, nombreCorto As System.String, tipoBeneficiario As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBeneficiario As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 160, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoBeneficiario", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoBeneficiario)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBeneficiario", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBeneficiario)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBeneficiarios]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBeneficiario = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBeneficiarios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBeneficiario">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoBeneficiario">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBeneficiarios(nombre As System.String, nombreCorto As System.String, tipoBeneficiario As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBeneficiario As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 160, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoBeneficiario", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoBeneficiario)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBeneficiario", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBeneficiario)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBeneficiarios]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBeneficiario = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBeneficiarios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBeneficiario">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoBeneficiario">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBeneficiarios(nombre As System.String, nombreCorto As System.String, tipoBeneficiario As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBeneficiario As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 160, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoBeneficiario", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoBeneficiario)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBeneficiario", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBeneficiario)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBeneficiarios]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBeneficiario = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatBeneficiarios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idBeneficiario">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoBeneficiario">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatBeneficiarios(nombre As System.String, nombreCorto As System.String, tipoBeneficiario As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idBeneficiario As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 160, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoBeneficiario", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoBeneficiario)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdBeneficiario", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idBeneficiario)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatBeneficiarios]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idBeneficiario = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatCiuEdo' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatCiuEdoCallBack(cveEstado As System.Int32, cveCiudad As System.Int32, nomCiuEdo As System.String, nomCorCiuEdo As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipo As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef cveCiuEdo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatCiuEdo'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCiuEdo">InputOutput parameter of stored procedure</param>
		''' <param name="cveEstado">Input parameter of stored procedure</param>
		''' <param name="cveCiudad">Input parameter of stored procedure</param>
		''' <param name="nomCiuEdo">Input parameter of stored procedure</param>
		''' <param name="nomCorCiuEdo">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipo">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCiuEdo(cveEstado As System.Int32, cveCiudad As System.Int32, nomCiuEdo As System.String, nomCorCiuEdo As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipo As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef cveCiuEdo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@Cve_Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveEstado)
			parameters(2) = New SqlParameter("@Cve_Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCiudad)
			parameters(3) = New SqlParameter("@Nom_CiuEdo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCiuEdo)
			parameters(4) = New SqlParameter("@NomCorCiuEdo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCiuEdo)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@Tipo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipo)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CiuEdo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveCiuEdo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCiuEdo]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCiuEdo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCiuEdo'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCiuEdo">InputOutput parameter of stored procedure</param>
		''' <param name="cveEstado">Input parameter of stored procedure</param>
		''' <param name="cveCiudad">Input parameter of stored procedure</param>
		''' <param name="nomCiuEdo">Input parameter of stored procedure</param>
		''' <param name="nomCorCiuEdo">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipo">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCiuEdo(cveEstado As System.Int32, cveCiudad As System.Int32, nomCiuEdo As System.String, nomCorCiuEdo As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipo As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef cveCiuEdo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@Cve_Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveEstado)
			parameters(2) = New SqlParameter("@Cve_Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCiudad)
			parameters(3) = New SqlParameter("@Nom_CiuEdo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCiuEdo)
			parameters(4) = New SqlParameter("@NomCorCiuEdo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCiuEdo)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@Tipo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipo)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CiuEdo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveCiuEdo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCiuEdo]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCiuEdo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCiuEdo'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCiuEdo">InputOutput parameter of stored procedure</param>
		''' <param name="cveEstado">Input parameter of stored procedure</param>
		''' <param name="cveCiudad">Input parameter of stored procedure</param>
		''' <param name="nomCiuEdo">Input parameter of stored procedure</param>
		''' <param name="nomCorCiuEdo">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipo">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCiuEdo(cveEstado As System.Int32, cveCiudad As System.Int32, nomCiuEdo As System.String, nomCorCiuEdo As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipo As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef cveCiuEdo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@Cve_Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveEstado)
			parameters(2) = New SqlParameter("@Cve_Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCiudad)
			parameters(3) = New SqlParameter("@Nom_CiuEdo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCiuEdo)
			parameters(4) = New SqlParameter("@NomCorCiuEdo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCiuEdo)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@Tipo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipo)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CiuEdo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveCiuEdo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCiuEdo]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCiuEdo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCiuEdo'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCiuEdo">InputOutput parameter of stored procedure</param>
		''' <param name="cveEstado">Input parameter of stored procedure</param>
		''' <param name="cveCiudad">Input parameter of stored procedure</param>
		''' <param name="nomCiuEdo">Input parameter of stored procedure</param>
		''' <param name="nomCorCiuEdo">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipo">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCiuEdo(cveEstado As System.Int32, cveCiudad As System.Int32, nomCiuEdo As System.String, nomCorCiuEdo As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipo As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef cveCiuEdo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@Cve_Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveEstado)
			parameters(2) = New SqlParameter("@Cve_Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveCiudad)
			parameters(3) = New SqlParameter("@Nom_CiuEdo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCiuEdo)
			parameters(4) = New SqlParameter("@NomCorCiuEdo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCiuEdo)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@Tipo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipo)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CiuEdo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveCiuEdo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCiuEdo]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCiuEdo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatCortes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatCortesCallBack(nomCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveCorte As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCortes(nomCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveCorte As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Corte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorte)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCortes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCorte = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCortes(nomCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveCorte As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(1) = New SqlParameter("@Nom_Corte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorte)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCortes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCorte = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCortes(nomCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveCorte As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Corte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorte)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCortes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCorte = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatCortes(nomCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveCorte As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(1) = New SqlParameter("@Nom_Corte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorte)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatCortes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCorte = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatFolios' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatFoliosCallBack(folio As System.String, nomFolio As System.String, staLetraSerie As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="nomFolio">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatFolios(folio As System.String, nomFolio As System.String, staLetraSerie As System.String, ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@Nom_Folio", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomFolio)
			parameters(3) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatFolios]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="nomFolio">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatFolios(folio As System.String, nomFolio As System.String, staLetraSerie As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@Nom_Folio", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomFolio)
			parameters(3) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatFolios]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="nomFolio">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatFolios(folio As System.String, nomFolio As System.String, staLetraSerie As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@Nom_Folio", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomFolio)
			parameters(3) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatFolios]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">Input parameter of stored procedure</param>
		''' <param name="nomFolio">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="staLetraSerie">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatFolios(folio As System.String, nomFolio As System.String, staLetraSerie As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@Folio", SqlDbType.Char, 3, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folio)
			parameters(1) = New SqlParameter("@Nom_Folio", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomFolio)
			parameters(3) = New SqlParameter("@Sta_LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staLetraSerie)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatFolios]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatProdRas' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatProdRasCallBack(nomProdRas As System.String, nomCorto As System.String, decomisable As System.Boolean, subProducto As System.Boolean, manejoPzas As System.Boolean, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveProdRas As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatProdRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomProdRas">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="decomisable">Input parameter of stored procedure</param>
		''' <param name="subProducto">Input parameter of stored procedure</param>
		''' <param name="manejoPzas">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatProdRas(nomProdRas As System.String, nomCorto As System.String, decomisable As System.Boolean, subProducto As System.Boolean, manejoPzas As System.Boolean, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveProdRas As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_ProdRas", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdRas)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Decomisable", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomisable)
			parameters(4) = New SqlParameter("@SubProducto", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subProducto)
			parameters(5) = New SqlParameter("@ManejoPzas", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, manejoPzas)
			parameters(6) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(7) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(8) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(9) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_ProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveProdRas)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatProdRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveProdRas = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatProdRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomProdRas">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="decomisable">Input parameter of stored procedure</param>
		''' <param name="subProducto">Input parameter of stored procedure</param>
		''' <param name="manejoPzas">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatProdRas(nomProdRas As System.String, nomCorto As System.String, decomisable As System.Boolean, subProducto As System.Boolean, manejoPzas As System.Boolean, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveProdRas As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_ProdRas", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdRas)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Decomisable", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomisable)
			parameters(4) = New SqlParameter("@SubProducto", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subProducto)
			parameters(5) = New SqlParameter("@ManejoPzas", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, manejoPzas)
			parameters(6) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(7) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(8) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(9) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_ProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveProdRas)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatProdRas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveProdRas = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatProdRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomProdRas">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="decomisable">Input parameter of stored procedure</param>
		''' <param name="subProducto">Input parameter of stored procedure</param>
		''' <param name="manejoPzas">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatProdRas(nomProdRas As System.String, nomCorto As System.String, decomisable As System.Boolean, subProducto As System.Boolean, manejoPzas As System.Boolean, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveProdRas As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@Nom_ProdRas", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdRas)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Decomisable", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomisable)
			parameters(4) = New SqlParameter("@SubProducto", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subProducto)
			parameters(5) = New SqlParameter("@ManejoPzas", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, manejoPzas)
			parameters(6) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(7) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(8) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(9) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_ProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveProdRas)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatProdRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveProdRas = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatProdRas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomProdRas">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="decomisable">Input parameter of stored procedure</param>
		''' <param name="subProducto">Input parameter of stored procedure</param>
		''' <param name="manejoPzas">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatProdRas(nomProdRas As System.String, nomCorto As System.String, decomisable As System.Boolean, subProducto As System.Boolean, manejoPzas As System.Boolean, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef cveProdRas As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@Nom_ProdRas", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdRas)
			parameters(2) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(3) = New SqlParameter("@Decomisable", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomisable)
			parameters(4) = New SqlParameter("@SubProducto", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subProducto)
			parameters(5) = New SqlParameter("@ManejoPzas", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, manejoPzas)
			parameters(6) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(7) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(8) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(9) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_ProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, cveProdRas)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatProdRas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveProdRas = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatRastros' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatRastrosCallBack(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idRastro As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatRastros'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idRastro">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatRastros(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idRastro As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdRastro", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idRastro)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatRastros]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idRastro = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatRastros'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idRastro">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatRastros(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idRastro As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdRastro", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idRastro)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatRastros]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idRastro = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatRastros'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idRastro">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatRastros(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idRastro As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdRastro", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idRastro)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatRastros]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idRastro = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatRastros'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idRastro">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatRastros(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idRastro As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdRastro", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idRastro)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatRastros]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idRastro = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CatSubCortes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatSubCortesCallBack(cveCorte As System.Int16, nomSubCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveSubCorte As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CatSubCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomSubCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatSubCortes(cveCorte As System.Int16, nomSubCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveSubCorte As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(2) = New SqlParameter("@Nom_SubCorte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomSubCorte)
			parameters(3) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(4) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(5) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(6) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(7) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatSubCortes]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				cveSubCorte = CType(parameters(1).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatSubCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomSubCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatSubCortes(cveCorte As System.Int16, nomSubCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveSubCorte As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(2) = New SqlParameter("@Nom_SubCorte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomSubCorte)
			parameters(3) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(4) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(5) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(6) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(7) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatSubCortes]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				cveSubCorte = CType(parameters(1).Value, System.Int16)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatSubCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomSubCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatSubCortes(cveCorte As System.Int16, nomSubCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveSubCorte As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(2) = New SqlParameter("@Nom_SubCorte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomSubCorte)
			parameters(3) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(4) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(5) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(6) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(7) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatSubCortes]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				cveSubCorte = CType(parameters(1).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CatSubCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">InputOutput parameter of stored procedure</param>
		''' <param name="nomSubCorte">Input parameter of stored procedure</param>
		''' <param name="nomCorto">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatSubCortes(cveCorte As System.Int16, nomSubCorte As System.String, nomCorto As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef cveSubCorte As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(2) = New SqlParameter("@Nom_SubCorte", SqlDbType.Char, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomSubCorte)
			parameters(3) = New SqlParameter("@NomCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorto)
			parameters(4) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(5) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(6) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(7) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CatSubCortes]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				cveSubCorte = CType(parameters(1).Value, System.Int16)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_CatTiposMoneda' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCatTiposMonedaCallBack(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoMoneda As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_CatTiposMoneda'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoMoneda">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatTiposMoneda(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoMoneda As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoMoneda", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoMoneda)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatTiposMoneda]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoMoneda = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatTiposMoneda'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoMoneda">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatTiposMoneda(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoMoneda As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoMoneda", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoMoneda)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatTiposMoneda]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoMoneda = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatTiposMoneda'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoMoneda">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatTiposMoneda(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoMoneda As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoMoneda", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoMoneda)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatTiposMoneda]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoMoneda = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_CatTiposMoneda'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoMoneda">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCatTiposMoneda(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoMoneda As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoMoneda", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoMoneda)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_CatTiposMoneda]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoMoneda = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatCausasMue' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatCausasMueCallBack(nomCausaMue As System.String, observa As System.String, desCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveCausaMue As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatCausasMue'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCausaMue">InputOutput parameter of stored procedure</param>
		''' <param name="nomCausaMue">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatCausasMue(nomCausaMue As System.String, observa As System.String, desCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveCausaMue As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Nom_CausaMue", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCausaMue)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Text, 2147483647, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CausaMue", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCausaMue)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatCausasMue]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCausaMue = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatCausasMue'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCausaMue">InputOutput parameter of stored procedure</param>
		''' <param name="nomCausaMue">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatCausasMue(nomCausaMue As System.String, observa As System.String, desCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveCausaMue As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Nom_CausaMue", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCausaMue)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Text, 2147483647, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CausaMue", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCausaMue)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatCausasMue]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCausaMue = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatCausasMue'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCausaMue">InputOutput parameter of stored procedure</param>
		''' <param name="nomCausaMue">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatCausasMue(nomCausaMue As System.String, observa As System.String, desCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveCausaMue As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Nom_CausaMue", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCausaMue)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Text, 2147483647, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CausaMue", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCausaMue)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatCausasMue]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCausaMue = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatCausasMue'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveCausaMue">InputOutput parameter of stored procedure</param>
		''' <param name="nomCausaMue">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatCausasMue(nomCausaMue As System.String, observa As System.String, desCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveCausaMue As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Nom_CausaMue", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCausaMue)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Text, 2147483647, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_CausaMue", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveCausaMue)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatCausasMue]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveCausaMue = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatChoferes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatChoferesCallBack(nomChofer As System.String, domicilio As System.String, colonia As System.String, cveCiuEdo As System.Int16, telefono As System.String, observa As System.String, nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, calleyNumero As System.String, estado As System.Int32,  _
ciudad As System.Int32, poblacion As System.Int32, noLicencia As System.String, tipoSangre As System.String, fecha As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveChofer As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nomChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="fecha">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatChoferes(nomChofer As System.String, domicilio As System.String, colonia As System.String, cveCiuEdo As System.Int16, telefono As System.String, observa As System.String, nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, calleyNumero As System.String, estado As System.Int32,  _
ciudad As System.Int32, poblacion As System.Int32, noLicencia As System.String, tipoSangre As System.String, fecha As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveChofer As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(20 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Chofer", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomChofer)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Colonia", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(4) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(5) = New SqlParameter("@Telefono", SqlDbType.Char, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(6) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(7) = New SqlParameter("@Nombre", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(8) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(9) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(10) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(11) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(12) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(13) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(14) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecha)
			parameters(17) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(18) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(19) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Chofer", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveChofer)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatChoferes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveChofer = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nomChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="fecha">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatChoferes(nomChofer As System.String, domicilio As System.String, colonia As System.String, cveCiuEdo As System.Int16, telefono As System.String, observa As System.String, nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, calleyNumero As System.String, estado As System.Int32,  _
ciudad As System.Int32, poblacion As System.Int32, noLicencia As System.String, tipoSangre As System.String, fecha As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveChofer As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(20) {}
			parameters(1) = New SqlParameter("@Nom_Chofer", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomChofer)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Colonia", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(4) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(5) = New SqlParameter("@Telefono", SqlDbType.Char, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(6) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(7) = New SqlParameter("@Nombre", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(8) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(9) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(10) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(11) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(12) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(13) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(14) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecha)
			parameters(17) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(18) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(19) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Chofer", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveChofer)
			' Return value parameter
			parameters(20) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatChoferes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveChofer = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(20).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nomChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="fecha">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatChoferes(nomChofer As System.String, domicilio As System.String, colonia As System.String, cveCiuEdo As System.Int16, telefono As System.String, observa As System.String, nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, calleyNumero As System.String, estado As System.Int32,  _
ciudad As System.Int32, poblacion As System.Int32, noLicencia As System.String, tipoSangre As System.String, fecha As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveChofer As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(20 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Chofer", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomChofer)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Colonia", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(4) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(5) = New SqlParameter("@Telefono", SqlDbType.Char, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(6) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(7) = New SqlParameter("@Nombre", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(8) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(9) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(10) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(11) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(12) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(13) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(14) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecha)
			parameters(17) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(18) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(19) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Chofer", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveChofer)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatChoferes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveChofer = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nomChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="fecha">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatChoferes(nomChofer As System.String, domicilio As System.String, colonia As System.String, cveCiuEdo As System.Int16, telefono As System.String, observa As System.String, nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, calleyNumero As System.String, estado As System.Int32,  _
ciudad As System.Int32, poblacion As System.Int32, noLicencia As System.String, tipoSangre As System.String, fecha As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveChofer As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(20) {}
			parameters(1) = New SqlParameter("@Nom_Chofer", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomChofer)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Colonia", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(4) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(5) = New SqlParameter("@Telefono", SqlDbType.Char, 25, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(6) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(7) = New SqlParameter("@Nombre", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(8) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(9) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(10) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(11) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(12) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(13) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(14) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecha)
			parameters(17) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(18) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(19) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Chofer", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveChofer)
			' Return value parameter
			parameters(20) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatChoferes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveChofer = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(20).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatComiGan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatComiGanCallBack(nomComi As System.String, domicilio As System.String, cveCiuEdo As System.Int16, rfcComi As System.String, comixCab As System.Decimal, cveCta As System.String, cveSubCta As System.String, cveSsubCta As System.String, cveSssubCta As System.String, nombre As System.String, apellidoPaterno As System.String,  _
apellidoMaterno As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveComi As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatComiGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveComi">InputOutput parameter of stored procedure</param>
		''' <param name="nomComi">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="rfcComi">Input parameter of stored procedure</param>
		''' <param name="comixCab">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveSubCta">Input parameter of stored procedure</param>
		''' <param name="cveSsubCta">Input parameter of stored procedure</param>
		''' <param name="cveSssubCta">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatComiGan(nomComi As System.String, domicilio As System.String, cveCiuEdo As System.Int16, rfcComi As System.String, comixCab As System.Decimal, cveCta As System.String, cveSubCta As System.String, cveSsubCta As System.String, cveSssubCta As System.String, nombre As System.String, apellidoPaterno As System.String,  _
apellidoMaterno As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveComi As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(22 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Comi", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomComi)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(4) = New SqlParameter("@RFC_Comi", SqlDbType.Char, 13, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfcComi)
			parameters(5) = New SqlParameter("@ComixCab", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comixCab)
			parameters(6) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(7) = New SqlParameter("@Cve_SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSubCta)
			parameters(8) = New SqlParameter("@Cve_SSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsubCta)
			parameters(9) = New SqlParameter("@Cve_SSSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssubCta)
			parameters(10) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(11) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(12) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(13) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(14) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(15) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(16) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(17) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(18) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(19) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(20) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(21) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Comi", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveComi)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatComiGan]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveComi = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatComiGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveComi">InputOutput parameter of stored procedure</param>
		''' <param name="nomComi">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="rfcComi">Input parameter of stored procedure</param>
		''' <param name="comixCab">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveSubCta">Input parameter of stored procedure</param>
		''' <param name="cveSsubCta">Input parameter of stored procedure</param>
		''' <param name="cveSssubCta">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatComiGan(nomComi As System.String, domicilio As System.String, cveCiuEdo As System.Int16, rfcComi As System.String, comixCab As System.Decimal, cveCta As System.String, cveSubCta As System.String, cveSsubCta As System.String, cveSssubCta As System.String, nombre As System.String, apellidoPaterno As System.String,  _
apellidoMaterno As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveComi As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(22) {}
			parameters(1) = New SqlParameter("@Nom_Comi", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomComi)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(4) = New SqlParameter("@RFC_Comi", SqlDbType.Char, 13, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfcComi)
			parameters(5) = New SqlParameter("@ComixCab", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comixCab)
			parameters(6) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(7) = New SqlParameter("@Cve_SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSubCta)
			parameters(8) = New SqlParameter("@Cve_SSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsubCta)
			parameters(9) = New SqlParameter("@Cve_SSSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssubCta)
			parameters(10) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(11) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(12) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(13) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(14) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(15) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(16) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(17) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(18) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(19) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(20) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(21) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Comi", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveComi)
			' Return value parameter
			parameters(22) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatComiGan]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveComi = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(22).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatComiGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveComi">InputOutput parameter of stored procedure</param>
		''' <param name="nomComi">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="rfcComi">Input parameter of stored procedure</param>
		''' <param name="comixCab">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveSubCta">Input parameter of stored procedure</param>
		''' <param name="cveSsubCta">Input parameter of stored procedure</param>
		''' <param name="cveSssubCta">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatComiGan(nomComi As System.String, domicilio As System.String, cveCiuEdo As System.Int16, rfcComi As System.String, comixCab As System.Decimal, cveCta As System.String, cveSubCta As System.String, cveSsubCta As System.String, cveSssubCta As System.String, nombre As System.String, apellidoPaterno As System.String,  _
apellidoMaterno As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveComi As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(22 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Comi", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomComi)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(4) = New SqlParameter("@RFC_Comi", SqlDbType.Char, 13, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfcComi)
			parameters(5) = New SqlParameter("@ComixCab", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comixCab)
			parameters(6) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(7) = New SqlParameter("@Cve_SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSubCta)
			parameters(8) = New SqlParameter("@Cve_SSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsubCta)
			parameters(9) = New SqlParameter("@Cve_SSSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssubCta)
			parameters(10) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(11) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(12) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(13) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(14) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(15) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(16) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(17) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(18) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(19) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(20) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(21) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Comi", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveComi)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatComiGan]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveComi = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatComiGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveComi">InputOutput parameter of stored procedure</param>
		''' <param name="nomComi">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="cveCiuEdo">Input parameter of stored procedure</param>
		''' <param name="rfcComi">Input parameter of stored procedure</param>
		''' <param name="comixCab">Input parameter of stored procedure</param>
		''' <param name="cveCta">Input parameter of stored procedure</param>
		''' <param name="cveSubCta">Input parameter of stored procedure</param>
		''' <param name="cveSsubCta">Input parameter of stored procedure</param>
		''' <param name="cveSssubCta">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatComiGan(nomComi As System.String, domicilio As System.String, cveCiuEdo As System.Int16, rfcComi As System.String, comixCab As System.Decimal, cveCta As System.String, cveSubCta As System.String, cveSsubCta As System.String, cveSssubCta As System.String, nombre As System.String, apellidoPaterno As System.String,  _
apellidoMaterno As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveComi As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(22) {}
			parameters(1) = New SqlParameter("@Nom_Comi", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomComi)
			parameters(2) = New SqlParameter("@Domicilio", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(3) = New SqlParameter("@Cve_CiuEdo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCiuEdo)
			parameters(4) = New SqlParameter("@RFC_Comi", SqlDbType.Char, 13, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfcComi)
			parameters(5) = New SqlParameter("@ComixCab", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comixCab)
			parameters(6) = New SqlParameter("@Cve_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveCta)
			parameters(7) = New SqlParameter("@Cve_SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSubCta)
			parameters(8) = New SqlParameter("@Cve_SSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSsubCta)
			parameters(9) = New SqlParameter("@Cve_SSSubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveSssubCta)
			parameters(10) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(11) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(12) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(13) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(14) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(15) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(16) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(17) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(18) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(19) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(20) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(21) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Comi", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveComi)
			' Return value parameter
			parameters(22) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatComiGan]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveComi = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(22).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatConGas' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatConGasCallBack(nomGasto As System.String, booIva As System.String, ptjIva As System.Decimal, desCorta As System.String, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveGasto As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatConGas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nomGasto">Input parameter of stored procedure</param>
		''' <param name="booIva">Input parameter of stored procedure</param>
		''' <param name="ptjIva">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatConGas(nomGasto As System.String, booIva As System.String, ptjIva As System.Decimal, desCorta As System.String, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveGasto As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Gasto", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGasto)
			parameters(2) = New SqlParameter("@Boo_IVA", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, booIva)
			parameters(3) = New SqlParameter("@Ptj_IVA", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, ptjIva)
			parameters(4) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Gasto", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveGasto)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatConGas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveGasto = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatConGas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nomGasto">Input parameter of stored procedure</param>
		''' <param name="booIva">Input parameter of stored procedure</param>
		''' <param name="ptjIva">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatConGas(nomGasto As System.String, booIva As System.String, ptjIva As System.Decimal, desCorta As System.String, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveGasto As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@Nom_Gasto", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGasto)
			parameters(2) = New SqlParameter("@Boo_IVA", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, booIva)
			parameters(3) = New SqlParameter("@Ptj_IVA", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, ptjIva)
			parameters(4) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Gasto", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveGasto)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatConGas]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveGasto = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatConGas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nomGasto">Input parameter of stored procedure</param>
		''' <param name="booIva">Input parameter of stored procedure</param>
		''' <param name="ptjIva">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatConGas(nomGasto As System.String, booIva As System.String, ptjIva As System.Decimal, desCorta As System.String, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveGasto As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@Nom_Gasto", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGasto)
			parameters(2) = New SqlParameter("@Boo_IVA", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, booIva)
			parameters(3) = New SqlParameter("@Ptj_IVA", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, ptjIva)
			parameters(4) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Gasto", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveGasto)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatConGas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveGasto = CType(parameters(0).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatConGas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nomGasto">Input parameter of stored procedure</param>
		''' <param name="booIva">Input parameter of stored procedure</param>
		''' <param name="ptjIva">Input parameter of stored procedure</param>
		''' <param name="desCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatConGas(nomGasto As System.String, booIva As System.String, ptjIva As System.Decimal, desCorta As System.String, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef cveGasto As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@Nom_Gasto", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGasto)
			parameters(2) = New SqlParameter("@Boo_IVA", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, booIva)
			parameters(3) = New SqlParameter("@Ptj_IVA", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, ptjIva)
			parameters(4) = New SqlParameter("@DesCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, desCorta)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@Cve_Gasto", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, cveGasto)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatConGas]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				cveGasto = CType(parameters(0).Value, System.Int16)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatMovGan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatMovGanCallBack(cveMovGan As System.String, nomMovGan As System.String, staTipoMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codigo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatMovGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveMovGan">Input parameter of stored procedure</param>
		''' <param name="nomMovGan">Input parameter of stored procedure</param>
		''' <param name="staTipoMov">Input parameter of stored procedure</param>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatMovGan(cveMovGan As System.String, nomMovGan As System.String, staTipoMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codigo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(0) = New SqlParameter("@Cve_MovGan", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveMovGan)
			parameters(1) = New SqlParameter("@Nom_MovGan", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomMovGan)
			parameters(2) = New SqlParameter("@Sta_TipoMov", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staTipoMov)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatMovGan]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				codigo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatMovGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveMovGan">Input parameter of stored procedure</param>
		''' <param name="nomMovGan">Input parameter of stored procedure</param>
		''' <param name="staTipoMov">Input parameter of stored procedure</param>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatMovGan(cveMovGan As System.String, nomMovGan As System.String, staTipoMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codigo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(0) = New SqlParameter("@Cve_MovGan", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveMovGan)
			parameters(1) = New SqlParameter("@Nom_MovGan", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomMovGan)
			parameters(2) = New SqlParameter("@Sta_TipoMov", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staTipoMov)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatMovGan]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				codigo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatMovGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveMovGan">Input parameter of stored procedure</param>
		''' <param name="nomMovGan">Input parameter of stored procedure</param>
		''' <param name="staTipoMov">Input parameter of stored procedure</param>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatMovGan(cveMovGan As System.String, nomMovGan As System.String, staTipoMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codigo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(0) = New SqlParameter("@Cve_MovGan", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveMovGan)
			parameters(1) = New SqlParameter("@Nom_MovGan", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomMovGan)
			parameters(2) = New SqlParameter("@Sta_TipoMov", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staTipoMov)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatMovGan]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				codigo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatMovGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveMovGan">Input parameter of stored procedure</param>
		''' <param name="nomMovGan">Input parameter of stored procedure</param>
		''' <param name="staTipoMov">Input parameter of stored procedure</param>
		''' <param name="codigo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatMovGan(cveMovGan As System.String, nomMovGan As System.String, staTipoMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codigo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(0) = New SqlParameter("@Cve_MovGan", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveMovGan)
			parameters(1) = New SqlParameter("@Nom_MovGan", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomMovGan)
			parameters(2) = New SqlParameter("@Sta_TipoMov", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, staTipoMov)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigo)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatMovGan]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				codigo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatTipGan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatTipGanCallBack(cveGanado As System.String, nomGanado As System.String, acumCab As System.Int32, acumKil As System.Decimal, fecUltEnt As System.DateTime, fecUltSal As System.DateTime, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codTipGan As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatTipGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGanado">Input parameter of stored procedure</param>
		''' <param name="nomGanado">Input parameter of stored procedure</param>
		''' <param name="acumCab">Input parameter of stored procedure</param>
		''' <param name="acumKil">Input parameter of stored procedure</param>
		''' <param name="fecUltEnt">Input parameter of stored procedure</param>
		''' <param name="fecUltSal">Input parameter of stored procedure</param>
		''' <param name="codTipGan">InputOutput parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatTipGan(cveGanado As System.String, nomGanado As System.String, acumCab As System.Int32, acumKil As System.Decimal, fecUltEnt As System.DateTime, fecUltSal As System.DateTime, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codTipGan As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Ganado", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveGanado)
			parameters(1) = New SqlParameter("@Nom_Ganado", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGanado)
			parameters(2) = New SqlParameter("@AcumCab", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumCab)
			parameters(3) = New SqlParameter("@AcumKil", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKil)
			parameters(4) = New SqlParameter("@Fec_UltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltEnt)
			parameters(5) = New SqlParameter("@Fec_UltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltSal)
			parameters(7) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(6) = new SqlParameter("@CodTipGan", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codTipGan)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatTipGan]", parameters, Nothing)
			If Not parameters(6).Value Is System.DBNull.Value Then
				codTipGan = CType(parameters(6).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatTipGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGanado">Input parameter of stored procedure</param>
		''' <param name="nomGanado">Input parameter of stored procedure</param>
		''' <param name="acumCab">Input parameter of stored procedure</param>
		''' <param name="acumKil">Input parameter of stored procedure</param>
		''' <param name="fecUltEnt">Input parameter of stored procedure</param>
		''' <param name="fecUltSal">Input parameter of stored procedure</param>
		''' <param name="codTipGan">InputOutput parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatTipGan(cveGanado As System.String, nomGanado As System.String, acumCab As System.Int32, acumKil As System.Decimal, fecUltEnt As System.DateTime, fecUltSal As System.DateTime, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codTipGan As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Cve_Ganado", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveGanado)
			parameters(1) = New SqlParameter("@Nom_Ganado", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGanado)
			parameters(2) = New SqlParameter("@AcumCab", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumCab)
			parameters(3) = New SqlParameter("@AcumKil", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKil)
			parameters(4) = New SqlParameter("@Fec_UltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltEnt)
			parameters(5) = New SqlParameter("@Fec_UltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltSal)
			parameters(7) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(6) = new SqlParameter("@CodTipGan", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codTipGan)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatTipGan]", parameters, Nothing)
			If Not parameters(6).Value Is System.DBNull.Value Then
				codTipGan = CType(parameters(6).Value, System.Int32)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatTipGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGanado">Input parameter of stored procedure</param>
		''' <param name="nomGanado">Input parameter of stored procedure</param>
		''' <param name="acumCab">Input parameter of stored procedure</param>
		''' <param name="acumKil">Input parameter of stored procedure</param>
		''' <param name="fecUltEnt">Input parameter of stored procedure</param>
		''' <param name="fecUltSal">Input parameter of stored procedure</param>
		''' <param name="codTipGan">InputOutput parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatTipGan(cveGanado As System.String, nomGanado As System.String, acumCab As System.Int32, acumKil As System.Decimal, fecUltEnt As System.DateTime, fecUltSal As System.DateTime, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codTipGan As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Ganado", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveGanado)
			parameters(1) = New SqlParameter("@Nom_Ganado", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGanado)
			parameters(2) = New SqlParameter("@AcumCab", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumCab)
			parameters(3) = New SqlParameter("@AcumKil", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKil)
			parameters(4) = New SqlParameter("@Fec_UltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltEnt)
			parameters(5) = New SqlParameter("@Fec_UltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltSal)
			parameters(7) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(6) = new SqlParameter("@CodTipGan", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codTipGan)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatTipGan]", parameters, transactionToUse)
			If Not parameters(6).Value Is System.DBNull.Value Then
				codTipGan = CType(parameters(6).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatTipGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveGanado">Input parameter of stored procedure</param>
		''' <param name="nomGanado">Input parameter of stored procedure</param>
		''' <param name="acumCab">Input parameter of stored procedure</param>
		''' <param name="acumKil">Input parameter of stored procedure</param>
		''' <param name="fecUltEnt">Input parameter of stored procedure</param>
		''' <param name="fecUltSal">Input parameter of stored procedure</param>
		''' <param name="codTipGan">InputOutput parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatTipGan(cveGanado As System.String, nomGanado As System.String, acumCab As System.Int32, acumKil As System.Decimal, fecUltEnt As System.DateTime, fecUltSal As System.DateTime, observaciones As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef codTipGan As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Cve_Ganado", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveGanado)
			parameters(1) = New SqlParameter("@Nom_Ganado", SqlDbType.Char, 80, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomGanado)
			parameters(2) = New SqlParameter("@AcumCab", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumCab)
			parameters(3) = New SqlParameter("@AcumKil", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKil)
			parameters(4) = New SqlParameter("@Fec_UltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltEnt)
			parameters(5) = New SqlParameter("@Fec_UltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltSal)
			parameters(7) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(6) = new SqlParameter("@CodTipGan", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codTipGan)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatTipGan]", parameters, transactionToUse)
			If Not parameters(6).Value Is System.DBNull.Value Then
				codTipGan = CType(parameters(6).Value, System.Int32)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CGCatVehiculos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCgcatVehiculosCallBack(cveVehiculo As System.String, nomVehiculo As System.String, observa As System.String, marca As System.String, modelo As System.String, numeroSerie As System.String, placas As System.String, fechaCompra As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef codVehiculo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveVehiculo">Input parameter of stored procedure</param>
		''' <param name="nomVehiculo">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="numeroSerie">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="codVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatVehiculos(cveVehiculo As System.String, nomVehiculo As System.String, observa As System.String, marca As System.String, modelo As System.String, numeroSerie As System.String, placas As System.String, fechaCompra As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef codVehiculo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Vehiculo", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVehiculo)
			parameters(1) = New SqlParameter("@Nom_Vehiculo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomVehiculo)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@NumeroSerie", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroSerie)
			parameters(6) = New SqlParameter("@Placas", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(8) = new SqlParameter("@CodVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codVehiculo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatVehiculos]", parameters, Nothing)
			If Not parameters(8).Value Is System.DBNull.Value Then
				codVehiculo = CType(parameters(8).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveVehiculo">Input parameter of stored procedure</param>
		''' <param name="nomVehiculo">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="numeroSerie">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="codVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatVehiculos(cveVehiculo As System.String, nomVehiculo As System.String, observa As System.String, marca As System.String, modelo As System.String, numeroSerie As System.String, placas As System.String, fechaCompra As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef codVehiculo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(0) = New SqlParameter("@Cve_Vehiculo", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVehiculo)
			parameters(1) = New SqlParameter("@Nom_Vehiculo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomVehiculo)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@NumeroSerie", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroSerie)
			parameters(6) = New SqlParameter("@Placas", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(8) = new SqlParameter("@CodVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codVehiculo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatVehiculos]", parameters, Nothing)
			If Not parameters(8).Value Is System.DBNull.Value Then
				codVehiculo = CType(parameters(8).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveVehiculo">Input parameter of stored procedure</param>
		''' <param name="nomVehiculo">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="numeroSerie">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="codVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatVehiculos(cveVehiculo As System.String, nomVehiculo As System.String, observa As System.String, marca As System.String, modelo As System.String, numeroSerie As System.String, placas As System.String, fechaCompra As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef codVehiculo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(0) = New SqlParameter("@Cve_Vehiculo", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVehiculo)
			parameters(1) = New SqlParameter("@Nom_Vehiculo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomVehiculo)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@NumeroSerie", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroSerie)
			parameters(6) = New SqlParameter("@Placas", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(8) = new SqlParameter("@CodVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codVehiculo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatVehiculos]", parameters, transactionToUse)
			If Not parameters(8).Value Is System.DBNull.Value Then
				codVehiculo = CType(parameters(8).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="cveVehiculo">Input parameter of stored procedure</param>
		''' <param name="nomVehiculo">Input parameter of stored procedure</param>
		''' <param name="observa">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="numeroSerie">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="codVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCgcatVehiculos(cveVehiculo As System.String, nomVehiculo As System.String, observa As System.String, marca As System.String, modelo As System.String, numeroSerie As System.String, placas As System.String, fechaCompra As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef codVehiculo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(0) = New SqlParameter("@Cve_Vehiculo", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVehiculo)
			parameters(1) = New SqlParameter("@Nom_Vehiculo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomVehiculo)
			parameters(2) = New SqlParameter("@Observa", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observa)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@NumeroSerie", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroSerie)
			parameters(6) = New SqlParameter("@Placas", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(8) = new SqlParameter("@CodVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codVehiculo)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CGCatVehiculos]", parameters, transactionToUse)
			If Not parameters(8).Value Is System.DBNull.Value Then
				codVehiculo = CType(parameters(8).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'UspCon_MSCPalettes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspConMscpalettesCallBack(numOpc As System.Int32, idFolioEtiqueta As System.String, idFolioPalette As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'UspCon_MSCPalettes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConMscpalettes(numOpc As System.Int32, idFolioEtiqueta As System.String, idFolioPalette As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_MSCPalettes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_MSCPalettes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConMscpalettes(numOpc As System.Int32, idFolioEtiqueta As System.String, idFolioPalette As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)

			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_MSCPalettes]", parameters, Nothing)


			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_MSCPalettes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConMscpalettes(numOpc As System.Int32, idFolioEtiqueta As System.String, idFolioPalette As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_MSCPalettes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_MSCPalettes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConMscpalettes(numOpc As System.Int32, idFolioEtiqueta As System.String, idFolioPalette As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)

			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_MSCPalettes]", parameters, transactionToUse)


			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'UspCon_RegistroSacrificiosCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspConRegistroSacrificiosCabCallBack(opcion As System.Int32, loteSacrifio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'UspCon_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="loteSacrifio">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConRegistroSacrificiosCab(opcion As System.Int32, loteSacrifio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@LoteSacrifio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrifio)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_RegistroSacrificiosCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="loteSacrifio">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConRegistroSacrificiosCab(opcion As System.Int32, loteSacrifio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@LoteSacrifio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrifio)

			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_RegistroSacrificiosCab]", parameters, Nothing)


			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="loteSacrifio">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConRegistroSacrificiosCab(opcion As System.Int32, loteSacrifio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@LoteSacrifio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrifio)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_RegistroSacrificiosCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspCon_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="loteSacrifio">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspConRegistroSacrificiosCab(opcion As System.Int32, loteSacrifio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@LoteSacrifio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrifio)

			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspCon_RegistroSacrificiosCab]", parameters, transactionToUse)


			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_CtasBan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspCtasBanCallBack(numCta As System.String, banco As System.Int16, ctaHabien As System.String, ctaCont As System.String, sctaCont As System.String, ssctaCont As System.String, sssctaCont As System.String, tipoCta As System.Int16, serieFol As System.String, ultCheque As System.Int32, sdoAnt As System.Decimal,  _
cargosDia As System.Decimal, abonosDia As System.Decimal, sdoActual As System.Decimal, fecUltCie As System.DateTime, ctaDlls As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_CtasBan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numCta">Input parameter of stored procedure</param>
		''' <param name="banco">Input parameter of stored procedure</param>
		''' <param name="ctaHabien">Input parameter of stored procedure</param>
		''' <param name="ctaCont">Input parameter of stored procedure</param>
		''' <param name="sctaCont">Input parameter of stored procedure</param>
		''' <param name="ssctaCont">Input parameter of stored procedure</param>
		''' <param name="sssctaCont">Input parameter of stored procedure</param>
		''' <param name="tipoCta">Input parameter of stored procedure</param>
		''' <param name="serieFol">Input parameter of stored procedure</param>
		''' <param name="ultCheque">Input parameter of stored procedure</param>
		''' <param name="sdoAnt">Input parameter of stored procedure</param>
		''' <param name="cargosDia">Input parameter of stored procedure</param>
		''' <param name="abonosDia">Input parameter of stored procedure</param>
		''' <param name="sdoActual">Input parameter of stored procedure</param>
		''' <param name="fecUltCie">Input parameter of stored procedure</param>
		''' <param name="ctaDlls">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCtasBan(numCta As System.String, banco As System.Int16, ctaHabien As System.String, ctaCont As System.String, sctaCont As System.String, ssctaCont As System.String, sssctaCont As System.String, tipoCta As System.Int16, serieFol As System.String, ultCheque As System.Int32, sdoAnt As System.Decimal,  _
cargosDia As System.Decimal, abonosDia As System.Decimal, sdoActual As System.Decimal, fecUltCie As System.DateTime, ctaDlls As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(18 - 1) {}
			parameters(0) = New SqlParameter("@NumCta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numCta)
			parameters(1) = New SqlParameter("@Banco", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, banco)
			parameters(2) = New SqlParameter("@Cta_habien", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaHabien)
			parameters(3) = New SqlParameter("@Cta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaCont)
			parameters(4) = New SqlParameter("@Scta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sctaCont)
			parameters(5) = New SqlParameter("@Sscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssctaCont)
			parameters(6) = New SqlParameter("@Ssscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssctaCont)
			parameters(7) = New SqlParameter("@Tipo_Cta", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoCta)
			parameters(8) = New SqlParameter("@Serie_Fol", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serieFol)
			parameters(9) = New SqlParameter("@Ult_Cheque", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ultCheque)
			parameters(10) = New SqlParameter("@Sdo_Ant", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoAnt)
			parameters(11) = New SqlParameter("@Cargos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cargosDia)
			parameters(12) = New SqlParameter("@Abonos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, abonosDia)
			parameters(13) = New SqlParameter("@Sdo_Actual", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoActual)
			parameters(14) = New SqlParameter("@FecUltCie", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltCie)
			parameters(15) = New SqlParameter("@CtaDlls", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaDlls)
			parameters(16) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(17) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CtasBan]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CtasBan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numCta">Input parameter of stored procedure</param>
		''' <param name="banco">Input parameter of stored procedure</param>
		''' <param name="ctaHabien">Input parameter of stored procedure</param>
		''' <param name="ctaCont">Input parameter of stored procedure</param>
		''' <param name="sctaCont">Input parameter of stored procedure</param>
		''' <param name="ssctaCont">Input parameter of stored procedure</param>
		''' <param name="sssctaCont">Input parameter of stored procedure</param>
		''' <param name="tipoCta">Input parameter of stored procedure</param>
		''' <param name="serieFol">Input parameter of stored procedure</param>
		''' <param name="ultCheque">Input parameter of stored procedure</param>
		''' <param name="sdoAnt">Input parameter of stored procedure</param>
		''' <param name="cargosDia">Input parameter of stored procedure</param>
		''' <param name="abonosDia">Input parameter of stored procedure</param>
		''' <param name="sdoActual">Input parameter of stored procedure</param>
		''' <param name="fecUltCie">Input parameter of stored procedure</param>
		''' <param name="ctaDlls">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCtasBan(numCta As System.String, banco As System.Int16, ctaHabien As System.String, ctaCont As System.String, sctaCont As System.String, ssctaCont As System.String, sssctaCont As System.String, tipoCta As System.Int16, serieFol As System.String, ultCheque As System.Int32, sdoAnt As System.Decimal,  _
cargosDia As System.Decimal, abonosDia As System.Decimal, sdoActual As System.Decimal, fecUltCie As System.DateTime, ctaDlls As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(18) {}
			parameters(0) = New SqlParameter("@NumCta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numCta)
			parameters(1) = New SqlParameter("@Banco", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, banco)
			parameters(2) = New SqlParameter("@Cta_habien", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaHabien)
			parameters(3) = New SqlParameter("@Cta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaCont)
			parameters(4) = New SqlParameter("@Scta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sctaCont)
			parameters(5) = New SqlParameter("@Sscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssctaCont)
			parameters(6) = New SqlParameter("@Ssscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssctaCont)
			parameters(7) = New SqlParameter("@Tipo_Cta", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoCta)
			parameters(8) = New SqlParameter("@Serie_Fol", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serieFol)
			parameters(9) = New SqlParameter("@Ult_Cheque", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ultCheque)
			parameters(10) = New SqlParameter("@Sdo_Ant", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoAnt)
			parameters(11) = New SqlParameter("@Cargos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cargosDia)
			parameters(12) = New SqlParameter("@Abonos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, abonosDia)
			parameters(13) = New SqlParameter("@Sdo_Actual", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoActual)
			parameters(14) = New SqlParameter("@FecUltCie", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltCie)
			parameters(15) = New SqlParameter("@CtaDlls", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaDlls)
			parameters(16) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(17) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(18) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CtasBan]", parameters, Nothing)


			returnValue = CType(parameters(18).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CtasBan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numCta">Input parameter of stored procedure</param>
		''' <param name="banco">Input parameter of stored procedure</param>
		''' <param name="ctaHabien">Input parameter of stored procedure</param>
		''' <param name="ctaCont">Input parameter of stored procedure</param>
		''' <param name="sctaCont">Input parameter of stored procedure</param>
		''' <param name="ssctaCont">Input parameter of stored procedure</param>
		''' <param name="sssctaCont">Input parameter of stored procedure</param>
		''' <param name="tipoCta">Input parameter of stored procedure</param>
		''' <param name="serieFol">Input parameter of stored procedure</param>
		''' <param name="ultCheque">Input parameter of stored procedure</param>
		''' <param name="sdoAnt">Input parameter of stored procedure</param>
		''' <param name="cargosDia">Input parameter of stored procedure</param>
		''' <param name="abonosDia">Input parameter of stored procedure</param>
		''' <param name="sdoActual">Input parameter of stored procedure</param>
		''' <param name="fecUltCie">Input parameter of stored procedure</param>
		''' <param name="ctaDlls">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCtasBan(numCta As System.String, banco As System.Int16, ctaHabien As System.String, ctaCont As System.String, sctaCont As System.String, ssctaCont As System.String, sssctaCont As System.String, tipoCta As System.Int16, serieFol As System.String, ultCheque As System.Int32, sdoAnt As System.Decimal,  _
cargosDia As System.Decimal, abonosDia As System.Decimal, sdoActual As System.Decimal, fecUltCie As System.DateTime, ctaDlls As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(18 - 1) {}
			parameters(0) = New SqlParameter("@NumCta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numCta)
			parameters(1) = New SqlParameter("@Banco", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, banco)
			parameters(2) = New SqlParameter("@Cta_habien", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaHabien)
			parameters(3) = New SqlParameter("@Cta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaCont)
			parameters(4) = New SqlParameter("@Scta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sctaCont)
			parameters(5) = New SqlParameter("@Sscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssctaCont)
			parameters(6) = New SqlParameter("@Ssscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssctaCont)
			parameters(7) = New SqlParameter("@Tipo_Cta", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoCta)
			parameters(8) = New SqlParameter("@Serie_Fol", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serieFol)
			parameters(9) = New SqlParameter("@Ult_Cheque", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ultCheque)
			parameters(10) = New SqlParameter("@Sdo_Ant", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoAnt)
			parameters(11) = New SqlParameter("@Cargos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cargosDia)
			parameters(12) = New SqlParameter("@Abonos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, abonosDia)
			parameters(13) = New SqlParameter("@Sdo_Actual", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoActual)
			parameters(14) = New SqlParameter("@FecUltCie", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltCie)
			parameters(15) = New SqlParameter("@CtaDlls", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaDlls)
			parameters(16) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(17) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CtasBan]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_CtasBan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numCta">Input parameter of stored procedure</param>
		''' <param name="banco">Input parameter of stored procedure</param>
		''' <param name="ctaHabien">Input parameter of stored procedure</param>
		''' <param name="ctaCont">Input parameter of stored procedure</param>
		''' <param name="sctaCont">Input parameter of stored procedure</param>
		''' <param name="ssctaCont">Input parameter of stored procedure</param>
		''' <param name="sssctaCont">Input parameter of stored procedure</param>
		''' <param name="tipoCta">Input parameter of stored procedure</param>
		''' <param name="serieFol">Input parameter of stored procedure</param>
		''' <param name="ultCheque">Input parameter of stored procedure</param>
		''' <param name="sdoAnt">Input parameter of stored procedure</param>
		''' <param name="cargosDia">Input parameter of stored procedure</param>
		''' <param name="abonosDia">Input parameter of stored procedure</param>
		''' <param name="sdoActual">Input parameter of stored procedure</param>
		''' <param name="fecUltCie">Input parameter of stored procedure</param>
		''' <param name="ctaDlls">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspCtasBan(numCta As System.String, banco As System.Int16, ctaHabien As System.String, ctaCont As System.String, sctaCont As System.String, ssctaCont As System.String, sssctaCont As System.String, tipoCta As System.Int16, serieFol As System.String, ultCheque As System.Int32, sdoAnt As System.Decimal,  _
cargosDia As System.Decimal, abonosDia As System.Decimal, sdoActual As System.Decimal, fecUltCie As System.DateTime, ctaDlls As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(18) {}
			parameters(0) = New SqlParameter("@NumCta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numCta)
			parameters(1) = New SqlParameter("@Banco", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, banco)
			parameters(2) = New SqlParameter("@Cta_habien", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaHabien)
			parameters(3) = New SqlParameter("@Cta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaCont)
			parameters(4) = New SqlParameter("@Scta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sctaCont)
			parameters(5) = New SqlParameter("@Sscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssctaCont)
			parameters(6) = New SqlParameter("@Ssscta_Cont", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssctaCont)
			parameters(7) = New SqlParameter("@Tipo_Cta", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoCta)
			parameters(8) = New SqlParameter("@Serie_Fol", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serieFol)
			parameters(9) = New SqlParameter("@Ult_Cheque", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ultCheque)
			parameters(10) = New SqlParameter("@Sdo_Ant", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoAnt)
			parameters(11) = New SqlParameter("@Cargos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cargosDia)
			parameters(12) = New SqlParameter("@Abonos_Dia", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, abonosDia)
			parameters(13) = New SqlParameter("@Sdo_Actual", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, sdoActual)
			parameters(14) = New SqlParameter("@FecUltCie", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecUltCie)
			parameters(15) = New SqlParameter("@CtaDlls", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaDlls)
			parameters(16) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(17) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(18) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_CtasBan]", parameters, transactionToUse)


			returnValue = CType(parameters(18).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_DetCorPza' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspDetCorPzaCallBack(folCorPza As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, cveSubCorte As System.Int16, cveRenglon As System.Int16, piezas As System.Int16, kilos As System.Decimal, status As System.String, costoxKilo As System.Decimal, func As System.String, numOpc As System.Int32 _
, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_DetCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspDetCorPza(folCorPza As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, cveSubCorte As System.Int16, cveRenglon As System.Int16, piezas As System.Int16, kilos As System.Decimal, status As System.String, costoxKilo As System.Decimal, func As System.String, numOpc As System.Int32 _
) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(2) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(3) = New SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			parameters(4) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(8) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_DetCorPza]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_DetCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspDetCorPza(folCorPza As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, cveSubCorte As System.Int16, cveRenglon As System.Int16, piezas As System.Int16, kilos As System.Decimal, status As System.String, costoxKilo As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(2) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(3) = New SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			parameters(4) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(8) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_DetCorPza]", parameters, Nothing)


			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_DetCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspDetCorPza(folCorPza As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, cveSubCorte As System.Int16, cveRenglon As System.Int16, piezas As System.Int16, kilos As System.Decimal, status As System.String, costoxKilo As System.Decimal, func As System.String, numOpc As System.Int32 _
, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(2) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(3) = New SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			parameters(4) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(8) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_DetCorPza]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_DetCorPza'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="cveTipoCorte">Input parameter of stored procedure</param>
		''' <param name="cveCorte">Input parameter of stored procedure</param>
		''' <param name="cveSubCorte">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="status">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspDetCorPza(folCorPza As System.String, cveTipoCorte As System.Int16, cveCorte As System.Int16, cveSubCorte As System.Int16, cveRenglon As System.Int16, piezas As System.Int16, kilos As System.Decimal, status As System.String, costoxKilo As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(1) = New SqlParameter("@Cve_TipoCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveTipoCorte)
			parameters(2) = New SqlParameter("@Cve_Corte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveCorte)
			parameters(3) = New SqlParameter("@Cve_SubCorte", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveSubCorte)
			parameters(4) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(5) = New SqlParameter("@Piezas", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, piezas)
			parameters(6) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(7) = New SqlParameter("@Status", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, status)
			parameters(8) = New SqlParameter("@CostoxKilo", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_DetCorPza]", parameters, transactionToUse)


			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FacturasClientesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFacturasClientesCabCallBack(serie As System.String, noFactura As System.String, idCliente As System.Int32, fechaFactura As System.DateTime, fechaCaptura As System.DateTime, fechaVencimiento As System.DateTime, contado As System.Boolean, credito As System.Boolean, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal,  _
contabilizado As System.String, idPoliza As System.Int32, fechaContabilizacion As System.DateTime, estatus As System.String, observaciones As System.String, fechaCancelacion As System.DateTime, idUsuarioCancela As System.Int32, idClienteCargo As System.Int32, formaDePago As System.String, metodoDePago As System.String, condicionesDePago As System.String,  _
uuid As System.String, origen As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="serie">Input parameter of stored procedure</param>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaFactura">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaVencimiento">Input parameter of stored procedure</param>
		''' <param name="contado">Input parameter of stored procedure</param>
		''' <param name="credito">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="idClienteCargo">Input parameter of stored procedure</param>
		''' <param name="formaDePago">Input parameter of stored procedure</param>
		''' <param name="metodoDePago">Input parameter of stored procedure</param>
		''' <param name="condicionesDePago">Input parameter of stored procedure</param>
		''' <param name="uuid">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesCab(serie As System.String, noFactura As System.String, idCliente As System.Int32, fechaFactura As System.DateTime, fechaCaptura As System.DateTime, fechaVencimiento As System.DateTime, contado As System.Boolean, credito As System.Boolean, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal,  _
contabilizado As System.String, idPoliza As System.Int32, fechaContabilizacion As System.DateTime, estatus As System.String, observaciones As System.String, fechaCancelacion As System.DateTime, idUsuarioCancela As System.Int32, idClienteCargo As System.Int32, formaDePago As System.String, metodoDePago As System.String, condicionesDePago As System.String,  _
uuid As System.String, origen As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(26 - 1) {}
			parameters(0) = New SqlParameter("@Serie", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serie)
			parameters(1) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(2) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(3) = New SqlParameter("@FechaFactura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFactura)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaVencimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVencimiento)
			parameters(6) = New SqlParameter("@Contado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contado)
			parameters(7) = New SqlParameter("@Credito", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, credito)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(11) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(12) = New SqlParameter("@IdPoliza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(13) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(14) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(17) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(18) = New SqlParameter("@IdClienteCargo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idClienteCargo)
			parameters(19) = New SqlParameter("@FormaDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, formaDePago)
			parameters(20) = New SqlParameter("@MetodoDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, metodoDePago)
			parameters(21) = New SqlParameter("@CondicionesDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, condicionesDePago)
			parameters(22) = New SqlParameter("@UUID", SqlDbType.VarChar, 36, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, uuid)
			parameters(23) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(24) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(25) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="serie">Input parameter of stored procedure</param>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaFactura">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaVencimiento">Input parameter of stored procedure</param>
		''' <param name="contado">Input parameter of stored procedure</param>
		''' <param name="credito">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="idClienteCargo">Input parameter of stored procedure</param>
		''' <param name="formaDePago">Input parameter of stored procedure</param>
		''' <param name="metodoDePago">Input parameter of stored procedure</param>
		''' <param name="condicionesDePago">Input parameter of stored procedure</param>
		''' <param name="uuid">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesCab(serie As System.String, noFactura As System.String, idCliente As System.Int32, fechaFactura As System.DateTime, fechaCaptura As System.DateTime, fechaVencimiento As System.DateTime, contado As System.Boolean, credito As System.Boolean, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal,  _
contabilizado As System.String, idPoliza As System.Int32, fechaContabilizacion As System.DateTime, estatus As System.String, observaciones As System.String, fechaCancelacion As System.DateTime, idUsuarioCancela As System.Int32, idClienteCargo As System.Int32, formaDePago As System.String, metodoDePago As System.String, condicionesDePago As System.String,  _
uuid As System.String, origen As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(26) {}
			parameters(0) = New SqlParameter("@Serie", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serie)
			parameters(1) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(2) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(3) = New SqlParameter("@FechaFactura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFactura)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaVencimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVencimiento)
			parameters(6) = New SqlParameter("@Contado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contado)
			parameters(7) = New SqlParameter("@Credito", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, credito)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(11) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(12) = New SqlParameter("@IdPoliza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(13) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(14) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(17) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(18) = New SqlParameter("@IdClienteCargo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idClienteCargo)
			parameters(19) = New SqlParameter("@FormaDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, formaDePago)
			parameters(20) = New SqlParameter("@MetodoDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, metodoDePago)
			parameters(21) = New SqlParameter("@CondicionesDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, condicionesDePago)
			parameters(22) = New SqlParameter("@UUID", SqlDbType.VarChar, 36, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, uuid)
			parameters(23) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(24) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(25) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(26) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesCab]", parameters, Nothing)


			returnValue = CType(parameters(26).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="serie">Input parameter of stored procedure</param>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaFactura">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaVencimiento">Input parameter of stored procedure</param>
		''' <param name="contado">Input parameter of stored procedure</param>
		''' <param name="credito">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="idClienteCargo">Input parameter of stored procedure</param>
		''' <param name="formaDePago">Input parameter of stored procedure</param>
		''' <param name="metodoDePago">Input parameter of stored procedure</param>
		''' <param name="condicionesDePago">Input parameter of stored procedure</param>
		''' <param name="uuid">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesCab(serie As System.String, noFactura As System.String, idCliente As System.Int32, fechaFactura As System.DateTime, fechaCaptura As System.DateTime, fechaVencimiento As System.DateTime, contado As System.Boolean, credito As System.Boolean, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal,  _
contabilizado As System.String, idPoliza As System.Int32, fechaContabilizacion As System.DateTime, estatus As System.String, observaciones As System.String, fechaCancelacion As System.DateTime, idUsuarioCancela As System.Int32, idClienteCargo As System.Int32, formaDePago As System.String, metodoDePago As System.String, condicionesDePago As System.String,  _
uuid As System.String, origen As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(26 - 1) {}
			parameters(0) = New SqlParameter("@Serie", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serie)
			parameters(1) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(2) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(3) = New SqlParameter("@FechaFactura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFactura)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaVencimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVencimiento)
			parameters(6) = New SqlParameter("@Contado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contado)
			parameters(7) = New SqlParameter("@Credito", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, credito)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(11) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(12) = New SqlParameter("@IdPoliza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(13) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(14) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(17) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(18) = New SqlParameter("@IdClienteCargo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idClienteCargo)
			parameters(19) = New SqlParameter("@FormaDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, formaDePago)
			parameters(20) = New SqlParameter("@MetodoDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, metodoDePago)
			parameters(21) = New SqlParameter("@CondicionesDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, condicionesDePago)
			parameters(22) = New SqlParameter("@UUID", SqlDbType.VarChar, 36, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, uuid)
			parameters(23) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(24) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(25) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="serie">Input parameter of stored procedure</param>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaFactura">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaVencimiento">Input parameter of stored procedure</param>
		''' <param name="contado">Input parameter of stored procedure</param>
		''' <param name="credito">Input parameter of stored procedure</param>
		''' <param name="subTotal">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="total">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="idClienteCargo">Input parameter of stored procedure</param>
		''' <param name="formaDePago">Input parameter of stored procedure</param>
		''' <param name="metodoDePago">Input parameter of stored procedure</param>
		''' <param name="condicionesDePago">Input parameter of stored procedure</param>
		''' <param name="uuid">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesCab(serie As System.String, noFactura As System.String, idCliente As System.Int32, fechaFactura As System.DateTime, fechaCaptura As System.DateTime, fechaVencimiento As System.DateTime, contado As System.Boolean, credito As System.Boolean, subTotal As System.Decimal, iva As System.Decimal, total As System.Decimal,  _
contabilizado As System.String, idPoliza As System.Int32, fechaContabilizacion As System.DateTime, estatus As System.String, observaciones As System.String, fechaCancelacion As System.DateTime, idUsuarioCancela As System.Int32, idClienteCargo As System.Int32, formaDePago As System.String, metodoDePago As System.String, condicionesDePago As System.String,  _
uuid As System.String, origen As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(26) {}
			parameters(0) = New SqlParameter("@Serie", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, serie)
			parameters(1) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(2) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(3) = New SqlParameter("@FechaFactura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFactura)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaVencimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVencimiento)
			parameters(6) = New SqlParameter("@Contado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contado)
			parameters(7) = New SqlParameter("@Credito", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, credito)
			parameters(8) = New SqlParameter("@SubTotal", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, subTotal)
			parameters(9) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(10) = New SqlParameter("@Total", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, total)
			parameters(11) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(12) = New SqlParameter("@IdPoliza", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(13) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(14) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(17) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(18) = New SqlParameter("@IdClienteCargo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idClienteCargo)
			parameters(19) = New SqlParameter("@FormaDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, formaDePago)
			parameters(20) = New SqlParameter("@MetodoDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, metodoDePago)
			parameters(21) = New SqlParameter("@CondicionesDePago", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, condicionesDePago)
			parameters(22) = New SqlParameter("@UUID", SqlDbType.VarChar, 36, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, uuid)
			parameters(23) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(24) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(25) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(26) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesCab]", parameters, transactionToUse)


			returnValue = CType(parameters(26).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FacturasClientesDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFacturasClientesDetCallBack(noFactura As System.String, idCliente As System.Int32, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, importe As System.Decimal, cargoAbono As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cargoAbono">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDet(noFactura As System.String, idCliente As System.Int32, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, importe As System.Decimal, cargoAbono As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(2) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(3) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(4) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(5) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@CargoAbono", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cargoAbono)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cargoAbono">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDet(noFactura As System.String, idCliente As System.Int32, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, importe As System.Decimal, cargoAbono As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(2) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(3) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(4) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(5) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@CargoAbono", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cargoAbono)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDet]", parameters, Nothing)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cargoAbono">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDet(noFactura As System.String, idCliente As System.Int32, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, importe As System.Decimal, cargoAbono As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(2) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(3) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(4) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(5) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@CargoAbono", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cargoAbono)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cargoAbono">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDet(noFactura As System.String, idCliente As System.Int32, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, importe As System.Decimal, cargoAbono As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(2) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(3) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(4) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(5) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(6) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(7) = New SqlParameter("@CargoAbono", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cargoAbono)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDet]", parameters, transactionToUse)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FacturasClientesDetProductos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFacturasClientesDetProductosCallBack(noFactura As System.String, idFolioEtiqueta As System.String, precioxKgr As System.Decimal, importe As System.Decimal, importeIva As System.Decimal, importeDescuento As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDetProductos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="precioxKgr">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="importeIva">Input parameter of stored procedure</param>
		''' <param name="importeDescuento">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDetProductos(noFactura As System.String, idFolioEtiqueta As System.String, precioxKgr As System.Decimal, importe As System.Decimal, importeIva As System.Decimal, importeDescuento As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@PrecioxKgr", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, precioxKgr)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@ImporteIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeIva)
			parameters(5) = New SqlParameter("@ImporteDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeDescuento)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDetProductos]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDetProductos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="precioxKgr">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="importeIva">Input parameter of stored procedure</param>
		''' <param name="importeDescuento">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDetProductos(noFactura As System.String, idFolioEtiqueta As System.String, precioxKgr As System.Decimal, importe As System.Decimal, importeIva As System.Decimal, importeDescuento As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@PrecioxKgr", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, precioxKgr)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@ImporteIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeIva)
			parameters(5) = New SqlParameter("@ImporteDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeDescuento)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDetProductos]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDetProductos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="precioxKgr">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="importeIva">Input parameter of stored procedure</param>
		''' <param name="importeDescuento">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDetProductos(noFactura As System.String, idFolioEtiqueta As System.String, precioxKgr As System.Decimal, importe As System.Decimal, importeIva As System.Decimal, importeDescuento As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@PrecioxKgr", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, precioxKgr)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@ImporteIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeIva)
			parameters(5) = New SqlParameter("@ImporteDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeDescuento)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDetProductos]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FacturasClientesDetProductos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="noFactura">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="precioxKgr">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="importeIva">Input parameter of stored procedure</param>
		''' <param name="importeDescuento">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFacturasClientesDetProductos(noFactura As System.String, idFolioEtiqueta As System.String, precioxKgr As System.Decimal, importe As System.Decimal, importeIva As System.Decimal, importeDescuento As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@NoFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noFactura)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@PrecioxKgr", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, precioxKgr)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@ImporteIVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeIva)
			parameters(5) = New SqlParameter("@ImporteDescuento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeDescuento)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FacturasClientesDetProductos]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FolCan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFolCanCallBack(year As System.String, mes As System.String, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FolCan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolCan(year As System.String, mes As System.String, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolCan]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolCan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolCan(year As System.String, mes As System.String, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolCan]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If

			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolCan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolCan(year As System.String, mes As System.String, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(5 - 1) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolCan]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolCan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolCan(year As System.String, mes As System.String, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(5) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(4) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(5) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolCan]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If

			returnValue = CType(parameters(5).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FolDia' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFolDiaCallBack(year As System.String, mes As System.String, consecutivof As System.Int16, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FolDia'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="consecutivof">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolDia(year As System.String, mes As System.String, consecutivof As System.Int16, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Consecutivof", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, consecutivof)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolDia]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolDia'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="consecutivof">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolDia(year As System.String, mes As System.String, consecutivof As System.Int16, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Consecutivof", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, consecutivof)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolDia]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolDia'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="consecutivof">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolDia(year As System.String, mes As System.String, consecutivof As System.Int16, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Consecutivof", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, consecutivof)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolDia]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolDia'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="year">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="consecutivof">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolDia(year As System.String, mes As System.String, consecutivof As System.Int16, func As System.String, numOpc As System.Int32, ByRef consecutivo As System.Int16, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Year", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, year)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = New SqlParameter("@Consecutivof", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, consecutivof)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.SmallInt, 0, ParameterDirection.InputOutput, True, 5, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolDia]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int16)
			End If

			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_FolioFactura' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspFolioFacturaCallBack(ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_FolioFactura'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolioFactura(ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolioFactura]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolioFactura'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolioFactura(ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolioFactura]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolioFactura'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolioFactura(ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolioFactura]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_FolioFactura'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspFolioFactura(ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_FolioFactura]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_HistorialCambiosFecha' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspHistorialCambiosFechaCallBack(idFolioEtiqueta As System.String, fechaCorte As System.DateTime, fechaCaducidad As System.DateTime, fechaCaducidadNueva As System.DateTime, fechaEmpaqueNueva As System.DateTime, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_HistorialCambiosFecha'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidad">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidadNueva">Input parameter of stored procedure</param>
		''' <param name="fechaEmpaqueNueva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspHistorialCambiosFecha(idFolioEtiqueta As System.String, fechaCorte As System.DateTime, fechaCaducidad As System.DateTime, fechaCaducidadNueva As System.DateTime, fechaEmpaqueNueva As System.DateTime, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(1) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(2) = New SqlParameter("@FechaCaducidad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidad)
			parameters(3) = New SqlParameter("@FechaCaducidadNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidadNueva)
			parameters(4) = New SqlParameter("@FechaEmpaqueNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaEmpaqueNueva)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_HistorialCambiosFecha]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_HistorialCambiosFecha'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidad">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidadNueva">Input parameter of stored procedure</param>
		''' <param name="fechaEmpaqueNueva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspHistorialCambiosFecha(idFolioEtiqueta As System.String, fechaCorte As System.DateTime, fechaCaducidad As System.DateTime, fechaCaducidadNueva As System.DateTime, fechaEmpaqueNueva As System.DateTime, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(0) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(1) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(2) = New SqlParameter("@FechaCaducidad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidad)
			parameters(3) = New SqlParameter("@FechaCaducidadNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidadNueva)
			parameters(4) = New SqlParameter("@FechaEmpaqueNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaEmpaqueNueva)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_HistorialCambiosFecha]", parameters, Nothing)


			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_HistorialCambiosFecha'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidad">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidadNueva">Input parameter of stored procedure</param>
		''' <param name="fechaEmpaqueNueva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspHistorialCambiosFecha(idFolioEtiqueta As System.String, fechaCorte As System.DateTime, fechaCaducidad As System.DateTime, fechaCaducidadNueva As System.DateTime, fechaEmpaqueNueva As System.DateTime, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(1) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(2) = New SqlParameter("@FechaCaducidad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidad)
			parameters(3) = New SqlParameter("@FechaCaducidadNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidadNueva)
			parameters(4) = New SqlParameter("@FechaEmpaqueNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaEmpaqueNueva)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_HistorialCambiosFecha]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_HistorialCambiosFecha'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidad">Input parameter of stored procedure</param>
		''' <param name="fechaCaducidadNueva">Input parameter of stored procedure</param>
		''' <param name="fechaEmpaqueNueva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspHistorialCambiosFecha(idFolioEtiqueta As System.String, fechaCorte As System.DateTime, fechaCaducidad As System.DateTime, fechaCaducidadNueva As System.DateTime, fechaEmpaqueNueva As System.DateTime, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(0) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(1) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(2) = New SqlParameter("@FechaCaducidad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidad)
			parameters(3) = New SqlParameter("@FechaCaducidadNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaducidadNueva)
			parameters(4) = New SqlParameter("@FechaEmpaqueNueva", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaEmpaqueNueva)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_HistorialCambiosFecha]", parameters, transactionToUse)


			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'UspInt_MSCMovtosAlmacenDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspIntMscmovtosAlmacenDetCallBack(idFolioMovimiento As System.String, idCodProducto As System.Int32, idFolioLote As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'UspInt_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspIntMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, idFolioLote As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspInt_MSCMovtosAlmacenDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspInt_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspIntMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, idFolioLote As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspInt_MSCMovtosAlmacenDet]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspInt_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspIntMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, idFolioLote As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspInt_MSCMovtosAlmacenDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'UspInt_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspIntMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, idFolioLote As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[UspInt_MSCMovtosAlmacenDet]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_MCatAlmacenesIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcatAlmacenesInsCallBack(codigo As System.Int32, nombre As System.String, nombreCorto As System.String, tipoAlmacen As System.Int32, almacen As System.Int32, estatus As System.Int16, fechaAlta As System.DateTime, usuarioAlta As System.Int32, fechaBaja As System.DateTime, usuarioBaja As System.Int32, placodigo As System.String,  _
letra As System.String, ctaContable As System.Int32, tipoProducto As System.Int16, tercero As System.Boolean, idCliente As System.Int32, ByRef codigoRetorno As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_MCatAlmacenesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="almacen">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="usuarioBaja">Input parameter of stored procedure</param>
		''' <param name="placodigo">Input parameter of stored procedure</param>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="ctaContable">Input parameter of stored procedure</param>
		''' <param name="tipoProducto">Input parameter of stored procedure</param>
		''' <param name="tercero">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="codigoRetorno">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcatAlmacenesIns(codigo As System.Int32, nombre As System.String, nombreCorto As System.String, tipoAlmacen As System.Int32, almacen As System.Int32, estatus As System.Int16, fechaAlta As System.DateTime, usuarioAlta As System.Int32, fechaBaja As System.DateTime, usuarioBaja As System.Int32, placodigo As System.String,  _
letra As System.String, ctaContable As System.Int32, tipoProducto As System.Int16, tercero As System.Boolean, idCliente As System.Int32, ByRef codigoRetorno As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(17 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(4) = New SqlParameter("@Almacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacen)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(7) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@UsuarioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioBaja)
			parameters(10) = New SqlParameter("@placodigo", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placodigo)
			parameters(11) = New SqlParameter("@letra", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(12) = New SqlParameter("@CtaContable", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ctaContable)
			parameters(13) = New SqlParameter("@TipoProducto", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoProducto)
			parameters(14) = New SqlParameter("@Tercero", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tercero)
			parameters(15) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(16) = new SqlParameter("@CodigoRetorno", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigoRetorno)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_MCatAlmacenesIns]", parameters, Nothing)
			If Not parameters(16).Value Is System.DBNull.Value Then
				codigoRetorno = CType(parameters(16).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_MCatAlmacenesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="almacen">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="usuarioBaja">Input parameter of stored procedure</param>
		''' <param name="placodigo">Input parameter of stored procedure</param>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="ctaContable">Input parameter of stored procedure</param>
		''' <param name="tipoProducto">Input parameter of stored procedure</param>
		''' <param name="tercero">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="codigoRetorno">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcatAlmacenesIns(codigo As System.Int32, nombre As System.String, nombreCorto As System.String, tipoAlmacen As System.Int32, almacen As System.Int32, estatus As System.Int16, fechaAlta As System.DateTime, usuarioAlta As System.Int32, fechaBaja As System.DateTime, usuarioBaja As System.Int32, placodigo As System.String,  _
letra As System.String, ctaContable As System.Int32, tipoProducto As System.Int16, tercero As System.Boolean, idCliente As System.Int32, ByRef codigoRetorno As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(17) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(4) = New SqlParameter("@Almacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacen)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(7) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@UsuarioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioBaja)
			parameters(10) = New SqlParameter("@placodigo", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placodigo)
			parameters(11) = New SqlParameter("@letra", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(12) = New SqlParameter("@CtaContable", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ctaContable)
			parameters(13) = New SqlParameter("@TipoProducto", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoProducto)
			parameters(14) = New SqlParameter("@Tercero", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tercero)
			parameters(15) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(16) = new SqlParameter("@CodigoRetorno", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigoRetorno)
			' Return value parameter
			parameters(17) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_MCatAlmacenesIns]", parameters, Nothing)
			If Not parameters(16).Value Is System.DBNull.Value Then
				codigoRetorno = CType(parameters(16).Value, System.Int32)
			End If

			returnValue = CType(parameters(17).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_MCatAlmacenesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="almacen">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="usuarioBaja">Input parameter of stored procedure</param>
		''' <param name="placodigo">Input parameter of stored procedure</param>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="ctaContable">Input parameter of stored procedure</param>
		''' <param name="tipoProducto">Input parameter of stored procedure</param>
		''' <param name="tercero">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="codigoRetorno">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcatAlmacenesIns(codigo As System.Int32, nombre As System.String, nombreCorto As System.String, tipoAlmacen As System.Int32, almacen As System.Int32, estatus As System.Int16, fechaAlta As System.DateTime, usuarioAlta As System.Int32, fechaBaja As System.DateTime, usuarioBaja As System.Int32, placodigo As System.String,  _
letra As System.String, ctaContable As System.Int32, tipoProducto As System.Int16, tercero As System.Boolean, idCliente As System.Int32, ByRef codigoRetorno As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(17 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(4) = New SqlParameter("@Almacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacen)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(7) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@UsuarioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioBaja)
			parameters(10) = New SqlParameter("@placodigo", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placodigo)
			parameters(11) = New SqlParameter("@letra", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(12) = New SqlParameter("@CtaContable", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ctaContable)
			parameters(13) = New SqlParameter("@TipoProducto", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoProducto)
			parameters(14) = New SqlParameter("@Tercero", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tercero)
			parameters(15) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(16) = new SqlParameter("@CodigoRetorno", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigoRetorno)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_MCatAlmacenesIns]", parameters, transactionToUse)
			If Not parameters(16).Value Is System.DBNull.Value Then
				codigoRetorno = CType(parameters(16).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_MCatAlmacenesIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="nombreCorto">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="almacen">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="usuarioAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="usuarioBaja">Input parameter of stored procedure</param>
		''' <param name="placodigo">Input parameter of stored procedure</param>
		''' <param name="letra">Input parameter of stored procedure</param>
		''' <param name="ctaContable">Input parameter of stored procedure</param>
		''' <param name="tipoProducto">Input parameter of stored procedure</param>
		''' <param name="tercero">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="codigoRetorno">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcatAlmacenesIns(codigo As System.Int32, nombre As System.String, nombreCorto As System.String, tipoAlmacen As System.Int32, almacen As System.Int32, estatus As System.Int16, fechaAlta As System.DateTime, usuarioAlta As System.Int32, fechaBaja As System.DateTime, usuarioBaja As System.Int32, placodigo As System.String,  _
letra As System.String, ctaContable As System.Int32, tipoProducto As System.Int16, tercero As System.Boolean, idCliente As System.Int32, ByRef codigoRetorno As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(17) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@NombreCorto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorto)
			parameters(3) = New SqlParameter("@TipoAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(4) = New SqlParameter("@Almacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, almacen)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(7) = New SqlParameter("@UsuarioAlta", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioAlta)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@UsuarioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, usuarioBaja)
			parameters(10) = New SqlParameter("@placodigo", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placodigo)
			parameters(11) = New SqlParameter("@letra", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letra)
			parameters(12) = New SqlParameter("@CtaContable", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ctaContable)
			parameters(13) = New SqlParameter("@TipoProducto", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, tipoProducto)
			parameters(14) = New SqlParameter("@Tercero", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tercero)
			parameters(15) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(16) = new SqlParameter("@CodigoRetorno", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, codigoRetorno)
			' Return value parameter
			parameters(17) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_MCatAlmacenesIns]", parameters, transactionToUse)
			If Not parameters(16).Value Is System.DBNull.Value Then
				codigoRetorno = CType(parameters(16).Value, System.Int32)
			End If

			returnValue = CType(parameters(17).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCECatCorralesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcecatCorralesCabCallBack(nombreCorral As System.String, nomCorCorral As System.String, idTipoCorral As System.Int32, capacidad As System.Decimal, superficie As System.Decimal, observaciones As System.String, estatus As System.Int16, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idCorral As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCorral">Input parameter of stored procedure</param>
		''' <param name="nomCorCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoCorral">Input parameter of stored procedure</param>
		''' <param name="capacidad">Input parameter of stored procedure</param>
		''' <param name="superficie">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesCab(nombreCorral As System.String, nomCorCorral As System.String, idTipoCorral As System.Int32, capacidad As System.Decimal, superficie As System.Decimal, observaciones As System.String, estatus As System.Int16, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idCorral As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@NombreCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorral)
			parameters(2) = New SqlParameter("@NomCorCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCorral)
			parameters(3) = New SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			parameters(4) = New SqlParameter("@Capacidad", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, capacidad)
			parameters(5) = New SqlParameter("@Superficie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, superficie)
			parameters(6) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCorral = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCorral">Input parameter of stored procedure</param>
		''' <param name="nomCorCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoCorral">Input parameter of stored procedure</param>
		''' <param name="capacidad">Input parameter of stored procedure</param>
		''' <param name="superficie">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesCab(nombreCorral As System.String, nomCorCorral As System.String, idTipoCorral As System.Int32, capacidad As System.Decimal, superficie As System.Decimal, observaciones As System.String, estatus As System.Int16, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idCorral As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@NombreCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorral)
			parameters(2) = New SqlParameter("@NomCorCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCorral)
			parameters(3) = New SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			parameters(4) = New SqlParameter("@Capacidad", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, capacidad)
			parameters(5) = New SqlParameter("@Superficie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, superficie)
			parameters(6) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCorral = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCorral">Input parameter of stored procedure</param>
		''' <param name="nomCorCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoCorral">Input parameter of stored procedure</param>
		''' <param name="capacidad">Input parameter of stored procedure</param>
		''' <param name="superficie">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesCab(nombreCorral As System.String, nomCorCorral As System.String, idTipoCorral As System.Int32, capacidad As System.Decimal, superficie As System.Decimal, observaciones As System.String, estatus As System.Int16, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idCorral As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@NombreCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorral)
			parameters(2) = New SqlParameter("@NomCorCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCorral)
			parameters(3) = New SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			parameters(4) = New SqlParameter("@Capacidad", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, capacidad)
			parameters(5) = New SqlParameter("@Superficie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, superficie)
			parameters(6) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCorral = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCorral">Input parameter of stored procedure</param>
		''' <param name="nomCorCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoCorral">Input parameter of stored procedure</param>
		''' <param name="capacidad">Input parameter of stored procedure</param>
		''' <param name="superficie">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesCab(nombreCorral As System.String, nomCorCorral As System.String, idTipoCorral As System.Int32, capacidad As System.Decimal, superficie As System.Decimal, observaciones As System.String, estatus As System.Int16, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idCorral As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@NombreCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCorral)
			parameters(2) = New SqlParameter("@NomCorCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCorral)
			parameters(3) = New SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			parameters(4) = New SqlParameter("@Capacidad", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, capacidad)
			parameters(5) = New SqlParameter("@Superficie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, superficie)
			parameters(6) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(9) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCorral = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCECatCorralesDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcecatCorralesDetCallBack(idCorral As System.Int32, idTipoGanado As System.Int32, existCabezas As System.Decimal, existKilos As System.Decimal, costoEnt As System.Decimal, impteMedicamento As System.Decimal, impteAlimento As System.Decimal, kilosAlimento As System.Decimal, fechaUltEnt As System.DateTime, fechaUltSal As System.DateTime, fechaUltReinicio As System.DateTime,  _
saldoCostoInd As System.Decimal, estatus As System.Int16, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="existCabezas">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="costoEnt">Input parameter of stored procedure</param>
		''' <param name="impteMedicamento">Input parameter of stored procedure</param>
		''' <param name="impteAlimento">Input parameter of stored procedure</param>
		''' <param name="kilosAlimento">Input parameter of stored procedure</param>
		''' <param name="fechaUltEnt">Input parameter of stored procedure</param>
		''' <param name="fechaUltSal">Input parameter of stored procedure</param>
		''' <param name="fechaUltReinicio">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesDet(idCorral As System.Int32, idTipoGanado As System.Int32, existCabezas As System.Decimal, existKilos As System.Decimal, costoEnt As System.Decimal, impteMedicamento As System.Decimal, impteAlimento As System.Decimal, kilosAlimento As System.Decimal, fechaUltEnt As System.DateTime, fechaUltSal As System.DateTime, fechaUltReinicio As System.DateTime,  _
saldoCostoInd As System.Decimal, estatus As System.Int16, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@ExistCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existCabezas)
			parameters(3) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(4) = New SqlParameter("@CostoEnt", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoEnt)
			parameters(5) = New SqlParameter("@ImpteMedicamento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteMedicamento)
			parameters(6) = New SqlParameter("@ImpteAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteAlimento)
			parameters(7) = New SqlParameter("@KilosAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosAlimento)
			parameters(8) = New SqlParameter("@FechaUltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltEnt)
			parameters(9) = New SqlParameter("@FechaUltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltSal)
			parameters(10) = New SqlParameter("@FechaUltReinicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltReinicio)
			parameters(11) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="existCabezas">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="costoEnt">Input parameter of stored procedure</param>
		''' <param name="impteMedicamento">Input parameter of stored procedure</param>
		''' <param name="impteAlimento">Input parameter of stored procedure</param>
		''' <param name="kilosAlimento">Input parameter of stored procedure</param>
		''' <param name="fechaUltEnt">Input parameter of stored procedure</param>
		''' <param name="fechaUltSal">Input parameter of stored procedure</param>
		''' <param name="fechaUltReinicio">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesDet(idCorral As System.Int32, idTipoGanado As System.Int32, existCabezas As System.Decimal, existKilos As System.Decimal, costoEnt As System.Decimal, impteMedicamento As System.Decimal, impteAlimento As System.Decimal, kilosAlimento As System.Decimal, fechaUltEnt As System.DateTime, fechaUltSal As System.DateTime, fechaUltReinicio As System.DateTime,  _
saldoCostoInd As System.Decimal, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@ExistCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existCabezas)
			parameters(3) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(4) = New SqlParameter("@CostoEnt", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoEnt)
			parameters(5) = New SqlParameter("@ImpteMedicamento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteMedicamento)
			parameters(6) = New SqlParameter("@ImpteAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteAlimento)
			parameters(7) = New SqlParameter("@KilosAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosAlimento)
			parameters(8) = New SqlParameter("@FechaUltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltEnt)
			parameters(9) = New SqlParameter("@FechaUltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltSal)
			parameters(10) = New SqlParameter("@FechaUltReinicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltReinicio)
			parameters(11) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesDet]", parameters, Nothing)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="existCabezas">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="costoEnt">Input parameter of stored procedure</param>
		''' <param name="impteMedicamento">Input parameter of stored procedure</param>
		''' <param name="impteAlimento">Input parameter of stored procedure</param>
		''' <param name="kilosAlimento">Input parameter of stored procedure</param>
		''' <param name="fechaUltEnt">Input parameter of stored procedure</param>
		''' <param name="fechaUltSal">Input parameter of stored procedure</param>
		''' <param name="fechaUltReinicio">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesDet(idCorral As System.Int32, idTipoGanado As System.Int32, existCabezas As System.Decimal, existKilos As System.Decimal, costoEnt As System.Decimal, impteMedicamento As System.Decimal, impteAlimento As System.Decimal, kilosAlimento As System.Decimal, fechaUltEnt As System.DateTime, fechaUltSal As System.DateTime, fechaUltReinicio As System.DateTime,  _
saldoCostoInd As System.Decimal, estatus As System.Int16, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@ExistCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existCabezas)
			parameters(3) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(4) = New SqlParameter("@CostoEnt", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoEnt)
			parameters(5) = New SqlParameter("@ImpteMedicamento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteMedicamento)
			parameters(6) = New SqlParameter("@ImpteAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteAlimento)
			parameters(7) = New SqlParameter("@KilosAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosAlimento)
			parameters(8) = New SqlParameter("@FechaUltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltEnt)
			parameters(9) = New SqlParameter("@FechaUltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltSal)
			parameters(10) = New SqlParameter("@FechaUltReinicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltReinicio)
			parameters(11) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatCorralesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="existCabezas">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="costoEnt">Input parameter of stored procedure</param>
		''' <param name="impteMedicamento">Input parameter of stored procedure</param>
		''' <param name="impteAlimento">Input parameter of stored procedure</param>
		''' <param name="kilosAlimento">Input parameter of stored procedure</param>
		''' <param name="fechaUltEnt">Input parameter of stored procedure</param>
		''' <param name="fechaUltSal">Input parameter of stored procedure</param>
		''' <param name="fechaUltReinicio">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatCorralesDet(idCorral As System.Int32, idTipoGanado As System.Int32, existCabezas As System.Decimal, existKilos As System.Decimal, costoEnt As System.Decimal, impteMedicamento As System.Decimal, impteAlimento As System.Decimal, kilosAlimento As System.Decimal, fechaUltEnt As System.DateTime, fechaUltSal As System.DateTime, fechaUltReinicio As System.DateTime,  _
saldoCostoInd As System.Decimal, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(1) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(2) = New SqlParameter("@ExistCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existCabezas)
			parameters(3) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(4) = New SqlParameter("@CostoEnt", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoEnt)
			parameters(5) = New SqlParameter("@ImpteMedicamento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteMedicamento)
			parameters(6) = New SqlParameter("@ImpteAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, impteAlimento)
			parameters(7) = New SqlParameter("@KilosAlimento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosAlimento)
			parameters(8) = New SqlParameter("@FechaUltEnt", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltEnt)
			parameters(9) = New SqlParameter("@FechaUltSal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltSal)
			parameters(10) = New SqlParameter("@FechaUltReinicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltReinicio)
			parameters(11) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatCorralesDet]", parameters, transactionToUse)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCECatLotesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcecatLotesCabCallBack(idCorral As System.Int32, nombreLote As System.String, nomCorLote As System.String, fechaInicio As System.DateTime, saldoCabezas As System.Decimal, saldoKilos As System.Decimal, saldoKilosAlim As System.Decimal, saldoImpteAlim As System.Decimal, saldoImpteMed As System.Decimal, saldoImpte As System.Decimal, acumCabMuerte As System.Decimal,  _
acumKilosMuerte As System.Decimal, acumImpteMuerte As System.Decimal, acumEntCab As System.Decimal, acumEntKilos As System.Decimal, acumImpteAlim As System.Decimal, acumKilosAlim As System.Decimal, acumImpteMedic As System.Decimal, acumSalCab As System.Decimal, acumSalKilos As System.Decimal, acumEntImpte As System.Decimal, cantSemReimplante As System.Decimal,  _
gdpini As System.Decimal, gdp As System.Decimal, eca As System.Decimal, cki As System.Decimal, pesoEstimado As System.Decimal, fechaCierre As System.DateTime, observaciones As System.String, observacioneReimplante As System.String, saldoCostoInd As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLote As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCECatLotesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLote">InputOutput parameter of stored procedure</param>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="nombreLote">Input parameter of stored procedure</param>
		''' <param name="nomCorLote">Input parameter of stored procedure</param>
		''' <param name="fechaInicio">Input parameter of stored procedure</param>
		''' <param name="saldoCabezas">Input parameter of stored procedure</param>
		''' <param name="saldoKilos">Input parameter of stored procedure</param>
		''' <param name="saldoKilosAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteMed">Input parameter of stored procedure</param>
		''' <param name="saldoImpte">Input parameter of stored procedure</param>
		''' <param name="acumCabMuerte">Input parameter of stored procedure</param>
		''' <param name="acumKilosMuerte">Input parameter of stored procedure</param>
		''' <param name="acumImpteMuerte">Input parameter of stored procedure</param>
		''' <param name="acumEntCab">Input parameter of stored procedure</param>
		''' <param name="acumEntKilos">Input parameter of stored procedure</param>
		''' <param name="acumImpteAlim">Input parameter of stored procedure</param>
		''' <param name="acumKilosAlim">Input parameter of stored procedure</param>
		''' <param name="acumImpteMedic">Input parameter of stored procedure</param>
		''' <param name="acumSalCab">Input parameter of stored procedure</param>
		''' <param name="acumSalKilos">Input parameter of stored procedure</param>
		''' <param name="acumEntImpte">Input parameter of stored procedure</param>
		''' <param name="cantSemReimplante">Input parameter of stored procedure</param>
		''' <param name="gdpini">Input parameter of stored procedure</param>
		''' <param name="gdp">Input parameter of stored procedure</param>
		''' <param name="eca">Input parameter of stored procedure</param>
		''' <param name="cki">Input parameter of stored procedure</param>
		''' <param name="pesoEstimado">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="observacioneReimplante">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatLotesCab(idCorral As System.Int32, nombreLote As System.String, nomCorLote As System.String, fechaInicio As System.DateTime, saldoCabezas As System.Decimal, saldoKilos As System.Decimal, saldoKilosAlim As System.Decimal, saldoImpteAlim As System.Decimal, saldoImpteMed As System.Decimal, saldoImpte As System.Decimal, acumCabMuerte As System.Decimal,  _
acumKilosMuerte As System.Decimal, acumImpteMuerte As System.Decimal, acumEntCab As System.Decimal, acumEntKilos As System.Decimal, acumImpteAlim As System.Decimal, acumKilosAlim As System.Decimal, acumImpteMedic As System.Decimal, acumSalCab As System.Decimal, acumSalKilos As System.Decimal, acumEntImpte As System.Decimal, cantSemReimplante As System.Decimal,  _
gdpini As System.Decimal, gdp As System.Decimal, eca As System.Decimal, cki As System.Decimal, pesoEstimado As System.Decimal, fechaCierre As System.DateTime, observaciones As System.String, observacioneReimplante As System.String, saldoCostoInd As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLote As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(34 - 1) {}
			parameters(1) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(2) = New SqlParameter("@NombreLote", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreLote)
			parameters(3) = New SqlParameter("@NomCorLote", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorLote)
			parameters(4) = New SqlParameter("@FechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicio)
			parameters(5) = New SqlParameter("@SaldoCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCabezas)
			parameters(6) = New SqlParameter("@SaldoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilos)
			parameters(7) = New SqlParameter("@SaldoKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilosAlim)
			parameters(8) = New SqlParameter("@SaldoImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteAlim)
			parameters(9) = New SqlParameter("@SaldoImpteMed", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteMed)
			parameters(10) = New SqlParameter("@SaldoImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpte)
			parameters(11) = New SqlParameter("@AcumCabMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumCabMuerte)
			parameters(12) = New SqlParameter("@AcumKilosMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosMuerte)
			parameters(13) = New SqlParameter("@AcumImpteMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMuerte)
			parameters(14) = New SqlParameter("@AcumEntCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntCab)
			parameters(15) = New SqlParameter("@AcumEntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntKilos)
			parameters(16) = New SqlParameter("@AcumImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteAlim)
			parameters(17) = New SqlParameter("@AcumKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosAlim)
			parameters(18) = New SqlParameter("@AcumImpteMedic", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMedic)
			parameters(19) = New SqlParameter("@AcumSalCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalCab)
			parameters(20) = New SqlParameter("@AcumSalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalKilos)
			parameters(21) = New SqlParameter("@AcumEntImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntImpte)
			parameters(22) = New SqlParameter("@CantSemReimplante", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantSemReimplante)
			parameters(23) = New SqlParameter("@GDPIni", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdpini)
			parameters(24) = New SqlParameter("@GDP", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdp)
			parameters(25) = New SqlParameter("@ECA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, eca)
			parameters(26) = New SqlParameter("@CKI", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cki)
			parameters(27) = New SqlParameter("@PesoEstimado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, pesoEstimado)
			parameters(28) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(29) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(30) = New SqlParameter("@ObservacioneReimplante", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneReimplante)
			parameters(31) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLote", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idLote)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatLotesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLote = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatLotesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLote">InputOutput parameter of stored procedure</param>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="nombreLote">Input parameter of stored procedure</param>
		''' <param name="nomCorLote">Input parameter of stored procedure</param>
		''' <param name="fechaInicio">Input parameter of stored procedure</param>
		''' <param name="saldoCabezas">Input parameter of stored procedure</param>
		''' <param name="saldoKilos">Input parameter of stored procedure</param>
		''' <param name="saldoKilosAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteMed">Input parameter of stored procedure</param>
		''' <param name="saldoImpte">Input parameter of stored procedure</param>
		''' <param name="acumCabMuerte">Input parameter of stored procedure</param>
		''' <param name="acumKilosMuerte">Input parameter of stored procedure</param>
		''' <param name="acumImpteMuerte">Input parameter of stored procedure</param>
		''' <param name="acumEntCab">Input parameter of stored procedure</param>
		''' <param name="acumEntKilos">Input parameter of stored procedure</param>
		''' <param name="acumImpteAlim">Input parameter of stored procedure</param>
		''' <param name="acumKilosAlim">Input parameter of stored procedure</param>
		''' <param name="acumImpteMedic">Input parameter of stored procedure</param>
		''' <param name="acumSalCab">Input parameter of stored procedure</param>
		''' <param name="acumSalKilos">Input parameter of stored procedure</param>
		''' <param name="acumEntImpte">Input parameter of stored procedure</param>
		''' <param name="cantSemReimplante">Input parameter of stored procedure</param>
		''' <param name="gdpini">Input parameter of stored procedure</param>
		''' <param name="gdp">Input parameter of stored procedure</param>
		''' <param name="eca">Input parameter of stored procedure</param>
		''' <param name="cki">Input parameter of stored procedure</param>
		''' <param name="pesoEstimado">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="observacioneReimplante">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatLotesCab(idCorral As System.Int32, nombreLote As System.String, nomCorLote As System.String, fechaInicio As System.DateTime, saldoCabezas As System.Decimal, saldoKilos As System.Decimal, saldoKilosAlim As System.Decimal, saldoImpteAlim As System.Decimal, saldoImpteMed As System.Decimal, saldoImpte As System.Decimal, acumCabMuerte As System.Decimal,  _
acumKilosMuerte As System.Decimal, acumImpteMuerte As System.Decimal, acumEntCab As System.Decimal, acumEntKilos As System.Decimal, acumImpteAlim As System.Decimal, acumKilosAlim As System.Decimal, acumImpteMedic As System.Decimal, acumSalCab As System.Decimal, acumSalKilos As System.Decimal, acumEntImpte As System.Decimal, cantSemReimplante As System.Decimal,  _
gdpini As System.Decimal, gdp As System.Decimal, eca As System.Decimal, cki As System.Decimal, pesoEstimado As System.Decimal, fechaCierre As System.DateTime, observaciones As System.String, observacioneReimplante As System.String, saldoCostoInd As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLote As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(34) {}
			parameters(1) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(2) = New SqlParameter("@NombreLote", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreLote)
			parameters(3) = New SqlParameter("@NomCorLote", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorLote)
			parameters(4) = New SqlParameter("@FechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicio)
			parameters(5) = New SqlParameter("@SaldoCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCabezas)
			parameters(6) = New SqlParameter("@SaldoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilos)
			parameters(7) = New SqlParameter("@SaldoKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilosAlim)
			parameters(8) = New SqlParameter("@SaldoImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteAlim)
			parameters(9) = New SqlParameter("@SaldoImpteMed", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteMed)
			parameters(10) = New SqlParameter("@SaldoImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpte)
			parameters(11) = New SqlParameter("@AcumCabMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumCabMuerte)
			parameters(12) = New SqlParameter("@AcumKilosMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosMuerte)
			parameters(13) = New SqlParameter("@AcumImpteMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMuerte)
			parameters(14) = New SqlParameter("@AcumEntCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntCab)
			parameters(15) = New SqlParameter("@AcumEntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntKilos)
			parameters(16) = New SqlParameter("@AcumImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteAlim)
			parameters(17) = New SqlParameter("@AcumKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosAlim)
			parameters(18) = New SqlParameter("@AcumImpteMedic", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMedic)
			parameters(19) = New SqlParameter("@AcumSalCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalCab)
			parameters(20) = New SqlParameter("@AcumSalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalKilos)
			parameters(21) = New SqlParameter("@AcumEntImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntImpte)
			parameters(22) = New SqlParameter("@CantSemReimplante", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantSemReimplante)
			parameters(23) = New SqlParameter("@GDPIni", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdpini)
			parameters(24) = New SqlParameter("@GDP", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdp)
			parameters(25) = New SqlParameter("@ECA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, eca)
			parameters(26) = New SqlParameter("@CKI", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cki)
			parameters(27) = New SqlParameter("@PesoEstimado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, pesoEstimado)
			parameters(28) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(29) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(30) = New SqlParameter("@ObservacioneReimplante", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneReimplante)
			parameters(31) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLote", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idLote)
			' Return value parameter
			parameters(34) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatLotesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLote = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(34).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatLotesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLote">InputOutput parameter of stored procedure</param>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="nombreLote">Input parameter of stored procedure</param>
		''' <param name="nomCorLote">Input parameter of stored procedure</param>
		''' <param name="fechaInicio">Input parameter of stored procedure</param>
		''' <param name="saldoCabezas">Input parameter of stored procedure</param>
		''' <param name="saldoKilos">Input parameter of stored procedure</param>
		''' <param name="saldoKilosAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteMed">Input parameter of stored procedure</param>
		''' <param name="saldoImpte">Input parameter of stored procedure</param>
		''' <param name="acumCabMuerte">Input parameter of stored procedure</param>
		''' <param name="acumKilosMuerte">Input parameter of stored procedure</param>
		''' <param name="acumImpteMuerte">Input parameter of stored procedure</param>
		''' <param name="acumEntCab">Input parameter of stored procedure</param>
		''' <param name="acumEntKilos">Input parameter of stored procedure</param>
		''' <param name="acumImpteAlim">Input parameter of stored procedure</param>
		''' <param name="acumKilosAlim">Input parameter of stored procedure</param>
		''' <param name="acumImpteMedic">Input parameter of stored procedure</param>
		''' <param name="acumSalCab">Input parameter of stored procedure</param>
		''' <param name="acumSalKilos">Input parameter of stored procedure</param>
		''' <param name="acumEntImpte">Input parameter of stored procedure</param>
		''' <param name="cantSemReimplante">Input parameter of stored procedure</param>
		''' <param name="gdpini">Input parameter of stored procedure</param>
		''' <param name="gdp">Input parameter of stored procedure</param>
		''' <param name="eca">Input parameter of stored procedure</param>
		''' <param name="cki">Input parameter of stored procedure</param>
		''' <param name="pesoEstimado">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="observacioneReimplante">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatLotesCab(idCorral As System.Int32, nombreLote As System.String, nomCorLote As System.String, fechaInicio As System.DateTime, saldoCabezas As System.Decimal, saldoKilos As System.Decimal, saldoKilosAlim As System.Decimal, saldoImpteAlim As System.Decimal, saldoImpteMed As System.Decimal, saldoImpte As System.Decimal, acumCabMuerte As System.Decimal,  _
acumKilosMuerte As System.Decimal, acumImpteMuerte As System.Decimal, acumEntCab As System.Decimal, acumEntKilos As System.Decimal, acumImpteAlim As System.Decimal, acumKilosAlim As System.Decimal, acumImpteMedic As System.Decimal, acumSalCab As System.Decimal, acumSalKilos As System.Decimal, acumEntImpte As System.Decimal, cantSemReimplante As System.Decimal,  _
gdpini As System.Decimal, gdp As System.Decimal, eca As System.Decimal, cki As System.Decimal, pesoEstimado As System.Decimal, fechaCierre As System.DateTime, observaciones As System.String, observacioneReimplante As System.String, saldoCostoInd As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLote As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(34 - 1) {}
			parameters(1) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(2) = New SqlParameter("@NombreLote", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreLote)
			parameters(3) = New SqlParameter("@NomCorLote", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorLote)
			parameters(4) = New SqlParameter("@FechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicio)
			parameters(5) = New SqlParameter("@SaldoCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCabezas)
			parameters(6) = New SqlParameter("@SaldoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilos)
			parameters(7) = New SqlParameter("@SaldoKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilosAlim)
			parameters(8) = New SqlParameter("@SaldoImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteAlim)
			parameters(9) = New SqlParameter("@SaldoImpteMed", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteMed)
			parameters(10) = New SqlParameter("@SaldoImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpte)
			parameters(11) = New SqlParameter("@AcumCabMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumCabMuerte)
			parameters(12) = New SqlParameter("@AcumKilosMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosMuerte)
			parameters(13) = New SqlParameter("@AcumImpteMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMuerte)
			parameters(14) = New SqlParameter("@AcumEntCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntCab)
			parameters(15) = New SqlParameter("@AcumEntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntKilos)
			parameters(16) = New SqlParameter("@AcumImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteAlim)
			parameters(17) = New SqlParameter("@AcumKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosAlim)
			parameters(18) = New SqlParameter("@AcumImpteMedic", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMedic)
			parameters(19) = New SqlParameter("@AcumSalCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalCab)
			parameters(20) = New SqlParameter("@AcumSalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalKilos)
			parameters(21) = New SqlParameter("@AcumEntImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntImpte)
			parameters(22) = New SqlParameter("@CantSemReimplante", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantSemReimplante)
			parameters(23) = New SqlParameter("@GDPIni", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdpini)
			parameters(24) = New SqlParameter("@GDP", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdp)
			parameters(25) = New SqlParameter("@ECA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, eca)
			parameters(26) = New SqlParameter("@CKI", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cki)
			parameters(27) = New SqlParameter("@PesoEstimado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, pesoEstimado)
			parameters(28) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(29) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(30) = New SqlParameter("@ObservacioneReimplante", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneReimplante)
			parameters(31) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLote", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idLote)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatLotesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLote = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatLotesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLote">InputOutput parameter of stored procedure</param>
		''' <param name="idCorral">Input parameter of stored procedure</param>
		''' <param name="nombreLote">Input parameter of stored procedure</param>
		''' <param name="nomCorLote">Input parameter of stored procedure</param>
		''' <param name="fechaInicio">Input parameter of stored procedure</param>
		''' <param name="saldoCabezas">Input parameter of stored procedure</param>
		''' <param name="saldoKilos">Input parameter of stored procedure</param>
		''' <param name="saldoKilosAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteAlim">Input parameter of stored procedure</param>
		''' <param name="saldoImpteMed">Input parameter of stored procedure</param>
		''' <param name="saldoImpte">Input parameter of stored procedure</param>
		''' <param name="acumCabMuerte">Input parameter of stored procedure</param>
		''' <param name="acumKilosMuerte">Input parameter of stored procedure</param>
		''' <param name="acumImpteMuerte">Input parameter of stored procedure</param>
		''' <param name="acumEntCab">Input parameter of stored procedure</param>
		''' <param name="acumEntKilos">Input parameter of stored procedure</param>
		''' <param name="acumImpteAlim">Input parameter of stored procedure</param>
		''' <param name="acumKilosAlim">Input parameter of stored procedure</param>
		''' <param name="acumImpteMedic">Input parameter of stored procedure</param>
		''' <param name="acumSalCab">Input parameter of stored procedure</param>
		''' <param name="acumSalKilos">Input parameter of stored procedure</param>
		''' <param name="acumEntImpte">Input parameter of stored procedure</param>
		''' <param name="cantSemReimplante">Input parameter of stored procedure</param>
		''' <param name="gdpini">Input parameter of stored procedure</param>
		''' <param name="gdp">Input parameter of stored procedure</param>
		''' <param name="eca">Input parameter of stored procedure</param>
		''' <param name="cki">Input parameter of stored procedure</param>
		''' <param name="pesoEstimado">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="observacioneReimplante">Input parameter of stored procedure</param>
		''' <param name="saldoCostoInd">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatLotesCab(idCorral As System.Int32, nombreLote As System.String, nomCorLote As System.String, fechaInicio As System.DateTime, saldoCabezas As System.Decimal, saldoKilos As System.Decimal, saldoKilosAlim As System.Decimal, saldoImpteAlim As System.Decimal, saldoImpteMed As System.Decimal, saldoImpte As System.Decimal, acumCabMuerte As System.Decimal,  _
acumKilosMuerte As System.Decimal, acumImpteMuerte As System.Decimal, acumEntCab As System.Decimal, acumEntKilos As System.Decimal, acumImpteAlim As System.Decimal, acumKilosAlim As System.Decimal, acumImpteMedic As System.Decimal, acumSalCab As System.Decimal, acumSalKilos As System.Decimal, acumEntImpte As System.Decimal, cantSemReimplante As System.Decimal,  _
gdpini As System.Decimal, gdp As System.Decimal, eca As System.Decimal, cki As System.Decimal, pesoEstimado As System.Decimal, fechaCierre As System.DateTime, observaciones As System.String, observacioneReimplante As System.String, saldoCostoInd As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLote As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(34) {}
			parameters(1) = New SqlParameter("@IdCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorral)
			parameters(2) = New SqlParameter("@NombreLote", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreLote)
			parameters(3) = New SqlParameter("@NomCorLote", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorLote)
			parameters(4) = New SqlParameter("@FechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicio)
			parameters(5) = New SqlParameter("@SaldoCabezas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCabezas)
			parameters(6) = New SqlParameter("@SaldoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilos)
			parameters(7) = New SqlParameter("@SaldoKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoKilosAlim)
			parameters(8) = New SqlParameter("@SaldoImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteAlim)
			parameters(9) = New SqlParameter("@SaldoImpteMed", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpteMed)
			parameters(10) = New SqlParameter("@SaldoImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoImpte)
			parameters(11) = New SqlParameter("@AcumCabMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumCabMuerte)
			parameters(12) = New SqlParameter("@AcumKilosMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosMuerte)
			parameters(13) = New SqlParameter("@AcumImpteMuerte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMuerte)
			parameters(14) = New SqlParameter("@AcumEntCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntCab)
			parameters(15) = New SqlParameter("@AcumEntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntKilos)
			parameters(16) = New SqlParameter("@AcumImpteAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteAlim)
			parameters(17) = New SqlParameter("@AcumKilosAlim", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumKilosAlim)
			parameters(18) = New SqlParameter("@AcumImpteMedic", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumImpteMedic)
			parameters(19) = New SqlParameter("@AcumSalCab", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalCab)
			parameters(20) = New SqlParameter("@AcumSalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumSalKilos)
			parameters(21) = New SqlParameter("@AcumEntImpte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumEntImpte)
			parameters(22) = New SqlParameter("@CantSemReimplante", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantSemReimplante)
			parameters(23) = New SqlParameter("@GDPIni", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdpini)
			parameters(24) = New SqlParameter("@GDP", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, gdp)
			parameters(25) = New SqlParameter("@ECA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, eca)
			parameters(26) = New SqlParameter("@CKI", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cki)
			parameters(27) = New SqlParameter("@PesoEstimado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, pesoEstimado)
			parameters(28) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(29) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(30) = New SqlParameter("@ObservacioneReimplante", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneReimplante)
			parameters(31) = New SqlParameter("@SaldoCostoInd", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, saldoCostoInd)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLote", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idLote)
			' Return value parameter
			parameters(34) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatLotesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLote = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(34).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCECatTiposCorral' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcecatTiposCorralCallBack(descTipoCorral As System.String, descCorTipoCorral As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoCorral As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCECatTiposCorral'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoCorral">InputOutput parameter of stored procedure</param>
		''' <param name="descTipoCorral">Input parameter of stored procedure</param>
		''' <param name="descCorTipoCorral">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatTiposCorral(descTipoCorral As System.String, descCorTipoCorral As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoCorral As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@DescTipoCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descTipoCorral)
			parameters(2) = New SqlParameter("@DescCorTipoCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorTipoCorral)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatTiposCorral]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoCorral = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatTiposCorral'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoCorral">InputOutput parameter of stored procedure</param>
		''' <param name="descTipoCorral">Input parameter of stored procedure</param>
		''' <param name="descCorTipoCorral">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatTiposCorral(descTipoCorral As System.String, descCorTipoCorral As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoCorral As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@DescTipoCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descTipoCorral)
			parameters(2) = New SqlParameter("@DescCorTipoCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorTipoCorral)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatTiposCorral]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoCorral = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatTiposCorral'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoCorral">InputOutput parameter of stored procedure</param>
		''' <param name="descTipoCorral">Input parameter of stored procedure</param>
		''' <param name="descCorTipoCorral">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatTiposCorral(descTipoCorral As System.String, descCorTipoCorral As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoCorral As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@DescTipoCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descTipoCorral)
			parameters(2) = New SqlParameter("@DescCorTipoCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorTipoCorral)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatTiposCorral]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoCorral = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCECatTiposCorral'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoCorral">InputOutput parameter of stored procedure</param>
		''' <param name="descTipoCorral">Input parameter of stored procedure</param>
		''' <param name="descCorTipoCorral">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcecatTiposCorral(descTipoCorral As System.String, descCorTipoCorral As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoCorral As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@DescTipoCorral", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descTipoCorral)
			parameters(2) = New SqlParameter("@DescCorTipoCorral", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorTipoCorral)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoCorral", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoCorral)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCECatTiposCorral]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoCorral = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatCausasMuerte' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatCausasMuerteCallBack(nombreCausaMuerte As System.String, nomCorCausaMuerte As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCausaMuerte As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCausasMuerte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCausaMuerte">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="nomCorCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCausasMuerte(nombreCausaMuerte As System.String, nomCorCausaMuerte As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCausaMuerte As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreCausaMuerte", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCausaMuerte)
			parameters(2) = New SqlParameter("@NomCorCausaMuerte", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCausaMuerte)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCausaMuerte", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCausaMuerte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCausasMuerte]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCausaMuerte = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCausasMuerte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCausaMuerte">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="nomCorCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCausasMuerte(nombreCausaMuerte As System.String, nomCorCausaMuerte As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCausaMuerte As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreCausaMuerte", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCausaMuerte)
			parameters(2) = New SqlParameter("@NomCorCausaMuerte", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCausaMuerte)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCausaMuerte", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCausaMuerte)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCausasMuerte]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCausaMuerte = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCausasMuerte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCausaMuerte">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="nomCorCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCausasMuerte(nombreCausaMuerte As System.String, nomCorCausaMuerte As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCausaMuerte As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreCausaMuerte", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCausaMuerte)
			parameters(2) = New SqlParameter("@NomCorCausaMuerte", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCausaMuerte)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCausaMuerte", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCausaMuerte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCausasMuerte]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCausaMuerte = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCausasMuerte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCausaMuerte">InputOutput parameter of stored procedure</param>
		''' <param name="nombreCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="nomCorCausaMuerte">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCausasMuerte(nombreCausaMuerte As System.String, nomCorCausaMuerte As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCausaMuerte As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreCausaMuerte", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreCausaMuerte)
			parameters(2) = New SqlParameter("@NomCorCausaMuerte", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorCausaMuerte)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCausaMuerte", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCausaMuerte)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCausasMuerte]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCausaMuerte = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatChoferes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatChoferesCallBack(nombreChofer As System.String, apPatChofer As System.String, apMatChofer As System.String, nomCorChofer As System.String, domicilio As System.String, colonia As System.String, idPoblacion As System.Int32, idCiudad As System.Int32, idEstado As System.Int32, telefono As System.String, telefonoCel As System.String,  _
noLicencia As System.String, tipoLicencia As System.String, fechaVenceLicencia As System.DateTime, tipoSangre As System.String, observaciones As System.String, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef idChofer As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nombreChofer">Input parameter of stored procedure</param>
		''' <param name="apPatChofer">Input parameter of stored procedure</param>
		''' <param name="apMatChofer">Input parameter of stored procedure</param>
		''' <param name="nomCorChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="telefonoCel">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoLicencia">Input parameter of stored procedure</param>
		''' <param name="fechaVenceLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatChoferes(nombreChofer As System.String, apPatChofer As System.String, apMatChofer As System.String, nomCorChofer As System.String, domicilio As System.String, colonia As System.String, idPoblacion As System.Int32, idCiudad As System.Int32, idEstado As System.Int32, telefono As System.String, telefonoCel As System.String,  _
noLicencia As System.String, tipoLicencia As System.String, fechaVenceLicencia As System.DateTime, tipoSangre As System.String, observaciones As System.String, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef idChofer As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(23 - 1) {}
			parameters(1) = New SqlParameter("@NombreChofer", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreChofer)
			parameters(2) = New SqlParameter("@ApPatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatChofer)
			parameters(3) = New SqlParameter("@ApMatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatChofer)
			parameters(4) = New SqlParameter("@NomCorChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorChofer)
			parameters(5) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(8) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(9) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(10) = New SqlParameter("@Telefono", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(11) = New SqlParameter("@TelefonoCel", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefonoCel)
			parameters(12) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(13) = New SqlParameter("@TipoLicencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoLicencia)
			parameters(14) = New SqlParameter("@FechaVenceLicencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVenceLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(17) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(18) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(19) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(20) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(21) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(22) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdChofer", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idChofer)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatChoferes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idChofer = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nombreChofer">Input parameter of stored procedure</param>
		''' <param name="apPatChofer">Input parameter of stored procedure</param>
		''' <param name="apMatChofer">Input parameter of stored procedure</param>
		''' <param name="nomCorChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="telefonoCel">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoLicencia">Input parameter of stored procedure</param>
		''' <param name="fechaVenceLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatChoferes(nombreChofer As System.String, apPatChofer As System.String, apMatChofer As System.String, nomCorChofer As System.String, domicilio As System.String, colonia As System.String, idPoblacion As System.Int32, idCiudad As System.Int32, idEstado As System.Int32, telefono As System.String, telefonoCel As System.String,  _
noLicencia As System.String, tipoLicencia As System.String, fechaVenceLicencia As System.DateTime, tipoSangre As System.String, observaciones As System.String, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef idChofer As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(23) {}
			parameters(1) = New SqlParameter("@NombreChofer", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreChofer)
			parameters(2) = New SqlParameter("@ApPatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatChofer)
			parameters(3) = New SqlParameter("@ApMatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatChofer)
			parameters(4) = New SqlParameter("@NomCorChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorChofer)
			parameters(5) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(8) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(9) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(10) = New SqlParameter("@Telefono", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(11) = New SqlParameter("@TelefonoCel", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefonoCel)
			parameters(12) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(13) = New SqlParameter("@TipoLicencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoLicencia)
			parameters(14) = New SqlParameter("@FechaVenceLicencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVenceLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(17) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(18) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(19) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(20) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(21) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(22) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdChofer", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idChofer)
			' Return value parameter
			parameters(23) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatChoferes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idChofer = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(23).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nombreChofer">Input parameter of stored procedure</param>
		''' <param name="apPatChofer">Input parameter of stored procedure</param>
		''' <param name="apMatChofer">Input parameter of stored procedure</param>
		''' <param name="nomCorChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="telefonoCel">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoLicencia">Input parameter of stored procedure</param>
		''' <param name="fechaVenceLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatChoferes(nombreChofer As System.String, apPatChofer As System.String, apMatChofer As System.String, nomCorChofer As System.String, domicilio As System.String, colonia As System.String, idPoblacion As System.Int32, idCiudad As System.Int32, idEstado As System.Int32, telefono As System.String, telefonoCel As System.String,  _
noLicencia As System.String, tipoLicencia As System.String, fechaVenceLicencia As System.DateTime, tipoSangre As System.String, observaciones As System.String, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef idChofer As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(23 - 1) {}
			parameters(1) = New SqlParameter("@NombreChofer", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreChofer)
			parameters(2) = New SqlParameter("@ApPatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatChofer)
			parameters(3) = New SqlParameter("@ApMatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatChofer)
			parameters(4) = New SqlParameter("@NomCorChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorChofer)
			parameters(5) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(8) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(9) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(10) = New SqlParameter("@Telefono", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(11) = New SqlParameter("@TelefonoCel", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefonoCel)
			parameters(12) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(13) = New SqlParameter("@TipoLicencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoLicencia)
			parameters(14) = New SqlParameter("@FechaVenceLicencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVenceLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(17) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(18) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(19) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(20) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(21) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(22) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdChofer", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idChofer)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatChoferes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idChofer = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatChoferes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idChofer">InputOutput parameter of stored procedure</param>
		''' <param name="nombreChofer">Input parameter of stored procedure</param>
		''' <param name="apPatChofer">Input parameter of stored procedure</param>
		''' <param name="apMatChofer">Input parameter of stored procedure</param>
		''' <param name="nomCorChofer">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="telefonoCel">Input parameter of stored procedure</param>
		''' <param name="noLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoLicencia">Input parameter of stored procedure</param>
		''' <param name="fechaVenceLicencia">Input parameter of stored procedure</param>
		''' <param name="tipoSangre">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatChoferes(nombreChofer As System.String, apPatChofer As System.String, apMatChofer As System.String, nomCorChofer As System.String, domicilio As System.String, colonia As System.String, idPoblacion As System.Int32, idCiudad As System.Int32, idEstado As System.Int32, telefono As System.String, telefonoCel As System.String,  _
noLicencia As System.String, tipoLicencia As System.String, fechaVenceLicencia As System.DateTime, tipoSangre As System.String, observaciones As System.String, fechaBaja As System.DateTime, motivoBaja As System.String, quiendioBaja As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef idChofer As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(23) {}
			parameters(1) = New SqlParameter("@NombreChofer", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreChofer)
			parameters(2) = New SqlParameter("@ApPatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatChofer)
			parameters(3) = New SqlParameter("@ApMatChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatChofer)
			parameters(4) = New SqlParameter("@NomCorChofer", SqlDbType.VarChar, 70, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorChofer)
			parameters(5) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 200, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(8) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(9) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(10) = New SqlParameter("@Telefono", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(11) = New SqlParameter("@TelefonoCel", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefonoCel)
			parameters(12) = New SqlParameter("@NoLicencia", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noLicencia)
			parameters(13) = New SqlParameter("@TipoLicencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoLicencia)
			parameters(14) = New SqlParameter("@FechaVenceLicencia", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaVenceLicencia)
			parameters(15) = New SqlParameter("@TipoSangre", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoSangre)
			parameters(16) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(17) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(18) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(19) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(20) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(21) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(22) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdChofer", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idChofer)
			' Return value parameter
			parameters(23) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatChoferes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idChofer = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(23).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatCompradoresdeGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatCompradoresdeGanadoCallBack(nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, rfc As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, comisionxCabeza As System.Decimal,  _
ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.String, fechaAlta As System.DateTime, fechaBaja As System.DateTime, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="comisionxCabeza">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresdeGanado(nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, rfc As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, comisionxCabeza As System.Decimal,  _
ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.String, fechaAlta As System.DateTime, fechaBaja As System.DateTime, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(21 - 1) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(3) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(4) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(5) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(8) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(9) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(10) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(11) = New SqlParameter("@ComisionxCabeza", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comisionxCabeza)
			parameters(12) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(13) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(14) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(15) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(18) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(19) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(20) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresdeGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="comisionxCabeza">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresdeGanado(nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, rfc As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, comisionxCabeza As System.Decimal,  _
ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.String, fechaAlta As System.DateTime, fechaBaja As System.DateTime, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(21) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(3) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(4) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(5) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(8) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(9) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(10) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(11) = New SqlParameter("@ComisionxCabeza", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comisionxCabeza)
			parameters(12) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(13) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(14) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(15) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(18) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(19) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(20) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Return value parameter
			parameters(21) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresdeGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(21).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="comisionxCabeza">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresdeGanado(nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, rfc As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, comisionxCabeza As System.Decimal,  _
ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.String, fechaAlta As System.DateTime, fechaBaja As System.DateTime, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(21 - 1) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(3) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(4) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(5) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(8) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(9) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(10) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(11) = New SqlParameter("@ComisionxCabeza", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comisionxCabeza)
			parameters(12) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(13) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(14) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(15) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(18) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(19) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(20) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresdeGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombre">Input parameter of stored procedure</param>
		''' <param name="apellidoPaterno">Input parameter of stored procedure</param>
		''' <param name="apellidoMaterno">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="calleyNumero">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="estado">Input parameter of stored procedure</param>
		''' <param name="ciudad">Input parameter of stored procedure</param>
		''' <param name="poblacion">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="comisionxCabeza">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaAlta">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresdeGanado(nombre As System.String, apellidoPaterno As System.String, apellidoMaterno As System.String, rfc As System.String, calleyNumero As System.String, colonia As System.String, estado As System.Int32, ciudad As System.Int32, poblacion As System.Int32, pagarComision As System.Boolean, comisionxCabeza As System.Decimal,  _
ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, estatus As System.String, fechaAlta As System.DateTime, fechaBaja As System.DateTime, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(21) {}
			parameters(1) = New SqlParameter("@Nombre", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombre)
			parameters(2) = New SqlParameter("@ApellidoPaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoPaterno)
			parameters(3) = New SqlParameter("@ApellidoMaterno", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apellidoMaterno)
			parameters(4) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(5) = New SqlParameter("@CalleyNumero", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, calleyNumero)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Estado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, estado)
			parameters(8) = New SqlParameter("@Ciudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, ciudad)
			parameters(9) = New SqlParameter("@Poblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, poblacion)
			parameters(10) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(11) = New SqlParameter("@ComisionxCabeza", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, comisionxCabeza)
			parameters(12) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(13) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(14) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(15) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@FechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaAlta)
			parameters(18) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(19) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(20) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Return value parameter
			parameters(21) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresdeGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(21).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatCompradoresGan' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatCompradoresGanCallBack(nombreComprador As System.String, apPatComprador As System.String, apMatComprador As System.String, nomCorComprador As System.String, rfc As System.String, domicilio As System.String, colonia As System.String, idEntidad As System.Int32, pagarComision As System.Boolean, porcentajeComision As System.Decimal, ctaMay As System.String,  _
subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombreComprador">Input parameter of stored procedure</param>
		''' <param name="apPatComprador">Input parameter of stored procedure</param>
		''' <param name="apMatComprador">Input parameter of stored procedure</param>
		''' <param name="nomCorComprador">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idEntidad">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="porcentajeComision">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresGan(nombreComprador As System.String, apPatComprador As System.String, apMatComprador As System.String, nomCorComprador As System.String, rfc As System.String, domicilio As System.String, colonia As System.String, idEntidad As System.Int32, pagarComision As System.Boolean, porcentajeComision As System.Decimal, ctaMay As System.String,  _
subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(19 - 1) {}
			parameters(1) = New SqlParameter("@NombreComprador", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreComprador)
			parameters(2) = New SqlParameter("@ApPatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatComprador)
			parameters(3) = New SqlParameter("@ApMatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatComprador)
			parameters(4) = New SqlParameter("@NomCorComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorComprador)
			parameters(5) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(6) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(7) = New SqlParameter("@Colonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(8) = New SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			parameters(9) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(10) = New SqlParameter("@PorcentajeComision", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeComision)
			parameters(11) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(12) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(13) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(14) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(18) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresGan]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombreComprador">Input parameter of stored procedure</param>
		''' <param name="apPatComprador">Input parameter of stored procedure</param>
		''' <param name="apMatComprador">Input parameter of stored procedure</param>
		''' <param name="nomCorComprador">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idEntidad">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="porcentajeComision">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresGan(nombreComprador As System.String, apPatComprador As System.String, apMatComprador As System.String, nomCorComprador As System.String, rfc As System.String, domicilio As System.String, colonia As System.String, idEntidad As System.Int32, pagarComision As System.Boolean, porcentajeComision As System.Decimal, ctaMay As System.String,  _
subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(19) {}
			parameters(1) = New SqlParameter("@NombreComprador", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreComprador)
			parameters(2) = New SqlParameter("@ApPatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatComprador)
			parameters(3) = New SqlParameter("@ApMatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatComprador)
			parameters(4) = New SqlParameter("@NomCorComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorComprador)
			parameters(5) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(6) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(7) = New SqlParameter("@Colonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(8) = New SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			parameters(9) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(10) = New SqlParameter("@PorcentajeComision", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeComision)
			parameters(11) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(12) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(13) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(14) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(18) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Return value parameter
			parameters(19) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresGan]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(19).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombreComprador">Input parameter of stored procedure</param>
		''' <param name="apPatComprador">Input parameter of stored procedure</param>
		''' <param name="apMatComprador">Input parameter of stored procedure</param>
		''' <param name="nomCorComprador">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idEntidad">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="porcentajeComision">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresGan(nombreComprador As System.String, apPatComprador As System.String, apMatComprador As System.String, nomCorComprador As System.String, rfc As System.String, domicilio As System.String, colonia As System.String, idEntidad As System.Int32, pagarComision As System.Boolean, porcentajeComision As System.Decimal, ctaMay As System.String,  _
subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(19 - 1) {}
			parameters(1) = New SqlParameter("@NombreComprador", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreComprador)
			parameters(2) = New SqlParameter("@ApPatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatComprador)
			parameters(3) = New SqlParameter("@ApMatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatComprador)
			parameters(4) = New SqlParameter("@NomCorComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorComprador)
			parameters(5) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(6) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(7) = New SqlParameter("@Colonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(8) = New SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			parameters(9) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(10) = New SqlParameter("@PorcentajeComision", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeComision)
			parameters(11) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(12) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(13) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(14) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(18) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresGan]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatCompradoresGan'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idComprador">InputOutput parameter of stored procedure</param>
		''' <param name="nombreComprador">Input parameter of stored procedure</param>
		''' <param name="apPatComprador">Input parameter of stored procedure</param>
		''' <param name="apMatComprador">Input parameter of stored procedure</param>
		''' <param name="nomCorComprador">Input parameter of stored procedure</param>
		''' <param name="rfc">Input parameter of stored procedure</param>
		''' <param name="domicilio">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="idEntidad">Input parameter of stored procedure</param>
		''' <param name="pagarComision">Input parameter of stored procedure</param>
		''' <param name="porcentajeComision">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatCompradoresGan(nombreComprador As System.String, apPatComprador As System.String, apMatComprador As System.String, nomCorComprador As System.String, rfc As System.String, domicilio As System.String, colonia As System.String, idEntidad As System.Int32, pagarComision As System.Boolean, porcentajeComision As System.Decimal, ctaMay As System.String,  _
subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idComprador As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(19) {}
			parameters(1) = New SqlParameter("@NombreComprador", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreComprador)
			parameters(2) = New SqlParameter("@ApPatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apPatComprador)
			parameters(3) = New SqlParameter("@ApMatComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, apMatComprador)
			parameters(4) = New SqlParameter("@NomCorComprador", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorComprador)
			parameters(5) = New SqlParameter("@RFC", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, rfc)
			parameters(6) = New SqlParameter("@Domicilio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, domicilio)
			parameters(7) = New SqlParameter("@Colonia", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(8) = New SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			parameters(9) = New SqlParameter("@PagarComision", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, pagarComision)
			parameters(10) = New SqlParameter("@PorcentajeComision", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeComision)
			parameters(11) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(12) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(13) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(14) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(15) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(16) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(17) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(18) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdComprador", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idComprador)
			' Return value parameter
			parameters(19) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatCompradoresGan]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idComprador = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(19).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatConcepGastos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatConcepGastosCallBack(nombreConcepto As System.String, nomCorConcepto As System.String, aplicaIva As System.Boolean, porcentajeIva As System.Decimal, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idConceptoGasto As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatConcepGastos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idConceptoGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nombreConcepto">Input parameter of stored procedure</param>
		''' <param name="nomCorConcepto">Input parameter of stored procedure</param>
		''' <param name="aplicaIva">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatConcepGastos(nombreConcepto As System.String, nomCorConcepto As System.String, aplicaIva As System.Boolean, porcentajeIva As System.Decimal, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idConceptoGasto As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@NombreConcepto", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreConcepto)
			parameters(2) = New SqlParameter("@NomCorConcepto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorConcepto)
			parameters(3) = New SqlParameter("@AplicaIva", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, aplicaIva)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdConceptoGasto", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idConceptoGasto)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatConcepGastos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idConceptoGasto = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatConcepGastos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idConceptoGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nombreConcepto">Input parameter of stored procedure</param>
		''' <param name="nomCorConcepto">Input parameter of stored procedure</param>
		''' <param name="aplicaIva">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatConcepGastos(nombreConcepto As System.String, nomCorConcepto As System.String, aplicaIva As System.Boolean, porcentajeIva As System.Decimal, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idConceptoGasto As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@NombreConcepto", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreConcepto)
			parameters(2) = New SqlParameter("@NomCorConcepto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorConcepto)
			parameters(3) = New SqlParameter("@AplicaIva", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, aplicaIva)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdConceptoGasto", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idConceptoGasto)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatConcepGastos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idConceptoGasto = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatConcepGastos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idConceptoGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nombreConcepto">Input parameter of stored procedure</param>
		''' <param name="nomCorConcepto">Input parameter of stored procedure</param>
		''' <param name="aplicaIva">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatConcepGastos(nombreConcepto As System.String, nomCorConcepto As System.String, aplicaIva As System.Boolean, porcentajeIva As System.Decimal, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idConceptoGasto As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@NombreConcepto", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreConcepto)
			parameters(2) = New SqlParameter("@NomCorConcepto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorConcepto)
			parameters(3) = New SqlParameter("@AplicaIva", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, aplicaIva)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdConceptoGasto", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idConceptoGasto)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatConcepGastos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idConceptoGasto = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatConcepGastos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idConceptoGasto">InputOutput parameter of stored procedure</param>
		''' <param name="nombreConcepto">Input parameter of stored procedure</param>
		''' <param name="nomCorConcepto">Input parameter of stored procedure</param>
		''' <param name="aplicaIva">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatConcepGastos(nombreConcepto As System.String, nomCorConcepto As System.String, aplicaIva As System.Boolean, porcentajeIva As System.Decimal, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idConceptoGasto As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@NombreConcepto", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreConcepto)
			parameters(2) = New SqlParameter("@NomCorConcepto", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorConcepto)
			parameters(3) = New SqlParameter("@AplicaIva", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, aplicaIva)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdConceptoGasto", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idConceptoGasto)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatConcepGastos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idConceptoGasto = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatMovGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatMovGanadoCallBack(nombreMovGanado As System.String, nomCorMovGanado As System.String, observaciones As System.String, salida As System.Boolean, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMovGanado As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatMovGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMovGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMovGanado">Input parameter of stored procedure</param>
		''' <param name="nomCorMovGanado">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="salida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatMovGanado(nombreMovGanado As System.String, nomCorMovGanado As System.String, observaciones As System.String, salida As System.Boolean, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMovGanado As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(1) = New SqlParameter("@NombreMovGanado", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMovGanado)
			parameters(2) = New SqlParameter("@NomCorMovGanado", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMovGanado)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Salida", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, salida)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMovGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMovGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatMovGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMovGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatMovGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMovGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMovGanado">Input parameter of stored procedure</param>
		''' <param name="nomCorMovGanado">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="salida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatMovGanado(nombreMovGanado As System.String, nomCorMovGanado As System.String, observaciones As System.String, salida As System.Boolean, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMovGanado As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(1) = New SqlParameter("@NombreMovGanado", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMovGanado)
			parameters(2) = New SqlParameter("@NomCorMovGanado", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMovGanado)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Salida", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, salida)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMovGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMovGanado)
			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatMovGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMovGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatMovGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMovGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMovGanado">Input parameter of stored procedure</param>
		''' <param name="nomCorMovGanado">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="salida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatMovGanado(nombreMovGanado As System.String, nomCorMovGanado As System.String, observaciones As System.String, salida As System.Boolean, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMovGanado As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(1) = New SqlParameter("@NombreMovGanado", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMovGanado)
			parameters(2) = New SqlParameter("@NomCorMovGanado", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMovGanado)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Salida", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, salida)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMovGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMovGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatMovGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMovGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatMovGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMovGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMovGanado">Input parameter of stored procedure</param>
		''' <param name="nomCorMovGanado">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="salida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatMovGanado(nombreMovGanado As System.String, nomCorMovGanado As System.String, observaciones As System.String, salida As System.Boolean, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMovGanado As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(1) = New SqlParameter("@NombreMovGanado", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMovGanado)
			parameters(2) = New SqlParameter("@NomCorMovGanado", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMovGanado)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Salida", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, salida)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMovGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMovGanado)
			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatMovGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMovGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatTiposdeGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatTiposdeGanadoCallBack(descripcion As System.String, descCorta As System.String, observaciones As System.String, acumuladoCabezas As System.Int32, acumuladoKilos As System.Decimal, fechaUltimaEntrada As System.DateTime, fechaUltimaSalida As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatTiposdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="acumuladoCabezas">Input parameter of stored procedure</param>
		''' <param name="acumuladoKilos">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaEntrada">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaSalida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatTiposdeGanado(descripcion As System.String, descCorta As System.String, observaciones As System.String, acumuladoCabezas As System.Int32, acumuladoKilos As System.Decimal, fechaUltimaEntrada As System.DateTime, fechaUltimaSalida As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@AcumuladoCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumuladoCabezas)
			parameters(5) = New SqlParameter("@AcumuladoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumuladoKilos)
			parameters(6) = New SqlParameter("@FechaUltimaEntrada", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaEntrada)
			parameters(7) = New SqlParameter("@FechaUltimaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaSalida)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatTiposdeGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatTiposdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="acumuladoCabezas">Input parameter of stored procedure</param>
		''' <param name="acumuladoKilos">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaEntrada">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaSalida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatTiposdeGanado(descripcion As System.String, descCorta As System.String, observaciones As System.String, acumuladoCabezas As System.Int32, acumuladoKilos As System.Decimal, fechaUltimaEntrada As System.DateTime, fechaUltimaSalida As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@AcumuladoCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumuladoCabezas)
			parameters(5) = New SqlParameter("@AcumuladoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumuladoKilos)
			parameters(6) = New SqlParameter("@FechaUltimaEntrada", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaEntrada)
			parameters(7) = New SqlParameter("@FechaUltimaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaSalida)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatTiposdeGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatTiposdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="acumuladoCabezas">Input parameter of stored procedure</param>
		''' <param name="acumuladoKilos">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaEntrada">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaSalida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatTiposdeGanado(descripcion As System.String, descCorta As System.String, observaciones As System.String, acumuladoCabezas As System.Int32, acumuladoKilos As System.Decimal, fechaUltimaEntrada As System.DateTime, fechaUltimaSalida As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@AcumuladoCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumuladoCabezas)
			parameters(5) = New SqlParameter("@AcumuladoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumuladoKilos)
			parameters(6) = New SqlParameter("@FechaUltimaEntrada", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaEntrada)
			parameters(7) = New SqlParameter("@FechaUltimaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaSalida)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatTiposdeGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatTiposdeGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="acumuladoCabezas">Input parameter of stored procedure</param>
		''' <param name="acumuladoKilos">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaEntrada">Input parameter of stored procedure</param>
		''' <param name="fechaUltimaSalida">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatTiposdeGanado(descripcion As System.String, descCorta As System.String, observaciones As System.String, acumuladoCabezas As System.Int32, acumuladoKilos As System.Decimal, fechaUltimaEntrada As System.DateTime, fechaUltimaSalida As System.DateTime, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@AcumuladoCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, acumuladoCabezas)
			parameters(5) = New SqlParameter("@AcumuladoKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, acumuladoKilos)
			parameters(6) = New SqlParameter("@FechaUltimaEntrada", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaEntrada)
			parameters(7) = New SqlParameter("@FechaUltimaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaUltimaSalida)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatTiposdeGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MCGCatVehiculos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcgcatVehiculosCallBack(descVehiculo As System.String, descCorVehiculo As System.String, marca As System.String, modelo As System.String, placas As System.String, noSerie As System.String, fechaCompra As System.DateTime, observaciones As System.String, fechaBaja As System.DateTime, quiendioBaja As System.Int32, motivoBaja As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idVehiculo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="descVehiculo">Input parameter of stored procedure</param>
		''' <param name="descCorVehiculo">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="noSerie">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatVehiculos(descVehiculo As System.String, descCorVehiculo As System.String, marca As System.String, modelo As System.String, placas As System.String, noSerie As System.String, fechaCompra As System.DateTime, observaciones As System.String, fechaBaja As System.DateTime, quiendioBaja As System.Int32, motivoBaja As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idVehiculo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(1) = New SqlParameter("@DescVehiculo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descVehiculo)
			parameters(2) = New SqlParameter("@DescCorVehiculo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorVehiculo)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(6) = New SqlParameter("@NoSerie", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noSerie)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idVehiculo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatVehiculos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idVehiculo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="descVehiculo">Input parameter of stored procedure</param>
		''' <param name="descCorVehiculo">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="noSerie">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatVehiculos(descVehiculo As System.String, descCorVehiculo As System.String, marca As System.String, modelo As System.String, placas As System.String, noSerie As System.String, fechaCompra As System.DateTime, observaciones As System.String, fechaBaja As System.DateTime, quiendioBaja As System.Int32, motivoBaja As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idVehiculo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(1) = New SqlParameter("@DescVehiculo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descVehiculo)
			parameters(2) = New SqlParameter("@DescCorVehiculo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorVehiculo)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(6) = New SqlParameter("@NoSerie", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noSerie)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idVehiculo)
			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatVehiculos]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idVehiculo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="descVehiculo">Input parameter of stored procedure</param>
		''' <param name="descCorVehiculo">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="noSerie">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatVehiculos(descVehiculo As System.String, descCorVehiculo As System.String, marca As System.String, modelo As System.String, placas As System.String, noSerie As System.String, fechaCompra As System.DateTime, observaciones As System.String, fechaBaja As System.DateTime, quiendioBaja As System.Int32, motivoBaja As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idVehiculo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(1) = New SqlParameter("@DescVehiculo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descVehiculo)
			parameters(2) = New SqlParameter("@DescCorVehiculo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorVehiculo)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(6) = New SqlParameter("@NoSerie", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noSerie)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idVehiculo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatVehiculos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idVehiculo = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MCGCatVehiculos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idVehiculo">InputOutput parameter of stored procedure</param>
		''' <param name="descVehiculo">Input parameter of stored procedure</param>
		''' <param name="descCorVehiculo">Input parameter of stored procedure</param>
		''' <param name="marca">Input parameter of stored procedure</param>
		''' <param name="modelo">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="noSerie">Input parameter of stored procedure</param>
		''' <param name="fechaCompra">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="fechaBaja">Input parameter of stored procedure</param>
		''' <param name="quiendioBaja">Input parameter of stored procedure</param>
		''' <param name="motivoBaja">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcgcatVehiculos(descVehiculo As System.String, descCorVehiculo As System.String, marca As System.String, modelo As System.String, placas As System.String, noSerie As System.String, fechaCompra As System.DateTime, observaciones As System.String, fechaBaja As System.DateTime, quiendioBaja As System.Int32, motivoBaja As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idVehiculo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(1) = New SqlParameter("@DescVehiculo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descVehiculo)
			parameters(2) = New SqlParameter("@DescCorVehiculo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorVehiculo)
			parameters(3) = New SqlParameter("@Marca", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, marca)
			parameters(4) = New SqlParameter("@Modelo", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, modelo)
			parameters(5) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(6) = New SqlParameter("@NoSerie", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, noSerie)
			parameters(7) = New SqlParameter("@FechaCompra", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCompra)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@FechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaBaja)
			parameters(10) = New SqlParameter("@QuiendioBaja", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, quiendioBaja)
			parameters(11) = New SqlParameter("@MotivoBaja", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoBaja)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdVehiculo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idVehiculo)
			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MCGCatVehiculos]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idVehiculo = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_McompFolioCotizacionServIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcompFolioCotizacionServInsCallBack(ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioCotizacionServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioCotizacionServIns(ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioCotizacionServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioCotizacionServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioCotizacionServIns(ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioCotizacionServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioCotizacionServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioCotizacionServIns(ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioCotizacionServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioCotizacionServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioCotizacionServIns(ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioCotizacionServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_McompFolioOrdenServIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcompFolioOrdenServInsCallBack(ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioOrdenServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioOrdenServIns(ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioOrdenServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioOrdenServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioOrdenServIns(ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioOrdenServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioOrdenServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioOrdenServIns(ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioOrdenServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioOrdenServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioOrdenServIns(ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioOrdenServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_McompFolioSolicitudServIns' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMcompFolioSolicitudServInsCallBack(ByRef folio As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioSolicitudServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioSolicitudServIns(ByRef folio As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioSolicitudServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioSolicitudServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioSolicitudServIns(ByRef folio As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioSolicitudServIns]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioSolicitudServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioSolicitudServIns(ByRef folio As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(1 - 1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioSolicitudServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_McompFolioSolicitudServIns'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMcompFolioSolicitudServIns(ByRef folio As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(1) {}

			parameters(0) = new SqlParameter("@Folio", SqlDbType.VarChar, 15, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, folio)
			' Return value parameter
			parameters(1) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_McompFolioSolicitudServIns]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				folio = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(1).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGCatEntidades' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgcatEntidadesCallBack(idEstado As System.Int32, idCiudad As System.Int32, nomEntidad As System.String, nomCorEntidad As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipoEntidad As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef idEntidad As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGCatEntidades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEntidad">InputOutput parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="nomEntidad">Input parameter of stored procedure</param>
		''' <param name="nomCorEntidad">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipoEntidad">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcatEntidades(idEstado As System.Int32, idCiudad As System.Int32, nomEntidad As System.String, nomCorEntidad As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipoEntidad As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef idEntidad As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@NomEntidad", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomEntidad)
			parameters(4) = New SqlParameter("@NomCorEntidad", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorEntidad)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@TipoEntidad", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoEntidad)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCatEntidades]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEntidad = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCatEntidades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEntidad">InputOutput parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="nomEntidad">Input parameter of stored procedure</param>
		''' <param name="nomCorEntidad">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipoEntidad">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcatEntidades(idEstado As System.Int32, idCiudad As System.Int32, nomEntidad As System.String, nomCorEntidad As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipoEntidad As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef idEntidad As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@NomEntidad", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomEntidad)
			parameters(4) = New SqlParameter("@NomCorEntidad", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorEntidad)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@TipoEntidad", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoEntidad)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCatEntidades]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEntidad = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCatEntidades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEntidad">InputOutput parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="nomEntidad">Input parameter of stored procedure</param>
		''' <param name="nomCorEntidad">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipoEntidad">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcatEntidades(idEstado As System.Int32, idCiudad As System.Int32, nomEntidad As System.String, nomCorEntidad As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipoEntidad As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef idEntidad As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(1) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@NomEntidad", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomEntidad)
			parameters(4) = New SqlParameter("@NomCorEntidad", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorEntidad)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@TipoEntidad", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoEntidad)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCatEntidades]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEntidad = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCatEntidades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEntidad">InputOutput parameter of stored procedure</param>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="nomEntidad">Input parameter of stored procedure</param>
		''' <param name="nomCorEntidad">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="tipoEntidad">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcatEntidades(idEstado As System.Int32, idCiudad As System.Int32, nomEntidad As System.String, nomCorEntidad As System.String, horasViaje As System.Int32, lugarCompra As System.Boolean, tipoEntidad As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32 _
, ByRef idEntidad As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(1) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@NomEntidad", SqlDbType.Char, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomEntidad)
			parameters(4) = New SqlParameter("@NomCorEntidad", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorEntidad)
			parameters(5) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(6) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(7) = New SqlParameter("@TipoEntidad", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoEntidad)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEntidad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEntidad)
			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCatEntidades]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEntidad = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGCnfFoliadores' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgcnfFoliadoresCallBack(codigo As System.Int32, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadores'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadores(codigo As System.Int32, año As System.String, mes As System.String, ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadores]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadores'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadores(codigo As System.Int32, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadores]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadores'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadores(codigo As System.Int32, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadores]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadores'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadores(codigo As System.Int32, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@Codigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codigo)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadores]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGCnfFoliadorInvMovALmacen' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgcnfFoliadorInvMovAlmacenCallBack(letraSerie As System.String, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadorInvMovALmacen'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadorInvMovAlmacen(letraSerie As System.String, año As System.String, mes As System.String, ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadorInvMovALmacen]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadorInvMovALmacen'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadorInvMovAlmacen(letraSerie As System.String, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadorInvMovALmacen]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadorInvMovALmacen'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadorInvMovAlmacen(letraSerie As System.String, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadorInvMovALmacen]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGCnfFoliadorInvMovALmacen'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgcnfFoliadorInvMovAlmacen(letraSerie As System.String, año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(1) = New SqlParameter("@Año", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(2) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(3) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGCnfFoliadorInvMovALmacen]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGRALCatCiudades' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgralcatCiudadesCallBack(idEstado As System.Int32, descripcion As System.String, descCorta As System.String, estatus As System.String, folioPoblacion As System.Int32, func As System.String, numOpc As System.Int32, ByRef idCiudad As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatCiudades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioPoblacion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatCiudades(idEstado As System.Int32, descripcion As System.String, descCorta As System.String, estatus As System.String, folioPoblacion As System.Int32, func As System.String, numOpc As System.Int32, ByRef idCiudad As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(3) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@FolioPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, folioPoblacion)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatCiudades]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				idCiudad = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatCiudades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioPoblacion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatCiudades(idEstado As System.Int32, descripcion As System.String, descCorta As System.String, estatus As System.String, folioPoblacion As System.Int32, func As System.String, numOpc As System.Int32, ByRef idCiudad As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(3) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@FolioPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, folioPoblacion)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatCiudades]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				idCiudad = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatCiudades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioPoblacion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatCiudades(idEstado As System.Int32, descripcion As System.String, descCorta As System.String, estatus As System.String, folioPoblacion As System.Int32, func As System.String, numOpc As System.Int32, ByRef idCiudad As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(3) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@FolioPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, folioPoblacion)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatCiudades]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				idCiudad = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatCiudades'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioPoblacion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatCiudades(idEstado As System.Int32, descripcion As System.String, descCorta As System.String, estatus As System.String, folioPoblacion As System.Int32, func As System.String, numOpc As System.Int32, ByRef idCiudad As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(2) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(3) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@FolioPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, folioPoblacion)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(1) = new SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatCiudades]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				idCiudad = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGRALCatEstados' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgralcatEstadosCallBack(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idEstado As System.Int32, ByRef folioCiudad As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatEstados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatEstados(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idEstado As System.Int32, ByRef folioCiudad As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(4) = new SqlParameter("@FolioCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioCiudad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatEstados]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEstado = CType(parameters(0).Value, System.Int32)
			End If
			If Not parameters(4).Value Is System.DBNull.Value Then
				folioCiudad = CType(parameters(4).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatEstados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatEstados(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idEstado As System.Int32, ByRef folioCiudad As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(4) = new SqlParameter("@FolioCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioCiudad)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatEstados]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEstado = CType(parameters(0).Value, System.Int32)
			End If
			If Not parameters(4).Value Is System.DBNull.Value Then
				folioCiudad = CType(parameters(4).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatEstados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatEstados(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idEstado As System.Int32, ByRef folioCiudad As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(4) = new SqlParameter("@FolioCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioCiudad)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatEstados]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEstado = CType(parameters(0).Value, System.Int32)
			End If
			If Not parameters(4).Value Is System.DBNull.Value Then
				folioCiudad = CType(parameters(4).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatEstados'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioCiudad">InputOutput parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatEstados(descripcion As System.String, descCorta As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idEstado As System.Int32, ByRef folioCiudad As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(3) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(4) = new SqlParameter("@FolioCiudad", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioCiudad)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatEstados]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idEstado = CType(parameters(0).Value, System.Int32)
			End If
			If Not parameters(4).Value Is System.DBNull.Value Then
				folioCiudad = CType(parameters(4).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGRALCatPoblaciones' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgralcatPoblacionesCallBack(idEstado As System.Int32, idCiudad As System.Int32, descripcion As System.String, descCorta As System.String, lugarCompra As System.Boolean, horasViaje As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idPoblacion As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatPoblaciones'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatPoblaciones(idEstado As System.Int32, idCiudad As System.Int32, descripcion As System.String, descCorta As System.String, lugarCompra As System.Boolean, horasViaje As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idPoblacion As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(5) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(6) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatPoblaciones]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				idPoblacion = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatPoblaciones'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatPoblaciones(idEstado As System.Int32, idCiudad As System.Int32, descripcion As System.String, descCorta As System.String, lugarCompra As System.Boolean, horasViaje As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idPoblacion As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(5) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(6) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatPoblaciones]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				idPoblacion = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatPoblaciones'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatPoblaciones(idEstado As System.Int32, idCiudad As System.Int32, descripcion As System.String, descCorta As System.String, lugarCompra As System.Boolean, horasViaje As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idPoblacion As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(5) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(6) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatPoblaciones]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				idPoblacion = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGRALCatPoblaciones'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="descCorta">Input parameter of stored procedure</param>
		''' <param name="lugarCompra">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralcatPoblaciones(idEstado As System.Int32, idCiudad As System.Int32, descripcion As System.String, descCorta As System.String, lugarCompra As System.Boolean, horasViaje As System.Int32, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef idPoblacion As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@DescCorta", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descCorta)
			parameters(5) = New SqlParameter("@LugarCompra", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lugarCompra)
			parameters(6) = New SqlParameter("@HorasViaje", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, horasViaje)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(2) = new SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGRALCatPoblaciones]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				idPoblacion = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MGralCatPuntosEntrega' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMgralCatPuntosEntregaCallBack(idEstado As System.Int32, idCiudad As System.Int32, idPoblacion As System.Int32, descripcion As System.String, direccion As System.String, colonia As System.String, telefono As System.String, codigoPostal As System.String, estatus As System.String, idCliente As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idPuntoEntrega As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MGralCatPuntosEntrega'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idPuntoEntrega">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="direccion">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="codigoPostal">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralCatPuntosEntrega(idEstado As System.Int32, idCiudad As System.Int32, idPoblacion As System.Int32, descripcion As System.String, direccion As System.String, colonia As System.String, telefono As System.String, codigoPostal As System.String, estatus As System.String, idCliente As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idPuntoEntrega As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(2) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(4) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(5) = New SqlParameter("@Direccion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, direccion)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Telefono", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(8) = New SqlParameter("@CodigoPostal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoPostal)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@IdPuntoEntrega", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPuntoEntrega)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGralCatPuntosEntrega]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				idPuntoEntrega = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGralCatPuntosEntrega'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idPuntoEntrega">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="direccion">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="codigoPostal">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralCatPuntosEntrega(idEstado As System.Int32, idCiudad As System.Int32, idPoblacion As System.Int32, descripcion As System.String, direccion As System.String, colonia As System.String, telefono As System.String, codigoPostal As System.String, estatus As System.String, idCliente As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idPuntoEntrega As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(2) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(4) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(5) = New SqlParameter("@Direccion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, direccion)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Telefono", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(8) = New SqlParameter("@CodigoPostal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoPostal)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@IdPuntoEntrega", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPuntoEntrega)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGralCatPuntosEntrega]", parameters, Nothing)
			If Not parameters(3).Value Is System.DBNull.Value Then
				idPuntoEntrega = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGralCatPuntosEntrega'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idPuntoEntrega">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="direccion">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="codigoPostal">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralCatPuntosEntrega(idEstado As System.Int32, idCiudad As System.Int32, idPoblacion As System.Int32, descripcion As System.String, direccion As System.String, colonia As System.String, telefono As System.String, codigoPostal As System.String, estatus As System.String, idCliente As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idPuntoEntrega As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(2) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(4) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(5) = New SqlParameter("@Direccion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, direccion)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Telefono", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(8) = New SqlParameter("@CodigoPostal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoPostal)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@IdPuntoEntrega", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPuntoEntrega)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGralCatPuntosEntrega]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				idPuntoEntrega = CType(parameters(3).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MGralCatPuntosEntrega'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idEstado">Input parameter of stored procedure</param>
		''' <param name="idCiudad">Input parameter of stored procedure</param>
		''' <param name="idPoblacion">Input parameter of stored procedure</param>
		''' <param name="idPuntoEntrega">InputOutput parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="direccion">Input parameter of stored procedure</param>
		''' <param name="colonia">Input parameter of stored procedure</param>
		''' <param name="telefono">Input parameter of stored procedure</param>
		''' <param name="codigoPostal">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMgralCatPuntosEntrega(idEstado As System.Int32, idCiudad As System.Int32, idPoblacion As System.Int32, descripcion As System.String, direccion As System.String, colonia As System.String, telefono As System.String, codigoPostal As System.String, estatus As System.String, idCliente As System.Int32, func As System.String,  _
numOpc As System.Int32, ByRef idPuntoEntrega As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@IdEstado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idEstado)
			parameters(1) = New SqlParameter("@IdCiudad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCiudad)
			parameters(2) = New SqlParameter("@IdPoblacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPoblacion)
			parameters(4) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(5) = New SqlParameter("@Direccion", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, direccion)
			parameters(6) = New SqlParameter("@Colonia", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, colonia)
			parameters(7) = New SqlParameter("@Telefono", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, telefono)
			parameters(8) = New SqlParameter("@CodigoPostal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoPostal)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(3) = new SqlParameter("@IdPuntoEntrega", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idPuntoEntrega)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MGralCatPuntosEntrega]", parameters, transactionToUse)
			If Not parameters(3).Value Is System.DBNull.Value Then
				idPuntoEntrega = CType(parameters(3).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCCatAlmacenes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsccatAlmacenesCallBack(nomAlmacen As System.String, nomCorAlmacen As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, propio As System.Boolean, idCliente As System.Int32, tipoAlmacen As System.String, consecutivo As System.Decimal, letraSerie As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, idCodAlmacen As System.Int32, ByRef idAlmProdRas As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idAlmProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorAlmacen">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="propio">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatAlmacenes(nomAlmacen As System.String, nomCorAlmacen As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, propio As System.Boolean, idCliente As System.Int32, tipoAlmacen As System.String, consecutivo As System.Decimal, letraSerie As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, idCodAlmacen As System.Int32, ByRef idAlmProdRas As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(16 - 1) {}
			parameters(1) = New SqlParameter("@NomAlmacen", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorAlmacen", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorAlmacen)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Propio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, propio)
			parameters(8) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(9) = New SqlParameter("@TipoAlmacen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(10) = New SqlParameter("@Consecutivo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecutivo)
			parameters(11) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(15) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(0) = new SqlParameter("@IdAlmProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idAlmProdRas)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatAlmacenes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idAlmProdRas = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idAlmProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorAlmacen">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="propio">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatAlmacenes(nomAlmacen As System.String, nomCorAlmacen As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, propio As System.Boolean, idCliente As System.Int32, tipoAlmacen As System.String, consecutivo As System.Decimal, letraSerie As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, idCodAlmacen As System.Int32, ByRef idAlmProdRas As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(16) {}
			parameters(1) = New SqlParameter("@NomAlmacen", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorAlmacen", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorAlmacen)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Propio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, propio)
			parameters(8) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(9) = New SqlParameter("@TipoAlmacen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(10) = New SqlParameter("@Consecutivo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecutivo)
			parameters(11) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(15) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(0) = new SqlParameter("@IdAlmProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idAlmProdRas)
			' Return value parameter
			parameters(16) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatAlmacenes]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idAlmProdRas = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(16).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idAlmProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorAlmacen">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="propio">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatAlmacenes(nomAlmacen As System.String, nomCorAlmacen As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, propio As System.Boolean, idCliente As System.Int32, tipoAlmacen As System.String, consecutivo As System.Decimal, letraSerie As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, idCodAlmacen As System.Int32, ByRef idAlmProdRas As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(16 - 1) {}
			parameters(1) = New SqlParameter("@NomAlmacen", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorAlmacen", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorAlmacen)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Propio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, propio)
			parameters(8) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(9) = New SqlParameter("@TipoAlmacen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(10) = New SqlParameter("@Consecutivo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecutivo)
			parameters(11) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(15) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(0) = new SqlParameter("@IdAlmProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idAlmProdRas)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatAlmacenes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idAlmProdRas = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idAlmProdRas">InputOutput parameter of stored procedure</param>
		''' <param name="nomAlmacen">Input parameter of stored procedure</param>
		''' <param name="nomCorAlmacen">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="propio">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="tipoAlmacen">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="letraSerie">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatAlmacenes(nomAlmacen As System.String, nomCorAlmacen As System.String, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, propio As System.Boolean, idCliente As System.Int32, tipoAlmacen As System.String, consecutivo As System.Decimal, letraSerie As System.String,  _
estatus As System.String, func As System.String, numOpc As System.Int32, idCodAlmacen As System.Int32, ByRef idAlmProdRas As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(16) {}
			parameters(1) = New SqlParameter("@NomAlmacen", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomAlmacen)
			parameters(2) = New SqlParameter("@NomCorAlmacen", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorAlmacen)
			parameters(3) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(4) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(6) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(7) = New SqlParameter("@Propio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, propio)
			parameters(8) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(9) = New SqlParameter("@TipoAlmacen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, tipoAlmacen)
			parameters(10) = New SqlParameter("@Consecutivo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecutivo)
			parameters(11) = New SqlParameter("@LetraSerie", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, letraSerie)
			parameters(12) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(15) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(0) = new SqlParameter("@IdAlmProdRas", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idAlmProdRas)
			' Return value parameter
			parameters(16) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatAlmacenes]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idAlmProdRas = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(16).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCCatMotivosDecomiso' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsccatMotivosDecomisoCallBack(nombreMotivoDec As System.String, nomCorMotivoDec As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMotivoDec As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatMotivosDecomiso'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMotivoDec">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMotivoDec">Input parameter of stored procedure</param>
		''' <param name="nomCorMotivoDec">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatMotivosDecomiso(nombreMotivoDec As System.String, nomCorMotivoDec As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMotivoDec As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreMotivoDec", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMotivoDec)
			parameters(2) = New SqlParameter("@NomCorMotivoDec", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMotivoDec)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMotivoDec", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMotivoDec)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatMotivosDecomiso]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMotivoDec = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatMotivosDecomiso'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMotivoDec">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMotivoDec">Input parameter of stored procedure</param>
		''' <param name="nomCorMotivoDec">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatMotivosDecomiso(nombreMotivoDec As System.String, nomCorMotivoDec As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMotivoDec As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreMotivoDec", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMotivoDec)
			parameters(2) = New SqlParameter("@NomCorMotivoDec", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMotivoDec)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMotivoDec", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMotivoDec)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatMotivosDecomiso]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMotivoDec = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatMotivosDecomiso'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMotivoDec">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMotivoDec">Input parameter of stored procedure</param>
		''' <param name="nomCorMotivoDec">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatMotivosDecomiso(nombreMotivoDec As System.String, nomCorMotivoDec As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMotivoDec As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreMotivoDec", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMotivoDec)
			parameters(2) = New SqlParameter("@NomCorMotivoDec", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMotivoDec)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMotivoDec", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMotivoDec)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatMotivosDecomiso]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMotivoDec = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatMotivosDecomiso'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idMotivoDec">InputOutput parameter of stored procedure</param>
		''' <param name="nombreMotivoDec">Input parameter of stored procedure</param>
		''' <param name="nomCorMotivoDec">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatMotivosDecomiso(nombreMotivoDec As System.String, nomCorMotivoDec As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idMotivoDec As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreMotivoDec", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreMotivoDec)
			parameters(2) = New SqlParameter("@NomCorMotivoDec", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorMotivoDec)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdMotivoDec", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idMotivoDec)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatMotivosDecomiso]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idMotivoDec = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCCatRelProdxCliente' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsccatRelProdxClienteCallBack(idProdRas As System.Int32, idProdCliente As System.String, nomProdCliente As System.String, nomCorProdCliente As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCliente As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatRelProdxCliente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCliente">InputOutput parameter of stored procedure</param>
		''' <param name="idProdRas">Input parameter of stored procedure</param>
		''' <param name="idProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomCorProdCliente">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatRelProdxCliente(idProdRas As System.Int32, idProdCliente As System.String, nomProdCliente As System.String, nomCorProdCliente As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCliente As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@IdProdRas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProdRas)
			parameters(2) = New SqlParameter("@IdProdCliente", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idProdCliente)
			parameters(3) = New SqlParameter("@NomProdCliente", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdCliente)
			parameters(4) = New SqlParameter("@NomCorProdCliente", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorProdCliente)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatRelProdxCliente]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCliente = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatRelProdxCliente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCliente">InputOutput parameter of stored procedure</param>
		''' <param name="idProdRas">Input parameter of stored procedure</param>
		''' <param name="idProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomCorProdCliente">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatRelProdxCliente(idProdRas As System.Int32, idProdCliente As System.String, nomProdCliente As System.String, nomCorProdCliente As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCliente As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@IdProdRas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProdRas)
			parameters(2) = New SqlParameter("@IdProdCliente", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idProdCliente)
			parameters(3) = New SqlParameter("@NomProdCliente", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdCliente)
			parameters(4) = New SqlParameter("@NomCorProdCliente", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorProdCliente)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatRelProdxCliente]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCliente = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatRelProdxCliente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCliente">InputOutput parameter of stored procedure</param>
		''' <param name="idProdRas">Input parameter of stored procedure</param>
		''' <param name="idProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomCorProdCliente">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatRelProdxCliente(idProdRas As System.Int32, idProdCliente As System.String, nomProdCliente As System.String, nomCorProdCliente As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCliente As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(9 - 1) {}
			parameters(1) = New SqlParameter("@IdProdRas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProdRas)
			parameters(2) = New SqlParameter("@IdProdCliente", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idProdCliente)
			parameters(3) = New SqlParameter("@NomProdCliente", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdCliente)
			parameters(4) = New SqlParameter("@NomCorProdCliente", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorProdCliente)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatRelProdxCliente]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCliente = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatRelProdxCliente'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCliente">InputOutput parameter of stored procedure</param>
		''' <param name="idProdRas">Input parameter of stored procedure</param>
		''' <param name="idProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomProdCliente">Input parameter of stored procedure</param>
		''' <param name="nomCorProdCliente">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatRelProdxCliente(idProdRas As System.Int32, idProdCliente As System.String, nomProdCliente As System.String, nomCorProdCliente As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idCliente As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(9) {}
			parameters(1) = New SqlParameter("@IdProdRas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProdRas)
			parameters(2) = New SqlParameter("@IdProdCliente", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idProdCliente)
			parameters(3) = New SqlParameter("@NomProdCliente", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomProdCliente)
			parameters(4) = New SqlParameter("@NomCorProdCliente", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorProdCliente)
			parameters(5) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(8) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			' Return value parameter
			parameters(9) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatRelProdxCliente]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idCliente = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(9).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCCatServiciosRastro' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsccatServiciosRastroCallBack(nombreServicio As System.String, nomCorservicio As System.String, importe As System.Decimal, porcentajeIva As System.Decimal, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef idServicio As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatServiciosRastro'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idServicio">InputOutput parameter of stored procedure</param>
		''' <param name="nombreServicio">Input parameter of stored procedure</param>
		''' <param name="nomCorservicio">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatServiciosRastro(nombreServicio As System.String, nomCorservicio As System.String, importe As System.Decimal, porcentajeIva As System.Decimal, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef idServicio As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@NombreServicio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreServicio)
			parameters(2) = New SqlParameter("@NomCorservicio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorservicio)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(6) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(7) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(8) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdServicio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idServicio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatServiciosRastro]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idServicio = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatServiciosRastro'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idServicio">InputOutput parameter of stored procedure</param>
		''' <param name="nombreServicio">Input parameter of stored procedure</param>
		''' <param name="nomCorservicio">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatServiciosRastro(nombreServicio As System.String, nomCorservicio As System.String, importe As System.Decimal, porcentajeIva As System.Decimal, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef idServicio As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@NombreServicio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreServicio)
			parameters(2) = New SqlParameter("@NomCorservicio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorservicio)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(6) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(7) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(8) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdServicio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idServicio)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatServiciosRastro]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idServicio = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatServiciosRastro'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idServicio">InputOutput parameter of stored procedure</param>
		''' <param name="nombreServicio">Input parameter of stored procedure</param>
		''' <param name="nomCorservicio">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatServiciosRastro(nombreServicio As System.String, nomCorservicio As System.String, importe As System.Decimal, porcentajeIva As System.Decimal, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef idServicio As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(1) = New SqlParameter("@NombreServicio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreServicio)
			parameters(2) = New SqlParameter("@NomCorservicio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorservicio)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(6) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(7) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(8) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdServicio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idServicio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatServiciosRastro]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idServicio = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCatServiciosRastro'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idServicio">InputOutput parameter of stored procedure</param>
		''' <param name="nombreServicio">Input parameter of stored procedure</param>
		''' <param name="nomCorservicio">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="porcentajeIva">Input parameter of stored procedure</param>
		''' <param name="ctaMay">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssbCta">Input parameter of stored procedure</param>
		''' <param name="sssCta">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccatServiciosRastro(nombreServicio As System.String, nomCorservicio As System.String, importe As System.Decimal, porcentajeIva As System.Decimal, ctaMay As System.String, subCta As System.String, ssbCta As System.String, sssCta As System.String, observaciones As System.String, estatus As System.Int16, func As System.String,  _
numOpc As System.Int32, ByRef idServicio As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(1) = New SqlParameter("@NombreServicio", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreServicio)
			parameters(2) = New SqlParameter("@NomCorservicio", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorservicio)
			parameters(3) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(4) = New SqlParameter("@PorcentajeIva", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, porcentajeIva)
			parameters(5) = New SqlParameter("@CtaMay", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMay)
			parameters(6) = New SqlParameter("@SubCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(7) = New SqlParameter("@SsbCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssbCta)
			parameters(8) = New SqlParameter("@SssCta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssCta)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdServicio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idServicio)
			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCatServiciosRastro]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idServicio = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCConfigAlmacenes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscconfigAlmacenesCallBack(idCodAlmacendeCanales As System.Int32, idCodalmacendeCortes As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfigAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacendeCanales">Input parameter of stored procedure</param>
		''' <param name="idCodalmacendeCortes">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfigAlmacenes(idCodAlmacendeCanales As System.Int32, idCodalmacendeCortes As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdCodAlmacendeCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacendeCanales)
			parameters(1) = New SqlParameter("@IdCodalmacendeCortes", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodalmacendeCortes)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfigAlmacenes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfigAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacendeCanales">Input parameter of stored procedure</param>
		''' <param name="idCodalmacendeCortes">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfigAlmacenes(idCodAlmacendeCanales As System.Int32, idCodalmacendeCortes As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdCodAlmacendeCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacendeCanales)
			parameters(1) = New SqlParameter("@IdCodalmacendeCortes", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodalmacendeCortes)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfigAlmacenes]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfigAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacendeCanales">Input parameter of stored procedure</param>
		''' <param name="idCodalmacendeCortes">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfigAlmacenes(idCodAlmacendeCanales As System.Int32, idCodalmacendeCortes As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdCodAlmacendeCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacendeCanales)
			parameters(1) = New SqlParameter("@IdCodalmacendeCortes", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodalmacendeCortes)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfigAlmacenes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfigAlmacenes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacendeCanales">Input parameter of stored procedure</param>
		''' <param name="idCodalmacendeCortes">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfigAlmacenes(idCodAlmacendeCanales As System.Int32, idCodalmacendeCortes As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdCodAlmacendeCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacendeCanales)
			parameters(1) = New SqlParameter("@IdCodalmacendeCortes", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodalmacendeCortes)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfigAlmacenes]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCConfiguracionPuerto' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscconfiguracionPuertoCallBack(puerto As System.String, baudios As System.Decimal, paridad As System.String, bitxCaracter As System.Int32, bitdeParada As System.Int64, controldeFlujo As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfiguracionPuerto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="puerto">Input parameter of stored procedure</param>
		''' <param name="baudios">Input parameter of stored procedure</param>
		''' <param name="paridad">Input parameter of stored procedure</param>
		''' <param name="bitxCaracter">Input parameter of stored procedure</param>
		''' <param name="bitdeParada">Input parameter of stored procedure</param>
		''' <param name="controldeFlujo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfiguracionPuerto(puerto As System.String, baudios As System.Decimal, paridad As System.String, bitxCaracter As System.Int32, bitdeParada As System.Int64, controldeFlujo As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@Puerto", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, puerto)
			parameters(1) = New SqlParameter("@Baudios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, baudios)
			parameters(2) = New SqlParameter("@Paridad", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, paridad)
			parameters(3) = New SqlParameter("@BitxCaracter", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, bitxCaracter)
			parameters(4) = New SqlParameter("@BitdeParada", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, bitdeParada)
			parameters(5) = New SqlParameter("@ControldeFlujo", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, controldeFlujo)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfiguracionPuerto]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfiguracionPuerto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="puerto">Input parameter of stored procedure</param>
		''' <param name="baudios">Input parameter of stored procedure</param>
		''' <param name="paridad">Input parameter of stored procedure</param>
		''' <param name="bitxCaracter">Input parameter of stored procedure</param>
		''' <param name="bitdeParada">Input parameter of stored procedure</param>
		''' <param name="controldeFlujo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfiguracionPuerto(puerto As System.String, baudios As System.Decimal, paridad As System.String, bitxCaracter As System.Int32, bitdeParada As System.Int64, controldeFlujo As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@Puerto", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, puerto)
			parameters(1) = New SqlParameter("@Baudios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, baudios)
			parameters(2) = New SqlParameter("@Paridad", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, paridad)
			parameters(3) = New SqlParameter("@BitxCaracter", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, bitxCaracter)
			parameters(4) = New SqlParameter("@BitdeParada", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, bitdeParada)
			parameters(5) = New SqlParameter("@ControldeFlujo", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, controldeFlujo)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfiguracionPuerto]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfiguracionPuerto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="puerto">Input parameter of stored procedure</param>
		''' <param name="baudios">Input parameter of stored procedure</param>
		''' <param name="paridad">Input parameter of stored procedure</param>
		''' <param name="bitxCaracter">Input parameter of stored procedure</param>
		''' <param name="bitdeParada">Input parameter of stored procedure</param>
		''' <param name="controldeFlujo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfiguracionPuerto(puerto As System.String, baudios As System.Decimal, paridad As System.String, bitxCaracter As System.Int32, bitdeParada As System.Int64, controldeFlujo As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@Puerto", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, puerto)
			parameters(1) = New SqlParameter("@Baudios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, baudios)
			parameters(2) = New SqlParameter("@Paridad", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, paridad)
			parameters(3) = New SqlParameter("@BitxCaracter", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, bitxCaracter)
			parameters(4) = New SqlParameter("@BitdeParada", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, bitdeParada)
			parameters(5) = New SqlParameter("@ControldeFlujo", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, controldeFlujo)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfiguracionPuerto]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCConfiguracionPuerto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="puerto">Input parameter of stored procedure</param>
		''' <param name="baudios">Input parameter of stored procedure</param>
		''' <param name="paridad">Input parameter of stored procedure</param>
		''' <param name="bitxCaracter">Input parameter of stored procedure</param>
		''' <param name="bitdeParada">Input parameter of stored procedure</param>
		''' <param name="controldeFlujo">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscconfiguracionPuerto(puerto As System.String, baudios As System.Decimal, paridad As System.String, bitxCaracter As System.Int32, bitdeParada As System.Int64, controldeFlujo As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@Puerto", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, puerto)
			parameters(1) = New SqlParameter("@Baudios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, baudios)
			parameters(2) = New SqlParameter("@Paridad", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, paridad)
			parameters(3) = New SqlParameter("@BitxCaracter", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, bitxCaracter)
			parameters(4) = New SqlParameter("@BitdeParada", SqlDbType.BigInt, 0, ParameterDirection.Input, True, 19, 0, "",  DataRowVersion.Current, bitdeParada)
			parameters(5) = New SqlParameter("@ControldeFlujo", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, controldeFlujo)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCConfiguracionPuerto]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCCortesPreCortes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsccortesPreCortesCallBack(idPreCorte As System.Int32, idCorte As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCCortesPreCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idPreCorte">Input parameter of stored procedure</param>
		''' <param name="idCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccortesPreCortes(idPreCorte As System.Int32, idCorte As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdPreCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPreCorte)
			parameters(1) = New SqlParameter("@IdCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCortesPreCortes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCortesPreCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idPreCorte">Input parameter of stored procedure</param>
		''' <param name="idCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccortesPreCortes(idPreCorte As System.Int32, idCorte As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdPreCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPreCorte)
			parameters(1) = New SqlParameter("@IdCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCortesPreCortes]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCortesPreCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idPreCorte">Input parameter of stored procedure</param>
		''' <param name="idCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccortesPreCortes(idPreCorte As System.Int32, idCorte As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdPreCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPreCorte)
			parameters(1) = New SqlParameter("@IdCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCortesPreCortes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCCortesPreCortes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idPreCorte">Input parameter of stored procedure</param>
		''' <param name="idCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsccortesPreCortes(idPreCorte As System.Int32, idCorte As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdPreCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idPreCorte)
			parameters(1) = New SqlParameter("@IdCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCCortesPreCortes]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCDetCanalACorte' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscdetCanalAcorteCallBack(idFolioLoteCorte As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int32, kgrsEnCorte As System.Decimal, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCDetCanalACorte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioLoteCorte">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsEnCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscdetCanalAcorte(idFolioLoteCorte As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int32, kgrsEnCorte As System.Decimal, estatus As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioLoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLoteCorte)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsEnCorte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsEnCorte)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCDetCanalACorte]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCDetCanalACorte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioLoteCorte">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsEnCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscdetCanalAcorte(idFolioLoteCorte As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int32, kgrsEnCorte As System.Decimal, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioLoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLoteCorte)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsEnCorte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsEnCorte)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCDetCanalACorte]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCDetCanalACorte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioLoteCorte">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsEnCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscdetCanalAcorte(idFolioLoteCorte As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int32, kgrsEnCorte As System.Decimal, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioLoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLoteCorte)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsEnCorte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsEnCorte)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCDetCanalACorte]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCDetCanalACorte'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioLoteCorte">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsEnCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscdetCanalAcorte(idFolioLoteCorte As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int32, kgrsEnCorte As System.Decimal, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioLoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLoteCorte)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsEnCorte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsEnCorte)
			parameters(5) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCDetCanalACorte]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCFolioLoteCanales' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscfolioLoteCanalesCallBack(año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioLoteCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioLoteCanales(año As System.String, mes As System.String, ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioLoteCanales]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioLoteCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioLoteCanales(año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioLoteCanales]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioLoteCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioLoteCanales(año As System.String, mes As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioLoteCanales]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioLoteCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioLoteCanales(año As System.String, mes As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioLoteCanales]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCFolioSacrificios' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscfolioSacrificiosCallBack(año As System.String, mes As System.String, ByRef folioSacrificio As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSacrificios(año As System.String, mes As System.String, ByRef folioSacrificio As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSacrificio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSacrificio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSacrificios]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSacrificio = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSacrificios(año As System.String, mes As System.String, ByRef folioSacrificio As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSacrificio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSacrificio)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSacrificios]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSacrificio = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSacrificios(año As System.String, mes As System.String, ByRef folioSacrificio As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSacrificio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSacrificio)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSacrificios]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSacrificio = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSacrificios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSacrificios(año As System.String, mes As System.String, ByRef folioSacrificio As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSacrificio", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSacrificio)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSacrificios]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSacrificio = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCFolioSalidaGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscfolioSalidaGanadoCallBack(año As System.String, mes As System.String, ByRef folioSalidaGanado As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSalidaGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSalidaGanado(año As System.String, mes As System.String, ByRef folioSalidaGanado As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSalidaGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSalidaGanado]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSalidaGanado = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSalidaGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSalidaGanado(año As System.String, mes As System.String, ByRef folioSalidaGanado As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSalidaGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSalidaGanado]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSalidaGanado = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSalidaGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSalidaGanado(año As System.String, mes As System.String, ByRef folioSalidaGanado As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSalidaGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSalidaGanado]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSalidaGanado = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFolioSalidaGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfolioSalidaGanado(año As System.String, mes As System.String, ByRef folioSalidaGanado As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioSalidaGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFolioSalidaGanado]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioSalidaGanado = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCFoliosPalette' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscfoliosPaletteCallBack(año As System.String, mes As System.String, ByRef folioPalette As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCFoliosPalette'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioPalette">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfoliosPalette(año As System.String, mes As System.String, ByRef folioPalette As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioPalette", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioPalette)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFoliosPalette]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioPalette = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFoliosPalette'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioPalette">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfoliosPalette(año As System.String, mes As System.String, ByRef folioPalette As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioPalette", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioPalette)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFoliosPalette]", parameters, Nothing)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioPalette = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFoliosPalette'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioPalette">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfoliosPalette(año As System.String, mes As System.String, ByRef folioPalette As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(3 - 1) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioPalette", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioPalette)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFoliosPalette]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioPalette = CType(parameters(2).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCFoliosPalette'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="año">Input parameter of stored procedure</param>
		''' <param name="mes">Input parameter of stored procedure</param>
		''' <param name="folioPalette">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscfoliosPalette(año As System.String, mes As System.String, ByRef folioPalette As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(3) {}
			parameters(0) = New SqlParameter("@Año", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, año)
			parameters(1) = New SqlParameter("@Mes", SqlDbType.Char, 2, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, mes)
			parameters(2) = new SqlParameter("@FolioPalette", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, folioPalette)
			' Return value parameter
			parameters(3) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCFoliosPalette]", parameters, transactionToUse)
			If Not parameters(2).Value Is System.DBNull.Value Then
				folioPalette = CType(parameters(2).Value, System.Int32)
			End If

			returnValue = CType(parameters(3).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCInventarioProducto' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscinventarioProductoCallBack(idCodAlmacen As System.Int32, idCodProducto As System.Int32, existKilos As System.Decimal, existPzas As System.Int32, entKilos As System.Decimal, entPzas As System.Int32, salKilos As System.Decimal, salPzas As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCInventarioProducto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="existPzas">Input parameter of stored procedure</param>
		''' <param name="entKilos">Input parameter of stored procedure</param>
		''' <param name="entPzas">Input parameter of stored procedure</param>
		''' <param name="salKilos">Input parameter of stored procedure</param>
		''' <param name="salPzas">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscinventarioProducto(idCodAlmacen As System.Int32, idCodProducto As System.Int32, existKilos As System.Decimal, existPzas As System.Int32, entKilos As System.Decimal, entPzas As System.Int32, salKilos As System.Decimal, salPzas As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(3) = New SqlParameter("@ExistPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, existPzas)
			parameters(4) = New SqlParameter("@EntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, entKilos)
			parameters(5) = New SqlParameter("@EntPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, entPzas)
			parameters(6) = New SqlParameter("@SalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, salKilos)
			parameters(7) = New SqlParameter("@SalPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, salPzas)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCInventarioProducto]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCInventarioProducto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="existPzas">Input parameter of stored procedure</param>
		''' <param name="entKilos">Input parameter of stored procedure</param>
		''' <param name="entPzas">Input parameter of stored procedure</param>
		''' <param name="salKilos">Input parameter of stored procedure</param>
		''' <param name="salPzas">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscinventarioProducto(idCodAlmacen As System.Int32, idCodProducto As System.Int32, existKilos As System.Decimal, existPzas As System.Int32, entKilos As System.Decimal, entPzas As System.Int32, salKilos As System.Decimal, salPzas As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(3) = New SqlParameter("@ExistPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, existPzas)
			parameters(4) = New SqlParameter("@EntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, entKilos)
			parameters(5) = New SqlParameter("@EntPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, entPzas)
			parameters(6) = New SqlParameter("@SalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, salKilos)
			parameters(7) = New SqlParameter("@SalPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, salPzas)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCInventarioProducto]", parameters, Nothing)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCInventarioProducto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="existPzas">Input parameter of stored procedure</param>
		''' <param name="entKilos">Input parameter of stored procedure</param>
		''' <param name="entPzas">Input parameter of stored procedure</param>
		''' <param name="salKilos">Input parameter of stored procedure</param>
		''' <param name="salPzas">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscinventarioProducto(idCodAlmacen As System.Int32, idCodProducto As System.Int32, existKilos As System.Decimal, existPzas As System.Int32, entKilos As System.Decimal, entPzas As System.Int32, salKilos As System.Decimal, salPzas As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(3) = New SqlParameter("@ExistPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, existPzas)
			parameters(4) = New SqlParameter("@EntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, entKilos)
			parameters(5) = New SqlParameter("@EntPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, entPzas)
			parameters(6) = New SqlParameter("@SalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, salKilos)
			parameters(7) = New SqlParameter("@SalPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, salPzas)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCInventarioProducto]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCInventarioProducto'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="existKilos">Input parameter of stored procedure</param>
		''' <param name="existPzas">Input parameter of stored procedure</param>
		''' <param name="entKilos">Input parameter of stored procedure</param>
		''' <param name="entPzas">Input parameter of stored procedure</param>
		''' <param name="salKilos">Input parameter of stored procedure</param>
		''' <param name="salPzas">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscinventarioProducto(idCodAlmacen As System.Int32, idCodProducto As System.Int32, existKilos As System.Decimal, existPzas As System.Int32, entKilos As System.Decimal, entPzas As System.Int32, salKilos As System.Decimal, salPzas As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@ExistKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, existKilos)
			parameters(3) = New SqlParameter("@ExistPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, existPzas)
			parameters(4) = New SqlParameter("@EntKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, entKilos)
			parameters(5) = New SqlParameter("@EntPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, entPzas)
			parameters(6) = New SqlParameter("@SalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, salKilos)
			parameters(7) = New SqlParameter("@SalPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, salPzas)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCInventarioProducto]", parameters, transactionToUse)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCLayoutEtiqueta' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsclayoutEtiquetaCallBack(idCodigo As System.Int32, descripcion As System.String, codigo As System.String, longitudCodigo As System.Int32, posicionInicial As System.Int32, maximoTamaño As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiqueta'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodigo">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="longitudCodigo">Input parameter of stored procedure</param>
		''' <param name="posicionInicial">Input parameter of stored procedure</param>
		''' <param name="maximoTamaño">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiqueta(idCodigo As System.Int32, descripcion As System.String, codigo As System.String, longitudCodigo As System.Int32, posicionInicial As System.Int32, maximoTamaño As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodigo)
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@Codigo", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigo)
			parameters(3) = New SqlParameter("@LongitudCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longitudCodigo)
			parameters(4) = New SqlParameter("@PosicionInicial", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, posicionInicial)
			parameters(5) = New SqlParameter("@MaximoTamaño", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, maximoTamaño)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiqueta]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiqueta'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodigo">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="longitudCodigo">Input parameter of stored procedure</param>
		''' <param name="posicionInicial">Input parameter of stored procedure</param>
		''' <param name="maximoTamaño">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiqueta(idCodigo As System.Int32, descripcion As System.String, codigo As System.String, longitudCodigo As System.Int32, posicionInicial As System.Int32, maximoTamaño As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodigo)
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@Codigo", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigo)
			parameters(3) = New SqlParameter("@LongitudCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longitudCodigo)
			parameters(4) = New SqlParameter("@PosicionInicial", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, posicionInicial)
			parameters(5) = New SqlParameter("@MaximoTamaño", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, maximoTamaño)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiqueta]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiqueta'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodigo">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="longitudCodigo">Input parameter of stored procedure</param>
		''' <param name="posicionInicial">Input parameter of stored procedure</param>
		''' <param name="maximoTamaño">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiqueta(idCodigo As System.Int32, descripcion As System.String, codigo As System.String, longitudCodigo As System.Int32, posicionInicial As System.Int32, maximoTamaño As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodigo)
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@Codigo", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigo)
			parameters(3) = New SqlParameter("@LongitudCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longitudCodigo)
			parameters(4) = New SqlParameter("@PosicionInicial", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, posicionInicial)
			parameters(5) = New SqlParameter("@MaximoTamaño", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, maximoTamaño)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiqueta]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiqueta'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idCodigo">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="codigo">Input parameter of stored procedure</param>
		''' <param name="longitudCodigo">Input parameter of stored procedure</param>
		''' <param name="posicionInicial">Input parameter of stored procedure</param>
		''' <param name="maximoTamaño">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiqueta(idCodigo As System.Int32, descripcion As System.String, codigo As System.String, longitudCodigo As System.Int32, posicionInicial As System.Int32, maximoTamaño As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodigo)
			parameters(1) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(2) = New SqlParameter("@Codigo", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigo)
			parameters(3) = New SqlParameter("@LongitudCodigo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longitudCodigo)
			parameters(4) = New SqlParameter("@PosicionInicial", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, posicionInicial)
			parameters(5) = New SqlParameter("@MaximoTamaño", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, maximoTamaño)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiqueta]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCLayoutEtiquetas' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsclayoutEtiquetasCallBack(parte1 As System.String, parte2 As System.String, parte3 As System.String, parte4 As System.String, parte5 As System.String, parte6 As System.String, longParte1 As System.Int32, longParte2 As System.Int32, longParte3 As System.Int32, longParte4 As System.Int32, longParte5 As System.Int32,  _
longParte6 As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiquetas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="parte1">Input parameter of stored procedure</param>
		''' <param name="parte2">Input parameter of stored procedure</param>
		''' <param name="parte3">Input parameter of stored procedure</param>
		''' <param name="parte4">Input parameter of stored procedure</param>
		''' <param name="parte5">Input parameter of stored procedure</param>
		''' <param name="parte6">Input parameter of stored procedure</param>
		''' <param name="longParte1">Input parameter of stored procedure</param>
		''' <param name="longParte2">Input parameter of stored procedure</param>
		''' <param name="longParte3">Input parameter of stored procedure</param>
		''' <param name="longParte4">Input parameter of stored procedure</param>
		''' <param name="longParte5">Input parameter of stored procedure</param>
		''' <param name="longParte6">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiquetas(parte1 As System.String, parte2 As System.String, parte3 As System.String, parte4 As System.String, parte5 As System.String, parte6 As System.String, longParte1 As System.Int32, longParte2 As System.Int32, longParte3 As System.Int32, longParte4 As System.Int32, longParte5 As System.Int32,  _
longParte6 As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@Parte1", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte1)
			parameters(1) = New SqlParameter("@Parte2", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte2)
			parameters(2) = New SqlParameter("@Parte3", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte3)
			parameters(3) = New SqlParameter("@Parte4", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte4)
			parameters(4) = New SqlParameter("@Parte5", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte5)
			parameters(5) = New SqlParameter("@Parte6", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte6)
			parameters(6) = New SqlParameter("@LongParte1", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte1)
			parameters(7) = New SqlParameter("@LongParte2", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte2)
			parameters(8) = New SqlParameter("@LongParte3", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte3)
			parameters(9) = New SqlParameter("@LongParte4", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte4)
			parameters(10) = New SqlParameter("@LongParte5", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte5)
			parameters(11) = New SqlParameter("@LongParte6", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte6)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiquetas]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiquetas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="parte1">Input parameter of stored procedure</param>
		''' <param name="parte2">Input parameter of stored procedure</param>
		''' <param name="parte3">Input parameter of stored procedure</param>
		''' <param name="parte4">Input parameter of stored procedure</param>
		''' <param name="parte5">Input parameter of stored procedure</param>
		''' <param name="parte6">Input parameter of stored procedure</param>
		''' <param name="longParte1">Input parameter of stored procedure</param>
		''' <param name="longParte2">Input parameter of stored procedure</param>
		''' <param name="longParte3">Input parameter of stored procedure</param>
		''' <param name="longParte4">Input parameter of stored procedure</param>
		''' <param name="longParte5">Input parameter of stored procedure</param>
		''' <param name="longParte6">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiquetas(parte1 As System.String, parte2 As System.String, parte3 As System.String, parte4 As System.String, parte5 As System.String, parte6 As System.String, longParte1 As System.Int32, longParte2 As System.Int32, longParte3 As System.Int32, longParte4 As System.Int32, longParte5 As System.Int32,  _
longParte6 As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@Parte1", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte1)
			parameters(1) = New SqlParameter("@Parte2", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte2)
			parameters(2) = New SqlParameter("@Parte3", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte3)
			parameters(3) = New SqlParameter("@Parte4", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte4)
			parameters(4) = New SqlParameter("@Parte5", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte5)
			parameters(5) = New SqlParameter("@Parte6", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte6)
			parameters(6) = New SqlParameter("@LongParte1", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte1)
			parameters(7) = New SqlParameter("@LongParte2", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte2)
			parameters(8) = New SqlParameter("@LongParte3", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte3)
			parameters(9) = New SqlParameter("@LongParte4", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte4)
			parameters(10) = New SqlParameter("@LongParte5", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte5)
			parameters(11) = New SqlParameter("@LongParte6", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte6)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiquetas]", parameters, Nothing)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiquetas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="parte1">Input parameter of stored procedure</param>
		''' <param name="parte2">Input parameter of stored procedure</param>
		''' <param name="parte3">Input parameter of stored procedure</param>
		''' <param name="parte4">Input parameter of stored procedure</param>
		''' <param name="parte5">Input parameter of stored procedure</param>
		''' <param name="parte6">Input parameter of stored procedure</param>
		''' <param name="longParte1">Input parameter of stored procedure</param>
		''' <param name="longParte2">Input parameter of stored procedure</param>
		''' <param name="longParte3">Input parameter of stored procedure</param>
		''' <param name="longParte4">Input parameter of stored procedure</param>
		''' <param name="longParte5">Input parameter of stored procedure</param>
		''' <param name="longParte6">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiquetas(parte1 As System.String, parte2 As System.String, parte3 As System.String, parte4 As System.String, parte5 As System.String, parte6 As System.String, longParte1 As System.Int32, longParte2 As System.Int32, longParte3 As System.Int32, longParte4 As System.Int32, longParte5 As System.Int32,  _
longParte6 As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@Parte1", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte1)
			parameters(1) = New SqlParameter("@Parte2", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte2)
			parameters(2) = New SqlParameter("@Parte3", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte3)
			parameters(3) = New SqlParameter("@Parte4", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte4)
			parameters(4) = New SqlParameter("@Parte5", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte5)
			parameters(5) = New SqlParameter("@Parte6", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte6)
			parameters(6) = New SqlParameter("@LongParte1", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte1)
			parameters(7) = New SqlParameter("@LongParte2", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte2)
			parameters(8) = New SqlParameter("@LongParte3", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte3)
			parameters(9) = New SqlParameter("@LongParte4", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte4)
			parameters(10) = New SqlParameter("@LongParte5", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte5)
			parameters(11) = New SqlParameter("@LongParte6", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte6)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiquetas]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLayoutEtiquetas'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="parte1">Input parameter of stored procedure</param>
		''' <param name="parte2">Input parameter of stored procedure</param>
		''' <param name="parte3">Input parameter of stored procedure</param>
		''' <param name="parte4">Input parameter of stored procedure</param>
		''' <param name="parte5">Input parameter of stored procedure</param>
		''' <param name="parte6">Input parameter of stored procedure</param>
		''' <param name="longParte1">Input parameter of stored procedure</param>
		''' <param name="longParte2">Input parameter of stored procedure</param>
		''' <param name="longParte3">Input parameter of stored procedure</param>
		''' <param name="longParte4">Input parameter of stored procedure</param>
		''' <param name="longParte5">Input parameter of stored procedure</param>
		''' <param name="longParte6">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclayoutEtiquetas(parte1 As System.String, parte2 As System.String, parte3 As System.String, parte4 As System.String, parte5 As System.String, parte6 As System.String, longParte1 As System.Int32, longParte2 As System.Int32, longParte3 As System.Int32, longParte4 As System.Int32, longParte5 As System.Int32,  _
longParte6 As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@Parte1", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte1)
			parameters(1) = New SqlParameter("@Parte2", SqlDbType.Char, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte2)
			parameters(2) = New SqlParameter("@Parte3", SqlDbType.Char, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte3)
			parameters(3) = New SqlParameter("@Parte4", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte4)
			parameters(4) = New SqlParameter("@Parte5", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte5)
			parameters(5) = New SqlParameter("@Parte6", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, parte6)
			parameters(6) = New SqlParameter("@LongParte1", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte1)
			parameters(7) = New SqlParameter("@LongParte2", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte2)
			parameters(8) = New SqlParameter("@LongParte3", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte3)
			parameters(9) = New SqlParameter("@LongParte4", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte4)
			parameters(10) = New SqlParameter("@LongParte5", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte5)
			parameters(11) = New SqlParameter("@LongParte6", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, longParte6)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLayoutEtiquetas]", parameters, transactionToUse)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCLoteCortesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscloteCortesCabCallBack(idLoteFapsa As System.String, fechaCorte As System.DateTime, idCliente As System.Int32, fechaCad As System.DateTime, diasCad As System.Int32, totalPzas As System.Decimal, totalKgs As System.Decimal, consecEtiquetas As System.Decimal, observaciones As System.String, estatus As System.String, fechaCierre As System.DateTime,  _
fechaCancela As System.DateTime, motivoCancela As System.String, fechaCaptura As System.DateTime, idUsuarioCancela As System.Int32, observacionesCancela As System.String, folCorPza As System.String, fechaFapsa As System.DateTime, nopiezas As System.Int32, producto As System.Int32, unidad As System.String, conductor As System.String,  _
placas As System.String, horaviaje As System.Decimal, idproveedor As System.Int32, cvelugcom As System.Int32, cvecomprador As System.Int32, observacioneslote As System.String, kilosRecibidos As System.Decimal, nofactura As System.String, importe As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLoteCorte As System.String, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">InputOutput parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaCad">Input parameter of stored procedure</param>
		''' <param name="diasCad">Input parameter of stored procedure</param>
		''' <param name="totalPzas">Input parameter of stored procedure</param>
		''' <param name="totalKgs">Input parameter of stored procedure</param>
		''' <param name="consecEtiquetas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="fechaCancela">Input parameter of stored procedure</param>
		''' <param name="motivoCancela">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="observacionesCancela">Input parameter of stored procedure</param>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fechaFapsa">Input parameter of stored procedure</param>
		''' <param name="nopiezas">Input parameter of stored procedure</param>
		''' <param name="producto">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="horaviaje">Input parameter of stored procedure</param>
		''' <param name="idproveedor">Input parameter of stored procedure</param>
		''' <param name="cvelugcom">Input parameter of stored procedure</param>
		''' <param name="cvecomprador">Input parameter of stored procedure</param>
		''' <param name="observacioneslote">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="nofactura">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesCab(idLoteFapsa As System.String, fechaCorte As System.DateTime, idCliente As System.Int32, fechaCad As System.DateTime, diasCad As System.Int32, totalPzas As System.Decimal, totalKgs As System.Decimal, consecEtiquetas As System.Decimal, observaciones As System.String, estatus As System.String, fechaCierre As System.DateTime,  _
fechaCancela As System.DateTime, motivoCancela As System.String, fechaCaptura As System.DateTime, idUsuarioCancela As System.Int32, observacionesCancela As System.String, folCorPza As System.String, fechaFapsa As System.DateTime, nopiezas As System.Int32, producto As System.Int32, unidad As System.String, conductor As System.String,  _
placas As System.String, horaviaje As System.Decimal, idproveedor As System.Int32, cvelugcom As System.Int32, cvecomprador As System.Int32, observacioneslote As System.String, kilosRecibidos As System.Decimal, nofactura As System.String, importe As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLoteCorte As System.String) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(34 - 1) {}
			parameters(1) = New SqlParameter("@IdLoteFapsa", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(2) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(3) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(4) = New SqlParameter("@FechaCad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCad)
			parameters(5) = New SqlParameter("@DiasCad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, diasCad)
			parameters(6) = New SqlParameter("@TotalPzas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalPzas)
			parameters(7) = New SqlParameter("@TotalKgs", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKgs)
			parameters(8) = New SqlParameter("@ConsecEtiquetas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecEtiquetas)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(12) = New SqlParameter("@FechaCancela", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancela)
			parameters(13) = New SqlParameter("@MotivoCancela", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCancela)
			parameters(14) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(15) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(16) = New SqlParameter("@ObservacionesCancela", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancela)
			parameters(17) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(18) = New SqlParameter("@FechaFapsa", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFapsa)
			parameters(19) = New SqlParameter("@Nopiezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, nopiezas)
			parameters(20) = New SqlParameter("@Producto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, producto)
			parameters(21) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(22) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(23) = New SqlParameter("@Placas", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(24) = New SqlParameter("@Horaviaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horaviaje)
			parameters(25) = New SqlParameter("@Idproveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idproveedor)
			parameters(26) = New SqlParameter("@Cvelugcom", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvelugcom)
			parameters(27) = New SqlParameter("@Cvecomprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvecomprador)
			parameters(28) = New SqlParameter("@Observacioneslote", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneslote)
			parameters(29) = New SqlParameter("@KilosRecibidos", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(30) = New SqlParameter("@Nofactura", SqlDbType.Char, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nofactura)
			parameters(31) = New SqlParameter("@Importe", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, importe)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 9, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLoteCorte = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">InputOutput parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaCad">Input parameter of stored procedure</param>
		''' <param name="diasCad">Input parameter of stored procedure</param>
		''' <param name="totalPzas">Input parameter of stored procedure</param>
		''' <param name="totalKgs">Input parameter of stored procedure</param>
		''' <param name="consecEtiquetas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="fechaCancela">Input parameter of stored procedure</param>
		''' <param name="motivoCancela">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="observacionesCancela">Input parameter of stored procedure</param>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fechaFapsa">Input parameter of stored procedure</param>
		''' <param name="nopiezas">Input parameter of stored procedure</param>
		''' <param name="producto">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="horaviaje">Input parameter of stored procedure</param>
		''' <param name="idproveedor">Input parameter of stored procedure</param>
		''' <param name="cvelugcom">Input parameter of stored procedure</param>
		''' <param name="cvecomprador">Input parameter of stored procedure</param>
		''' <param name="observacioneslote">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="nofactura">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesCab(idLoteFapsa As System.String, fechaCorte As System.DateTime, idCliente As System.Int32, fechaCad As System.DateTime, diasCad As System.Int32, totalPzas As System.Decimal, totalKgs As System.Decimal, consecEtiquetas As System.Decimal, observaciones As System.String, estatus As System.String, fechaCierre As System.DateTime,  _
fechaCancela As System.DateTime, motivoCancela As System.String, fechaCaptura As System.DateTime, idUsuarioCancela As System.Int32, observacionesCancela As System.String, folCorPza As System.String, fechaFapsa As System.DateTime, nopiezas As System.Int32, producto As System.Int32, unidad As System.String, conductor As System.String,  _
placas As System.String, horaviaje As System.Decimal, idproveedor As System.Int32, cvelugcom As System.Int32, cvecomprador As System.Int32, observacioneslote As System.String, kilosRecibidos As System.Decimal, nofactura As System.String, importe As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLoteCorte As System.String, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(34) {}
			parameters(1) = New SqlParameter("@IdLoteFapsa", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(2) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(3) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(4) = New SqlParameter("@FechaCad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCad)
			parameters(5) = New SqlParameter("@DiasCad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, diasCad)
			parameters(6) = New SqlParameter("@TotalPzas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalPzas)
			parameters(7) = New SqlParameter("@TotalKgs", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKgs)
			parameters(8) = New SqlParameter("@ConsecEtiquetas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecEtiquetas)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(12) = New SqlParameter("@FechaCancela", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancela)
			parameters(13) = New SqlParameter("@MotivoCancela", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCancela)
			parameters(14) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(15) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(16) = New SqlParameter("@ObservacionesCancela", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancela)
			parameters(17) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(18) = New SqlParameter("@FechaFapsa", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFapsa)
			parameters(19) = New SqlParameter("@Nopiezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, nopiezas)
			parameters(20) = New SqlParameter("@Producto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, producto)
			parameters(21) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(22) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(23) = New SqlParameter("@Placas", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(24) = New SqlParameter("@Horaviaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horaviaje)
			parameters(25) = New SqlParameter("@Idproveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idproveedor)
			parameters(26) = New SqlParameter("@Cvelugcom", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvelugcom)
			parameters(27) = New SqlParameter("@Cvecomprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvecomprador)
			parameters(28) = New SqlParameter("@Observacioneslote", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneslote)
			parameters(29) = New SqlParameter("@KilosRecibidos", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(30) = New SqlParameter("@Nofactura", SqlDbType.Char, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nofactura)
			parameters(31) = New SqlParameter("@Importe", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, importe)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 9, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			' Return value parameter
			parameters(34) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesCab]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLoteCorte = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(34).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">InputOutput parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaCad">Input parameter of stored procedure</param>
		''' <param name="diasCad">Input parameter of stored procedure</param>
		''' <param name="totalPzas">Input parameter of stored procedure</param>
		''' <param name="totalKgs">Input parameter of stored procedure</param>
		''' <param name="consecEtiquetas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="fechaCancela">Input parameter of stored procedure</param>
		''' <param name="motivoCancela">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="observacionesCancela">Input parameter of stored procedure</param>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fechaFapsa">Input parameter of stored procedure</param>
		''' <param name="nopiezas">Input parameter of stored procedure</param>
		''' <param name="producto">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="horaviaje">Input parameter of stored procedure</param>
		''' <param name="idproveedor">Input parameter of stored procedure</param>
		''' <param name="cvelugcom">Input parameter of stored procedure</param>
		''' <param name="cvecomprador">Input parameter of stored procedure</param>
		''' <param name="observacioneslote">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="nofactura">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesCab(idLoteFapsa As System.String, fechaCorte As System.DateTime, idCliente As System.Int32, fechaCad As System.DateTime, diasCad As System.Int32, totalPzas As System.Decimal, totalKgs As System.Decimal, consecEtiquetas As System.Decimal, observaciones As System.String, estatus As System.String, fechaCierre As System.DateTime,  _
fechaCancela As System.DateTime, motivoCancela As System.String, fechaCaptura As System.DateTime, idUsuarioCancela As System.Int32, observacionesCancela As System.String, folCorPza As System.String, fechaFapsa As System.DateTime, nopiezas As System.Int32, producto As System.Int32, unidad As System.String, conductor As System.String,  _
placas As System.String, horaviaje As System.Decimal, idproveedor As System.Int32, cvelugcom As System.Int32, cvecomprador As System.Int32, observacioneslote As System.String, kilosRecibidos As System.Decimal, nofactura As System.String, importe As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLoteCorte As System.String, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(34 - 1) {}
			parameters(1) = New SqlParameter("@IdLoteFapsa", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(2) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(3) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(4) = New SqlParameter("@FechaCad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCad)
			parameters(5) = New SqlParameter("@DiasCad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, diasCad)
			parameters(6) = New SqlParameter("@TotalPzas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalPzas)
			parameters(7) = New SqlParameter("@TotalKgs", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKgs)
			parameters(8) = New SqlParameter("@ConsecEtiquetas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecEtiquetas)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(12) = New SqlParameter("@FechaCancela", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancela)
			parameters(13) = New SqlParameter("@MotivoCancela", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCancela)
			parameters(14) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(15) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(16) = New SqlParameter("@ObservacionesCancela", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancela)
			parameters(17) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(18) = New SqlParameter("@FechaFapsa", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFapsa)
			parameters(19) = New SqlParameter("@Nopiezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, nopiezas)
			parameters(20) = New SqlParameter("@Producto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, producto)
			parameters(21) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(22) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(23) = New SqlParameter("@Placas", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(24) = New SqlParameter("@Horaviaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horaviaje)
			parameters(25) = New SqlParameter("@Idproveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idproveedor)
			parameters(26) = New SqlParameter("@Cvelugcom", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvelugcom)
			parameters(27) = New SqlParameter("@Cvecomprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvecomprador)
			parameters(28) = New SqlParameter("@Observacioneslote", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneslote)
			parameters(29) = New SqlParameter("@KilosRecibidos", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(30) = New SqlParameter("@Nofactura", SqlDbType.Char, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nofactura)
			parameters(31) = New SqlParameter("@Importe", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, importe)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 9, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLoteCorte = CType(parameters(0).Value, System.String)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">InputOutput parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaCorte">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="fechaCad">Input parameter of stored procedure</param>
		''' <param name="diasCad">Input parameter of stored procedure</param>
		''' <param name="totalPzas">Input parameter of stored procedure</param>
		''' <param name="totalKgs">Input parameter of stored procedure</param>
		''' <param name="consecEtiquetas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCierre">Input parameter of stored procedure</param>
		''' <param name="fechaCancela">Input parameter of stored procedure</param>
		''' <param name="motivoCancela">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancela">Input parameter of stored procedure</param>
		''' <param name="observacionesCancela">Input parameter of stored procedure</param>
		''' <param name="folCorPza">Input parameter of stored procedure</param>
		''' <param name="fechaFapsa">Input parameter of stored procedure</param>
		''' <param name="nopiezas">Input parameter of stored procedure</param>
		''' <param name="producto">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="horaviaje">Input parameter of stored procedure</param>
		''' <param name="idproveedor">Input parameter of stored procedure</param>
		''' <param name="cvelugcom">Input parameter of stored procedure</param>
		''' <param name="cvecomprador">Input parameter of stored procedure</param>
		''' <param name="observacioneslote">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="nofactura">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesCab(idLoteFapsa As System.String, fechaCorte As System.DateTime, idCliente As System.Int32, fechaCad As System.DateTime, diasCad As System.Int32, totalPzas As System.Decimal, totalKgs As System.Decimal, consecEtiquetas As System.Decimal, observaciones As System.String, estatus As System.String, fechaCierre As System.DateTime,  _
fechaCancela As System.DateTime, motivoCancela As System.String, fechaCaptura As System.DateTime, idUsuarioCancela As System.Int32, observacionesCancela As System.String, folCorPza As System.String, fechaFapsa As System.DateTime, nopiezas As System.Int32, producto As System.Int32, unidad As System.String, conductor As System.String,  _
placas As System.String, horaviaje As System.Decimal, idproveedor As System.Int32, cvelugcom As System.Int32, cvecomprador As System.Int32, observacioneslote As System.String, kilosRecibidos As System.Decimal, nofactura As System.String, importe As System.Decimal, func As System.String, numOpc As System.Int32 _
, ByRef idLoteCorte As System.String, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(34) {}
			parameters(1) = New SqlParameter("@IdLoteFapsa", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(2) = New SqlParameter("@FechaCorte", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCorte)
			parameters(3) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(4) = New SqlParameter("@FechaCad", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCad)
			parameters(5) = New SqlParameter("@DiasCad", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, diasCad)
			parameters(6) = New SqlParameter("@TotalPzas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalPzas)
			parameters(7) = New SqlParameter("@TotalKgs", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKgs)
			parameters(8) = New SqlParameter("@ConsecEtiquetas", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, consecEtiquetas)
			parameters(9) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@FechaCierre", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCierre)
			parameters(12) = New SqlParameter("@FechaCancela", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancela)
			parameters(13) = New SqlParameter("@MotivoCancela", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCancela)
			parameters(14) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(15) = New SqlParameter("@IdUsuarioCancela", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancela)
			parameters(16) = New SqlParameter("@ObservacionesCancela", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancela)
			parameters(17) = New SqlParameter("@Fol_CorPza", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folCorPza)
			parameters(18) = New SqlParameter("@FechaFapsa", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFapsa)
			parameters(19) = New SqlParameter("@Nopiezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, nopiezas)
			parameters(20) = New SqlParameter("@Producto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, producto)
			parameters(21) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(22) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(23) = New SqlParameter("@Placas", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(24) = New SqlParameter("@Horaviaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horaviaje)
			parameters(25) = New SqlParameter("@Idproveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idproveedor)
			parameters(26) = New SqlParameter("@Cvelugcom", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvelugcom)
			parameters(27) = New SqlParameter("@Cvecomprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cvecomprador)
			parameters(28) = New SqlParameter("@Observacioneslote", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacioneslote)
			parameters(29) = New SqlParameter("@KilosRecibidos", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(30) = New SqlParameter("@Nofactura", SqlDbType.Char, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nofactura)
			parameters(31) = New SqlParameter("@Importe", SqlDbType.Decimal, 0, ParameterDirection.Input, True, 18, 0, "",  DataRowVersion.Current, importe)
			parameters(32) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(33) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 9, ParameterDirection.InputOutput, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			' Return value parameter
			parameters(34) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesCab]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idLoteCorte = CType(parameters(0).Value, System.String)
			End If

			returnValue = CType(parameters(34).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCLoteCortesDetFolios' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscloteCortesDetFoliosCallBack(idLoteCorte As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesDetFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesDetFolios(idLoteCorte As System.String, ByRef consecutivo As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(1) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesDetFolios]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesDetFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesDetFolios(idLoteCorte As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(1) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesDetFolios]", parameters, Nothing)
			If Not parameters(1).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesDetFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesDetFolios(idLoteCorte As System.String, ByRef consecutivo As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(2 - 1) {}
			parameters(0) = New SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(1) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesDetFolios]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(1).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLoteCortesDetFolios'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="consecutivo">InputOutput parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscloteCortesDetFolios(idLoteCorte As System.String, ByRef consecutivo As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(2) {}
			parameters(0) = New SqlParameter("@IdLoteCorte", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(1) = new SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			' Return value parameter
			parameters(2) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLoteCortesDetFolios]", parameters, transactionToUse)
			If Not parameters(1).Value Is System.DBNull.Value Then
				consecutivo = CType(parameters(1).Value, System.Int32)
			End If

			returnValue = CType(parameters(2).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCLotesCanales' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsclotesCanalesCallBack(idFolioSacrificio As System.String, idFolioCanal As System.String, idFolioLote As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, fechaLote As System.DateTime, codCliente As System.Int32, codRastro As System.Int32, kgrsRecibidos As System.Decimal, lado As System.Decimal, estatus As System.String,  _
func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCLotesCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaLote">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclotesCanales(idFolioSacrificio As System.String, idFolioCanal As System.String, idFolioLote As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, fechaLote As System.DateTime, codCliente As System.Int32, codRastro As System.Int32, kgrsRecibidos As System.Decimal, lado As System.Decimal, estatus As System.String,  _
func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioSacrificio)
			parameters(1) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaLote", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaLote)
			parameters(6) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(7) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(8) = New SqlParameter("@KgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRecibidos)
			parameters(9) = New SqlParameter("@Lado", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, lado)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLotesCanales]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLotesCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaLote">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclotesCanales(idFolioSacrificio As System.String, idFolioCanal As System.String, idFolioLote As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, fechaLote As System.DateTime, codCliente As System.Int32, codRastro As System.Int32, kgrsRecibidos As System.Decimal, lado As System.Decimal, estatus As System.String,  _
func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@IdFolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioSacrificio)
			parameters(1) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaLote", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaLote)
			parameters(6) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(7) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(8) = New SqlParameter("@KgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRecibidos)
			parameters(9) = New SqlParameter("@Lado", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, lado)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLotesCanales]", parameters, Nothing)


			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLotesCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaLote">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclotesCanales(idFolioSacrificio As System.String, idFolioCanal As System.String, idFolioLote As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, fechaLote As System.DateTime, codCliente As System.Int32, codRastro As System.Int32, kgrsRecibidos As System.Decimal, lado As System.Decimal, estatus As System.String,  _
func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioSacrificio)
			parameters(1) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaLote", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaLote)
			parameters(6) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(7) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(8) = New SqlParameter("@KgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRecibidos)
			parameters(9) = New SqlParameter("@Lado", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, lado)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLotesCanales]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCLotesCanales'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="idFolioLote">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaLote">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsclotesCanales(idFolioSacrificio As System.String, idFolioCanal As System.String, idFolioLote As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, fechaLote As System.DateTime, codCliente As System.Int32, codRastro As System.Int32, kgrsRecibidos As System.Decimal, lado As System.Decimal, estatus As System.String,  _
func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@IdFolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioSacrificio)
			parameters(1) = New SqlParameter("@IdFolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(2) = New SqlParameter("@IdFolioLote", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioLote)
			parameters(3) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@FechaLote", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaLote)
			parameters(6) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(7) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(8) = New SqlParameter("@KgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRecibidos)
			parameters(9) = New SqlParameter("@Lado", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, lado)
			parameters(10) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCLotesCanales]", parameters, transactionToUse)


			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCMovtosAlmacenCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscmovtosAlmacenCabCallBack(idFolioMovimiento As System.String, idCodAlmacen As System.Int32, fechaMovimiento As System.DateTime, fechaCaptura As System.DateTime, idCodMovimiento As System.Int32, cantPzas As System.Int32, cantKilos As System.Decimal, estatus As System.String, contabilizado As System.String, fechaContabilizacion As System.DateTime, idPoliza As System.String,  _
quienContabilizo As System.String, fechaCancelacion As System.DateTime, quienCancelo As System.String, observacionCancela As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="fechaMovimiento">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idCodMovimiento">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="quienContabilizo">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="quienCancelo">Input parameter of stored procedure</param>
		''' <param name="observacionCancela">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenCab(idFolioMovimiento As System.String, idCodAlmacen As System.Int32, fechaMovimiento As System.DateTime, fechaCaptura As System.DateTime, idCodMovimiento As System.Int32, cantPzas As System.Int32, cantKilos As System.Decimal, estatus As System.String, contabilizado As System.String, fechaContabilizacion As System.DateTime, idPoliza As System.String,  _
quienContabilizo As System.String, fechaCancelacion As System.DateTime, quienCancelo As System.String, observacionCancela As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(17 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(2) = New SqlParameter("@FechaMovimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaMovimiento)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@IdCodMovimiento", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodMovimiento)
			parameters(5) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(6) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(9) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(10) = New SqlParameter("@IdPoliza", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(11) = New SqlParameter("@QuienContabilizo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienContabilizo)
			parameters(12) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(13) = New SqlParameter("@QuienCancelo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienCancelo)
			parameters(14) = New SqlParameter("@ObservacionCancela", SqlDbType.Char, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionCancela)
			parameters(15) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(16) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="fechaMovimiento">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idCodMovimiento">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="quienContabilizo">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="quienCancelo">Input parameter of stored procedure</param>
		''' <param name="observacionCancela">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenCab(idFolioMovimiento As System.String, idCodAlmacen As System.Int32, fechaMovimiento As System.DateTime, fechaCaptura As System.DateTime, idCodMovimiento As System.Int32, cantPzas As System.Int32, cantKilos As System.Decimal, estatus As System.String, contabilizado As System.String, fechaContabilizacion As System.DateTime, idPoliza As System.String,  _
quienContabilizo As System.String, fechaCancelacion As System.DateTime, quienCancelo As System.String, observacionCancela As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(17) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(2) = New SqlParameter("@FechaMovimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaMovimiento)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@IdCodMovimiento", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodMovimiento)
			parameters(5) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(6) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(9) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(10) = New SqlParameter("@IdPoliza", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(11) = New SqlParameter("@QuienContabilizo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienContabilizo)
			parameters(12) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(13) = New SqlParameter("@QuienCancelo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienCancelo)
			parameters(14) = New SqlParameter("@ObservacionCancela", SqlDbType.Char, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionCancela)
			parameters(15) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(16) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(17) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenCab]", parameters, Nothing)


			returnValue = CType(parameters(17).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="fechaMovimiento">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idCodMovimiento">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="quienContabilizo">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="quienCancelo">Input parameter of stored procedure</param>
		''' <param name="observacionCancela">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenCab(idFolioMovimiento As System.String, idCodAlmacen As System.Int32, fechaMovimiento As System.DateTime, fechaCaptura As System.DateTime, idCodMovimiento As System.Int32, cantPzas As System.Int32, cantKilos As System.Decimal, estatus As System.String, contabilizado As System.String, fechaContabilizacion As System.DateTime, idPoliza As System.String,  _
quienContabilizo As System.String, fechaCancelacion As System.DateTime, quienCancelo As System.String, observacionCancela As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(17 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(2) = New SqlParameter("@FechaMovimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaMovimiento)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@IdCodMovimiento", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodMovimiento)
			parameters(5) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(6) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(9) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(10) = New SqlParameter("@IdPoliza", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(11) = New SqlParameter("@QuienContabilizo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienContabilizo)
			parameters(12) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(13) = New SqlParameter("@QuienCancelo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienCancelo)
			parameters(14) = New SqlParameter("@ObservacionCancela", SqlDbType.Char, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionCancela)
			parameters(15) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(16) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodAlmacen">Input parameter of stored procedure</param>
		''' <param name="fechaMovimiento">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="idCodMovimiento">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="contabilizado">Input parameter of stored procedure</param>
		''' <param name="fechaContabilizacion">Input parameter of stored procedure</param>
		''' <param name="idPoliza">Input parameter of stored procedure</param>
		''' <param name="quienContabilizo">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="quienCancelo">Input parameter of stored procedure</param>
		''' <param name="observacionCancela">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenCab(idFolioMovimiento As System.String, idCodAlmacen As System.Int32, fechaMovimiento As System.DateTime, fechaCaptura As System.DateTime, idCodMovimiento As System.Int32, cantPzas As System.Int32, cantKilos As System.Decimal, estatus As System.String, contabilizado As System.String, fechaContabilizacion As System.DateTime, idPoliza As System.String,  _
quienContabilizo As System.String, fechaCancelacion As System.DateTime, quienCancelo As System.String, observacionCancela As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(17) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodAlmacen)
			parameters(2) = New SqlParameter("@FechaMovimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaMovimiento)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@IdCodMovimiento", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodMovimiento)
			parameters(5) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(6) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Contabilizado", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, contabilizado)
			parameters(9) = New SqlParameter("@FechaContabilizacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaContabilizacion)
			parameters(10) = New SqlParameter("@IdPoliza", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idPoliza)
			parameters(11) = New SqlParameter("@QuienContabilizo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienContabilizo)
			parameters(12) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(13) = New SqlParameter("@QuienCancelo", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, quienCancelo)
			parameters(14) = New SqlParameter("@ObservacionCancela", SqlDbType.Char, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionCancela)
			parameters(15) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(16) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(17) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenCab]", parameters, transactionToUse)


			returnValue = CType(parameters(17).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCMovtosAlmacenDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscmovtosAlmacenDetCallBack(idFolioMovimiento As System.String, idCodProducto As System.Int32, cantKilos As System.Decimal, cantPzas As System.Int32, costoUnitario As System.Decimal, iva As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="costoUnitario">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, cantKilos As System.Decimal, cantPzas As System.Int32, costoUnitario As System.Decimal, iva As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(3) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(4) = New SqlParameter("@CostoUnitario", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoUnitario)
			parameters(5) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="costoUnitario">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, cantKilos As System.Decimal, cantPzas As System.Int32, costoUnitario As System.Decimal, iva As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(3) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(4) = New SqlParameter("@CostoUnitario", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoUnitario)
			parameters(5) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenDet]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="costoUnitario">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, cantKilos As System.Decimal, cantPzas As System.Int32, costoUnitario As System.Decimal, iva As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(3) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(4) = New SqlParameter("@CostoUnitario", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoUnitario)
			parameters(5) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCMovtosAlmacenDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCodProducto">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="cantPzas">Input parameter of stored procedure</param>
		''' <param name="costoUnitario">Input parameter of stored procedure</param>
		''' <param name="iva">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscmovtosAlmacenDet(idFolioMovimiento As System.String, idCodProducto As System.Int32, cantKilos As System.Decimal, cantPzas As System.Int32, costoUnitario As System.Decimal, iva As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(1) = New SqlParameter("@IdCodProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCodProducto)
			parameters(2) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(3) = New SqlParameter("@CantPzas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantPzas)
			parameters(4) = New SqlParameter("@CostoUnitario", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoUnitario)
			parameters(5) = New SqlParameter("@IVA", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, iva)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCMovtosAlmacenDet]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCPalettesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscpalettesCabCallBack(idFolioPalette As System.String, fechaElaboracion As System.DateTime, estatus As System.String, fechaCaptura As System.DateTime, destino As System.String, idCliente As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="fechaElaboracion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="destino">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesCab(idFolioPalette As System.String, fechaElaboracion As System.DateTime, estatus As System.String, fechaCaptura As System.DateTime, destino As System.String, idCliente As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@FechaElaboracion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaElaboracion)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@Destino", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, destino)
			parameters(5) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="fechaElaboracion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="destino">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesCab(idFolioPalette As System.String, fechaElaboracion As System.DateTime, estatus As System.String, fechaCaptura As System.DateTime, destino As System.String, idCliente As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@FechaElaboracion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaElaboracion)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@Destino", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, destino)
			parameters(5) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesCab]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="fechaElaboracion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="destino">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesCab(idFolioPalette As System.String, fechaElaboracion As System.DateTime, estatus As System.String, fechaCaptura As System.DateTime, destino As System.String, idCliente As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@FechaElaboracion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaElaboracion)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@Destino", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, destino)
			parameters(5) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="fechaElaboracion">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="destino">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesCab(idFolioPalette As System.String, fechaElaboracion As System.DateTime, estatus As System.String, fechaCaptura As System.DateTime, destino As System.String, idCliente As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@FechaElaboracion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaElaboracion)
			parameters(2) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@Destino", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, destino)
			parameters(5) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesCab]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCPalettesDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscpalettesDetCallBack(idFolioPalette As System.String, idFolioEtiqueta As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesDet(idFolioPalette As System.String, idFolioEtiqueta As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesDet(idFolioPalette As System.String, idFolioEtiqueta As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesDet]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesDet(idFolioPalette As System.String, idFolioEtiqueta As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCPalettesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idFolioPalette">Input parameter of stored procedure</param>
		''' <param name="idFolioEtiqueta">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscpalettesDet(idFolioPalette As System.String, idFolioEtiqueta As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdFolioPalette", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioPalette)
			parameters(1) = New SqlParameter("@IdFolioEtiqueta", SqlDbType.VarChar, 14, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioEtiqueta)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCPalettesDet]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCProductosdeComisos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscproductosdeComisosCallBack(idProducto As System.Int32, idDecomiso As System.Int32, func As System.String, opc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosdeComisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idDecomiso">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="opc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosdeComisos(idProducto As System.Int32, idDecomiso As System.Int32, func As System.String, opc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdDecomiso", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idDecomiso)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@Opc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosdeComisos]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosdeComisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idDecomiso">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="opc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosdeComisos(idProducto As System.Int32, idDecomiso As System.Int32, func As System.String, opc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdDecomiso", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idDecomiso)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@Opc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosdeComisos]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosdeComisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idDecomiso">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="opc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosdeComisos(idProducto As System.Int32, idDecomiso As System.Int32, func As System.String, opc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdDecomiso", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idDecomiso)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@Opc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosdeComisos]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosdeComisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idDecomiso">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="opc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosdeComisos(idProducto As System.Int32, idDecomiso As System.Int32, func As System.String, opc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdDecomiso", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idDecomiso)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@Opc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosdeComisos]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCProductosValorAgregado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscproductosValorAgregadoCallBack(idProducto As System.Int32, idSubCorte As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosValorAgregado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idSubCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosValorAgregado(idProducto As System.Int32, idSubCorte As System.Int32, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdSubCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idSubCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosValorAgregado]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosValorAgregado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idSubCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosValorAgregado(idProducto As System.Int32, idSubCorte As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdSubCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idSubCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosValorAgregado]", parameters, Nothing)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosValorAgregado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idSubCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosValorAgregado(idProducto As System.Int32, idSubCorte As System.Int32, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(4 - 1) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdSubCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idSubCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosValorAgregado]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCProductosValorAgregado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="idSubCorte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscproductosValorAgregado(idProducto As System.Int32, idSubCorte As System.Int32, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(4) {}
			parameters(0) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(1) = New SqlParameter("@IdSubCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idSubCorte)
			parameters(2) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(3) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(4) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCProductosValorAgregado]", parameters, transactionToUse)


			returnValue = CType(parameters(4).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCRecepcionCanalesCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscrecepcionCanalesCabCallBack(folioMovimiento As System.String, folioSacrificio As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, lotePropio As System.Boolean, codCliente As System.Int32, cantCanales As System.Int32, kgrsRastro As System.Decimal, observaciones As System.String, estatus As System.String, fechaCancelacion As System.DateTime,  _
kgrsCalientes As System.Decimal, codRastro As System.Int32, kgrsBascula As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="lotePropio">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="cantCanales">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesCab(folioMovimiento As System.String, folioSacrificio As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, lotePropio As System.Boolean, codCliente As System.Int32, cantCanales As System.Int32, kgrsRastro As System.Decimal, observaciones As System.String, estatus As System.String, fechaCancelacion As System.DateTime,  _
kgrsCalientes As System.Decimal, codRastro As System.Int32, kgrsBascula As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(16 - 1) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@LotePropio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lotePropio)
			parameters(5) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(6) = New SqlParameter("@CantCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanales)
			parameters(7) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(11) = New SqlParameter("@KgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(12) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(13) = New SqlParameter("@KgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(14) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(15) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="lotePropio">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="cantCanales">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesCab(folioMovimiento As System.String, folioSacrificio As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, lotePropio As System.Boolean, codCliente As System.Int32, cantCanales As System.Int32, kgrsRastro As System.Decimal, observaciones As System.String, estatus As System.String, fechaCancelacion As System.DateTime,  _
kgrsCalientes As System.Decimal, codRastro As System.Int32, kgrsBascula As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(16) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@LotePropio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lotePropio)
			parameters(5) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(6) = New SqlParameter("@CantCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanales)
			parameters(7) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(11) = New SqlParameter("@KgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(12) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(13) = New SqlParameter("@KgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(14) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(15) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(16) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesCab]", parameters, Nothing)


			returnValue = CType(parameters(16).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="lotePropio">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="cantCanales">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesCab(folioMovimiento As System.String, folioSacrificio As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, lotePropio As System.Boolean, codCliente As System.Int32, cantCanales As System.Int32, kgrsRastro As System.Decimal, observaciones As System.String, estatus As System.String, fechaCancelacion As System.DateTime,  _
kgrsCalientes As System.Decimal, codRastro As System.Int32, kgrsBascula As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(16 - 1) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@LotePropio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lotePropio)
			parameters(5) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(6) = New SqlParameter("@CantCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanales)
			parameters(7) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(11) = New SqlParameter("@KgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(12) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(13) = New SqlParameter("@KgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(14) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(15) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="lotePropio">Input parameter of stored procedure</param>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="cantCanales">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="codRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesCab(folioMovimiento As System.String, folioSacrificio As System.String, fechaSacrificio As System.DateTime, fechaCaptura As System.DateTime, lotePropio As System.Boolean, codCliente As System.Int32, cantCanales As System.Int32, kgrsRastro As System.Decimal, observaciones As System.String, estatus As System.String, fechaCancelacion As System.DateTime,  _
kgrsCalientes As System.Decimal, codRastro As System.Int32, kgrsBascula As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(16) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(3) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(4) = New SqlParameter("@LotePropio", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lotePropio)
			parameters(5) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(6) = New SqlParameter("@CantCanales", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanales)
			parameters(7) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(8) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(9) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(10) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(11) = New SqlParameter("@KgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(12) = New SqlParameter("@CodRastro", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codRastro)
			parameters(13) = New SqlParameter("@KgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(14) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(15) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(16) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesCab]", parameters, transactionToUse)


			returnValue = CType(parameters(16).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCRecepcionCanalesDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscrecepcionCanalesDetCallBack(folioMovimiento As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int16, kgrsRastro As System.Decimal, kgrsBascula As System.Decimal, kgrsCalientes As System.Decimal, estatus As System.String, idFolioMovimiento As System.String, idCliente As System.Int32, sexo As System.Int16,  _
consecutivo As System.Int32, codigoBarra As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="sexo">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="codigoBarra">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesDet(folioMovimiento As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int16, kgrsRastro As System.Decimal, kgrsBascula As System.Decimal, kgrsCalientes As System.Decimal, estatus As System.String, idFolioMovimiento As System.String, idCliente As System.Int32, sexo As System.Int16,  _
consecutivo As System.Int32, codigoBarra As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(5) = New SqlParameter("@kgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(6) = New SqlParameter("@kgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(9) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(10) = New SqlParameter("@Sexo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, sexo)
			parameters(11) = New SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			parameters(12) = New SqlParameter("@CodigoBarra", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoBarra)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="sexo">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="codigoBarra">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesDet(folioMovimiento As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int16, kgrsRastro As System.Decimal, kgrsBascula As System.Decimal, kgrsCalientes As System.Decimal, estatus As System.String, idFolioMovimiento As System.String, idCliente As System.Int32, sexo As System.Int16,  _
consecutivo As System.Int32, codigoBarra As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(5) = New SqlParameter("@kgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(6) = New SqlParameter("@kgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(9) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(10) = New SqlParameter("@Sexo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, sexo)
			parameters(11) = New SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			parameters(12) = New SqlParameter("@CodigoBarra", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoBarra)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesDet]", parameters, Nothing)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="sexo">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="codigoBarra">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesDet(folioMovimiento As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int16, kgrsRastro As System.Decimal, kgrsBascula As System.Decimal, kgrsCalientes As System.Decimal, estatus As System.String, idFolioMovimiento As System.String, idCliente As System.Int32, sexo As System.Int16,  _
consecutivo As System.Int32, codigoBarra As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(15 - 1) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(5) = New SqlParameter("@kgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(6) = New SqlParameter("@kgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(9) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(10) = New SqlParameter("@Sexo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, sexo)
			parameters(11) = New SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			parameters(12) = New SqlParameter("@CodigoBarra", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoBarra)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRecepcionCanalesDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioMovimiento">Input parameter of stored procedure</param>
		''' <param name="folioSacrificio">Input parameter of stored procedure</param>
		''' <param name="idFolioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kgrsRastro">Input parameter of stored procedure</param>
		''' <param name="kgrsBascula">Input parameter of stored procedure</param>
		''' <param name="kgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="idFolioMovimiento">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="sexo">Input parameter of stored procedure</param>
		''' <param name="consecutivo">Input parameter of stored procedure</param>
		''' <param name="codigoBarra">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrecepcionCanalesDet(folioMovimiento As System.String, folioSacrificio As System.String, idFolioCanal As System.String, lado As System.Int16, kgrsRastro As System.Decimal, kgrsBascula As System.Decimal, kgrsCalientes As System.Decimal, estatus As System.String, idFolioMovimiento As System.String, idCliente As System.Int32, sexo As System.Int16,  _
consecutivo As System.Int32, codigoBarra As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(15) {}
			parameters(0) = New SqlParameter("@FolioMovimiento", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMovimiento)
			parameters(1) = New SqlParameter("@FolioSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSacrificio)
			parameters(2) = New SqlParameter("@IdFolioCanal", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioCanal)
			parameters(3) = New SqlParameter("@Lado", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, lado)
			parameters(4) = New SqlParameter("@KgrsRastro", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsRastro)
			parameters(5) = New SqlParameter("@kgrsBascula", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsBascula)
			parameters(6) = New SqlParameter("@kgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kgrsCalientes)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@IdFolioMovimiento", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idFolioMovimiento)
			parameters(9) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(10) = New SqlParameter("@Sexo", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, sexo)
			parameters(11) = New SqlParameter("@Consecutivo", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, consecutivo)
			parameters(12) = New SqlParameter("@CodigoBarra", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codigoBarra)
			parameters(13) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(14) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(15) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRecepcionCanalesDet]", parameters, transactionToUse)


			returnValue = CType(parameters(15).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCRegistroSacrificioDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscregistroSacrificioDetCallBack(idSacrificio As System.String, folioCanal As System.String, lado As System.Int32, cantKgrsCalientes As System.Decimal, cantKgrsFapsa As System.Decimal, cantKgrsRecibidos As System.Decimal, estatus As System.String, folioSalidaGanado As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCRegistroSacrificioDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="cantKgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="cantKgrsFapsa">Input parameter of stored procedure</param>
		''' <param name="cantKgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscregistroSacrificioDet(idSacrificio As System.String, folioCanal As System.String, lado As System.Int32, cantKgrsCalientes As System.Decimal, cantKgrsFapsa As System.Decimal, cantKgrsRecibidos As System.Decimal, estatus As System.String, folioSalidaGanado As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@CantKgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsCalientes)
			parameters(4) = New SqlParameter("@CantKgrsFapsa", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsFapsa)
			parameters(5) = New SqlParameter("@CantKgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsRecibidos)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FolioSalidaGanado", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRegistroSacrificioDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRegistroSacrificioDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="cantKgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="cantKgrsFapsa">Input parameter of stored procedure</param>
		''' <param name="cantKgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscregistroSacrificioDet(idSacrificio As System.String, folioCanal As System.String, lado As System.Int32, cantKgrsCalientes As System.Decimal, cantKgrsFapsa As System.Decimal, cantKgrsRecibidos As System.Decimal, estatus As System.String, folioSalidaGanado As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@CantKgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsCalientes)
			parameters(4) = New SqlParameter("@CantKgrsFapsa", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsFapsa)
			parameters(5) = New SqlParameter("@CantKgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsRecibidos)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FolioSalidaGanado", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRegistroSacrificioDet]", parameters, Nothing)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRegistroSacrificioDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="cantKgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="cantKgrsFapsa">Input parameter of stored procedure</param>
		''' <param name="cantKgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscregistroSacrificioDet(idSacrificio As System.String, folioCanal As System.String, lado As System.Int32, cantKgrsCalientes As System.Decimal, cantKgrsFapsa As System.Decimal, cantKgrsRecibidos As System.Decimal, estatus As System.String, folioSalidaGanado As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@IdSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@CantKgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsCalientes)
			parameters(4) = New SqlParameter("@CantKgrsFapsa", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsFapsa)
			parameters(5) = New SqlParameter("@CantKgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsRecibidos)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FolioSalidaGanado", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRegistroSacrificioDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRegistroSacrificioDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="cantKgrsCalientes">Input parameter of stored procedure</param>
		''' <param name="cantKgrsFapsa">Input parameter of stored procedure</param>
		''' <param name="cantKgrsRecibidos">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscregistroSacrificioDet(idSacrificio As System.String, folioCanal As System.String, lado As System.Int32, cantKgrsCalientes As System.Decimal, cantKgrsFapsa As System.Decimal, cantKgrsRecibidos As System.Decimal, estatus As System.String, folioSalidaGanado As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@IdSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, idSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@CantKgrsCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsCalientes)
			parameters(4) = New SqlParameter("@CantKgrsFapsa", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsFapsa)
			parameters(5) = New SqlParameter("@CantKgrsRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsRecibidos)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FolioSalidaGanado", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRegistroSacrificioDet]", parameters, transactionToUse)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCRelacionCortesClientes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscrelacionCortesClientesCallBack(codCliente As System.Int32, codCorte As System.Int32, codCorteCliente As System.String, descripcion As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCRelacionCortesClientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codCorte">Input parameter of stored procedure</param>
		''' <param name="codCorteCliente">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrelacionCortesClientes(codCliente As System.Int32, codCorte As System.Int32, codCorteCliente As System.String, descripcion As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(1) = New SqlParameter("@CodCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCorte)
			parameters(2) = New SqlParameter("@CodCorteCliente", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codCorteCliente)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRelacionCortesClientes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRelacionCortesClientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codCorte">Input parameter of stored procedure</param>
		''' <param name="codCorteCliente">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrelacionCortesClientes(codCliente As System.Int32, codCorte As System.Int32, codCorteCliente As System.String, descripcion As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(1) = New SqlParameter("@CodCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCorte)
			parameters(2) = New SqlParameter("@CodCorteCliente", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codCorteCliente)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRelacionCortesClientes]", parameters, Nothing)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRelacionCortesClientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codCorte">Input parameter of stored procedure</param>
		''' <param name="codCorteCliente">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrelacionCortesClientes(codCliente As System.Int32, codCorte As System.Int32, codCorteCliente As System.String, descripcion As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(1) = New SqlParameter("@CodCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCorte)
			parameters(2) = New SqlParameter("@CodCorteCliente", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codCorteCliente)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRelacionCortesClientes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCRelacionCortesClientes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="codCliente">Input parameter of stored procedure</param>
		''' <param name="codCorte">Input parameter of stored procedure</param>
		''' <param name="codCorteCliente">Input parameter of stored procedure</param>
		''' <param name="descripcion">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscrelacionCortesClientes(codCliente As System.Int32, codCorte As System.Int32, codCorteCliente As System.String, descripcion As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@CodCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCliente)
			parameters(1) = New SqlParameter("@CodCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codCorte)
			parameters(2) = New SqlParameter("@CodCorteCliente", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codCorteCliente)
			parameters(3) = New SqlParameter("@Descripcion", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, descripcion)
			parameters(4) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(5) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCRelacionCortesClientes]", parameters, transactionToUse)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCReporteLotes' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscreporteLotesCallBack(opcion As System.Int32, detalle As System.Int32, idLoteCorte As System.Int32, idLoteFapsa As System.Int32, fechaInicial As System.DateTime, fechaFinal As System.DateTime, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCReporteLotes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="detalle">Input parameter of stored procedure</param>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaInicial">Input parameter of stored procedure</param>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscreporteLotes(opcion As System.Int32, detalle As System.Int32, idLoteCorte As System.Int32, idLoteFapsa As System.Int32, fechaInicial As System.DateTime, fechaFinal As System.DateTime) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@Detalle", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, detalle)
			parameters(2) = New SqlParameter("@IdLoteCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(3) = New SqlParameter("@IdLoteFapsa", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(4) = New SqlParameter("@FechaInicial", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicial)
			parameters(5) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCReporteLotes]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCReporteLotes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="detalle">Input parameter of stored procedure</param>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaInicial">Input parameter of stored procedure</param>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscreporteLotes(opcion As System.Int32, detalle As System.Int32, idLoteCorte As System.Int32, idLoteFapsa As System.Int32, fechaInicial As System.DateTime, fechaFinal As System.DateTime, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@Detalle", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, detalle)
			parameters(2) = New SqlParameter("@IdLoteCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(3) = New SqlParameter("@IdLoteFapsa", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(4) = New SqlParameter("@FechaInicial", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicial)
			parameters(5) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCReporteLotes]", parameters, Nothing)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCReporteLotes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="detalle">Input parameter of stored procedure</param>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaInicial">Input parameter of stored procedure</param>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscreporteLotes(opcion As System.Int32, detalle As System.Int32, idLoteCorte As System.Int32, idLoteFapsa As System.Int32, fechaInicial As System.DateTime, fechaFinal As System.DateTime, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(6 - 1) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@Detalle", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, detalle)
			parameters(2) = New SqlParameter("@IdLoteCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(3) = New SqlParameter("@IdLoteFapsa", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(4) = New SqlParameter("@FechaInicial", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicial)
			parameters(5) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCReporteLotes]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCReporteLotes'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="opcion">Input parameter of stored procedure</param>
		''' <param name="detalle">Input parameter of stored procedure</param>
		''' <param name="idLoteCorte">Input parameter of stored procedure</param>
		''' <param name="idLoteFapsa">Input parameter of stored procedure</param>
		''' <param name="fechaInicial">Input parameter of stored procedure</param>
		''' <param name="fechaFinal">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscreporteLotes(opcion As System.Int32, detalle As System.Int32, idLoteCorte As System.Int32, idLoteFapsa As System.Int32, fechaInicial As System.DateTime, fechaFinal As System.DateTime, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(6) {}
			parameters(0) = New SqlParameter("@Opcion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, opcion)
			parameters(1) = New SqlParameter("@Detalle", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, detalle)
			parameters(2) = New SqlParameter("@IdLoteCorte", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteCorte)
			parameters(3) = New SqlParameter("@IdLoteFapsa", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idLoteFapsa)
			parameters(4) = New SqlParameter("@FechaInicial", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaInicial)
			parameters(5) = New SqlParameter("@FechaFinal", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaFinal)

			' Return value parameter
			parameters(6) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCReporteLotes]", parameters, transactionToUse)


			returnValue = CType(parameters(6).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCSalidasGanadoCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscsalidasGanadoCabCallBack(folioSalidaGanado As System.String, lotedeCorral As System.Int32, cantCabezas As System.Int32, cantKgrsPie As System.Decimal, codUnidadVehiculo As System.String, codChofer As System.Int32, estatus As System.String, fechaSalida As System.DateTime, fechaCaptura As System.DateTime, fechaCancelacion As System.DateTime, observaciones As System.String,  _
func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="lotedeCorral">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKgrsPie">Input parameter of stored procedure</param>
		''' <param name="codUnidadVehiculo">Input parameter of stored procedure</param>
		''' <param name="codChofer">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaSalida">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoCab(folioSalidaGanado As System.String, lotedeCorral As System.Int32, cantCabezas As System.Int32, cantKgrsPie As System.Decimal, codUnidadVehiculo As System.String, codChofer As System.Int32, estatus As System.String, fechaSalida As System.DateTime, fechaCaptura As System.DateTime, fechaCancelacion As System.DateTime, observaciones As System.String,  _
func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@LotedeCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lotedeCorral)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKgrsPie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsPie)
			parameters(4) = New SqlParameter("@CodUnidadVehiculo", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codUnidadVehiculo)
			parameters(5) = New SqlParameter("@CodChofer", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codChofer)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FechaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSalida)
			parameters(8) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(9) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="lotedeCorral">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKgrsPie">Input parameter of stored procedure</param>
		''' <param name="codUnidadVehiculo">Input parameter of stored procedure</param>
		''' <param name="codChofer">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaSalida">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoCab(folioSalidaGanado As System.String, lotedeCorral As System.Int32, cantCabezas As System.Int32, cantKgrsPie As System.Decimal, codUnidadVehiculo As System.String, codChofer As System.Int32, estatus As System.String, fechaSalida As System.DateTime, fechaCaptura As System.DateTime, fechaCancelacion As System.DateTime, observaciones As System.String,  _
func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@LotedeCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lotedeCorral)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKgrsPie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsPie)
			parameters(4) = New SqlParameter("@CodUnidadVehiculo", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codUnidadVehiculo)
			parameters(5) = New SqlParameter("@CodChofer", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codChofer)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FechaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSalida)
			parameters(8) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(9) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoCab]", parameters, Nothing)


			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="lotedeCorral">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKgrsPie">Input parameter of stored procedure</param>
		''' <param name="codUnidadVehiculo">Input parameter of stored procedure</param>
		''' <param name="codChofer">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaSalida">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoCab(folioSalidaGanado As System.String, lotedeCorral As System.Int32, cantCabezas As System.Int32, cantKgrsPie As System.Decimal, codUnidadVehiculo As System.String, codChofer As System.Int32, estatus As System.String, fechaSalida As System.DateTime, fechaCaptura As System.DateTime, fechaCancelacion As System.DateTime, observaciones As System.String,  _
func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(13 - 1) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@LotedeCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lotedeCorral)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKgrsPie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsPie)
			parameters(4) = New SqlParameter("@CodUnidadVehiculo", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codUnidadVehiculo)
			parameters(5) = New SqlParameter("@CodChofer", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codChofer)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FechaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSalida)
			parameters(8) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(9) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="lotedeCorral">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKgrsPie">Input parameter of stored procedure</param>
		''' <param name="codUnidadVehiculo">Input parameter of stored procedure</param>
		''' <param name="codChofer">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaSalida">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoCab(folioSalidaGanado As System.String, lotedeCorral As System.Int32, cantCabezas As System.Int32, cantKgrsPie As System.Decimal, codUnidadVehiculo As System.String, codChofer As System.Int32, estatus As System.String, fechaSalida As System.DateTime, fechaCaptura As System.DateTime, fechaCancelacion As System.DateTime, observaciones As System.String,  _
func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(13) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@LotedeCorral", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, lotedeCorral)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKgrsPie", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKgrsPie)
			parameters(4) = New SqlParameter("@CodUnidadVehiculo", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codUnidadVehiculo)
			parameters(5) = New SqlParameter("@CodChofer", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, codChofer)
			parameters(6) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(7) = New SqlParameter("@FechaSalida", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSalida)
			parameters(8) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(9) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(12) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(13) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoCab]", parameters, transactionToUse)


			returnValue = CType(parameters(13).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSCSalidasGanadoDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMscsalidasGanadoDetCallBack(folioSalidaGanado As System.String, codTipoGanado As System.String, cantCabezas As System.Int32, cantKilos As System.Decimal, costoxKilo As System.Decimal, importe As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="codTipoGanado">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoDet(folioSalidaGanado As System.String, codTipoGanado As System.String, cantCabezas As System.Int32, cantKilos As System.Decimal, costoxKilo As System.Decimal, importe As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@CodTipoGanado", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codTipoGanado)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(4) = New SqlParameter("@CostoxKilo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(5) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="codTipoGanado">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoDet(folioSalidaGanado As System.String, codTipoGanado As System.String, cantCabezas As System.Int32, cantKilos As System.Decimal, costoxKilo As System.Decimal, importe As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@CodTipoGanado", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codTipoGanado)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(4) = New SqlParameter("@CostoxKilo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(5) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoDet]", parameters, Nothing)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="codTipoGanado">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoDet(folioSalidaGanado As System.String, codTipoGanado As System.String, cantCabezas As System.Int32, cantKilos As System.Decimal, costoxKilo As System.Decimal, importe As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(8 - 1) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@CodTipoGanado", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codTipoGanado)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(4) = New SqlParameter("@CostoxKilo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(5) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSCSalidasGanadoDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="folioSalidaGanado">Input parameter of stored procedure</param>
		''' <param name="codTipoGanado">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="cantKilos">Input parameter of stored procedure</param>
		''' <param name="costoxKilo">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMscsalidasGanadoDet(folioSalidaGanado As System.String, codTipoGanado As System.String, cantCabezas As System.Int32, cantKilos As System.Decimal, costoxKilo As System.Decimal, importe As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(8) {}
			parameters(0) = New SqlParameter("@FolioSalidaGanado", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioSalidaGanado)
			parameters(1) = New SqlParameter("@CodTipoGanado", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, codTipoGanado)
			parameters(2) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(3) = New SqlParameter("@CantKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, cantKilos)
			parameters(4) = New SqlParameter("@CostoxKilo", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, costoxKilo)
			parameters(5) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(6) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(7) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(8) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSCSalidasGanadoDet]", parameters, transactionToUse)


			returnValue = CType(parameters(8).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_MSGCatTipoGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspMsgcatTipoGanadoCallBack(nombreTipoGan As System.String, nomCorTipoGan As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_MSGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="nomCorTipoGan">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsgcatTipoGanado(nombreTipoGan As System.String, nomCorTipoGan As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)
			parameters(2) = New SqlParameter("@NomCorTipoGan", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorTipoGan)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSGCatTipoGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="nomCorTipoGan">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsgcatTipoGanado(nombreTipoGan As System.String, nomCorTipoGan As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)
			parameters(2) = New SqlParameter("@NomCorTipoGan", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorTipoGan)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSGCatTipoGanado]", parameters, Nothing)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="nomCorTipoGan">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsgcatTipoGanado(nombreTipoGan As System.String, nomCorTipoGan As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(7 - 1) {}
			parameters(1) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)
			parameters(2) = New SqlParameter("@NomCorTipoGan", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorTipoGan)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSGCatTipoGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If
			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_MSGCatTipoGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="idTipoGanado">InputOutput parameter of stored procedure</param>
		''' <param name="nombreTipoGan">Input parameter of stored procedure</param>
		''' <param name="nomCorTipoGan">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspMsgcatTipoGanado(nombreTipoGan As System.String, nomCorTipoGan As System.String, observaciones As System.String, estatus As System.Int16, func As System.String, numOpc As System.Int32, ByRef idTipoGanado As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(7) {}
			parameters(1) = New SqlParameter("@NombreTipoGan", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nombreTipoGan)
			parameters(2) = New SqlParameter("@NomCorTipoGan", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, nomCorTipoGan)
			parameters(3) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 250, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(4) = New SqlParameter("@Estatus", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, estatus)
			parameters(5) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(6) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)
			parameters(0) = new SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.InputOutput, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			' Return value parameter
			parameters(7) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_MSGCatTipoGanado]", parameters, transactionToUse)
			If Not parameters(0).Value Is System.DBNull.Value Then
				idTipoGanado = CType(parameters(0).Value, System.Int32)
			End If

			returnValue = CType(parameters(7).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_PoGrCb' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspPoGrCbCallBack(numeroPol As System.String, fecPoliza As System.DateTime, imptePoliza As System.Decimal, concepto As System.String, origen As System.String, cveError As System.String, cveVigencia As System.String, referencia As System.String, motivoCanc As System.String, benefic As System.String, func As System.String,  _
numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_PoGrCb'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="fecPoliza">Input parameter of stored procedure</param>
		''' <param name="imptePoliza">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="cveError">Input parameter of stored procedure</param>
		''' <param name="cveVigencia">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="motivoCanc">Input parameter of stored procedure</param>
		''' <param name="benefic">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrCb(numeroPol As System.String, fecPoliza As System.DateTime, imptePoliza As System.Decimal, concepto As System.String, origen As System.String, cveError As System.String, cveVigencia As System.String, referencia As System.String, motivoCanc As System.String, benefic As System.String, func As System.String,  _
numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Fec_Poliza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecPoliza)
			parameters(2) = New SqlParameter("@Impte_Poliza", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, imptePoliza)
			parameters(3) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(4) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(5) = New SqlParameter("@Cve_Error", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveError)
			parameters(6) = New SqlParameter("@Cve_Vigencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVigencia)
			parameters(7) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(8) = New SqlParameter("@MotivoCanc", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCanc)
			parameters(9) = New SqlParameter("@Benefic", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, benefic)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrCb]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrCb'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="fecPoliza">Input parameter of stored procedure</param>
		''' <param name="imptePoliza">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="cveError">Input parameter of stored procedure</param>
		''' <param name="cveVigencia">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="motivoCanc">Input parameter of stored procedure</param>
		''' <param name="benefic">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrCb(numeroPol As System.String, fecPoliza As System.DateTime, imptePoliza As System.Decimal, concepto As System.String, origen As System.String, cveError As System.String, cveVigencia As System.String, referencia As System.String, motivoCanc As System.String, benefic As System.String, func As System.String,  _
numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Fec_Poliza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecPoliza)
			parameters(2) = New SqlParameter("@Impte_Poliza", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, imptePoliza)
			parameters(3) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(4) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(5) = New SqlParameter("@Cve_Error", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveError)
			parameters(6) = New SqlParameter("@Cve_Vigencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVigencia)
			parameters(7) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(8) = New SqlParameter("@MotivoCanc", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCanc)
			parameters(9) = New SqlParameter("@Benefic", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, benefic)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrCb]", parameters, Nothing)


			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrCb'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="fecPoliza">Input parameter of stored procedure</param>
		''' <param name="imptePoliza">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="cveError">Input parameter of stored procedure</param>
		''' <param name="cveVigencia">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="motivoCanc">Input parameter of stored procedure</param>
		''' <param name="benefic">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrCb(numeroPol As System.String, fecPoliza As System.DateTime, imptePoliza As System.Decimal, concepto As System.String, origen As System.String, cveError As System.String, cveVigencia As System.String, referencia As System.String, motivoCanc As System.String, benefic As System.String, func As System.String,  _
numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(12 - 1) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Fec_Poliza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecPoliza)
			parameters(2) = New SqlParameter("@Impte_Poliza", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, imptePoliza)
			parameters(3) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(4) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(5) = New SqlParameter("@Cve_Error", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveError)
			parameters(6) = New SqlParameter("@Cve_Vigencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVigencia)
			parameters(7) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(8) = New SqlParameter("@MotivoCanc", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCanc)
			parameters(9) = New SqlParameter("@Benefic", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, benefic)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrCb]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrCb'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="fecPoliza">Input parameter of stored procedure</param>
		''' <param name="imptePoliza">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="origen">Input parameter of stored procedure</param>
		''' <param name="cveError">Input parameter of stored procedure</param>
		''' <param name="cveVigencia">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="motivoCanc">Input parameter of stored procedure</param>
		''' <param name="benefic">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrCb(numeroPol As System.String, fecPoliza As System.DateTime, imptePoliza As System.Decimal, concepto As System.String, origen As System.String, cveError As System.String, cveVigencia As System.String, referencia As System.String, motivoCanc As System.String, benefic As System.String, func As System.String,  _
numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(12) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Fec_Poliza", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fecPoliza)
			parameters(2) = New SqlParameter("@Impte_Poliza", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, imptePoliza)
			parameters(3) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(4) = New SqlParameter("@Origen", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, origen)
			parameters(5) = New SqlParameter("@Cve_Error", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveError)
			parameters(6) = New SqlParameter("@Cve_Vigencia", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVigencia)
			parameters(7) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(8) = New SqlParameter("@MotivoCanc", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, motivoCanc)
			parameters(9) = New SqlParameter("@Benefic", SqlDbType.Char, 50, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, benefic)
			parameters(10) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(11) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(12) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrCb]", parameters, transactionToUse)


			returnValue = CType(parameters(12).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_PoGrDt' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspPoGrDtCallBack(numeroPol As System.String, cveRenglon As System.Int16, fechaPol As System.DateTime, ctaMayor As System.String, subCta As System.String, ssubCta As System.String, sssubCta As System.String, concepto As System.String, carAbo As System.String, referencia As System.String, importe As System.Decimal,  _
cveVig As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_PoGrDt'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="fechaPol">Input parameter of stored procedure</param>
		''' <param name="ctaMayor">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssubCta">Input parameter of stored procedure</param>
		''' <param name="sssubCta">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="carAbo">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cveVig">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrDt(numeroPol As System.String, cveRenglon As System.Int16, fechaPol As System.DateTime, ctaMayor As System.String, subCta As System.String, ssubCta As System.String, sssubCta As System.String, concepto As System.String, carAbo As System.String, referencia As System.String, importe As System.Decimal,  _
cveVig As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(2) = New SqlParameter("@Fecha_Pol", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPol)
			parameters(3) = New SqlParameter("@Cta_Mayor", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMayor)
			parameters(4) = New SqlParameter("@Sub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssubCta)
			parameters(6) = New SqlParameter("@SSSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssubCta)
			parameters(7) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(8) = New SqlParameter("@Car_Abo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, carAbo)
			parameters(9) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(10) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(11) = New SqlParameter("@Cve_Vig", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVig)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrDt]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrDt'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="fechaPol">Input parameter of stored procedure</param>
		''' <param name="ctaMayor">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssubCta">Input parameter of stored procedure</param>
		''' <param name="sssubCta">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="carAbo">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cveVig">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrDt(numeroPol As System.String, cveRenglon As System.Int16, fechaPol As System.DateTime, ctaMayor As System.String, subCta As System.String, ssubCta As System.String, sssubCta As System.String, concepto As System.String, carAbo As System.String, referencia As System.String, importe As System.Decimal,  _
cveVig As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(2) = New SqlParameter("@Fecha_Pol", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPol)
			parameters(3) = New SqlParameter("@Cta_Mayor", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMayor)
			parameters(4) = New SqlParameter("@Sub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssubCta)
			parameters(6) = New SqlParameter("@SSSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssubCta)
			parameters(7) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(8) = New SqlParameter("@Car_Abo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, carAbo)
			parameters(9) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(10) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(11) = New SqlParameter("@Cve_Vig", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVig)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrDt]", parameters, Nothing)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrDt'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="fechaPol">Input parameter of stored procedure</param>
		''' <param name="ctaMayor">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssubCta">Input parameter of stored procedure</param>
		''' <param name="sssubCta">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="carAbo">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cveVig">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrDt(numeroPol As System.String, cveRenglon As System.Int16, fechaPol As System.DateTime, ctaMayor As System.String, subCta As System.String, ssubCta As System.String, sssubCta As System.String, concepto As System.String, carAbo As System.String, referencia As System.String, importe As System.Decimal,  _
cveVig As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(2) = New SqlParameter("@Fecha_Pol", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPol)
			parameters(3) = New SqlParameter("@Cta_Mayor", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMayor)
			parameters(4) = New SqlParameter("@Sub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssubCta)
			parameters(6) = New SqlParameter("@SSSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssubCta)
			parameters(7) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(8) = New SqlParameter("@Car_Abo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, carAbo)
			parameters(9) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(10) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(11) = New SqlParameter("@Cve_Vig", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVig)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrDt]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_PoGrDt'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="numeroPol">Input parameter of stored procedure</param>
		''' <param name="cveRenglon">Input parameter of stored procedure</param>
		''' <param name="fechaPol">Input parameter of stored procedure</param>
		''' <param name="ctaMayor">Input parameter of stored procedure</param>
		''' <param name="subCta">Input parameter of stored procedure</param>
		''' <param name="ssubCta">Input parameter of stored procedure</param>
		''' <param name="sssubCta">Input parameter of stored procedure</param>
		''' <param name="concepto">Input parameter of stored procedure</param>
		''' <param name="carAbo">Input parameter of stored procedure</param>
		''' <param name="referencia">Input parameter of stored procedure</param>
		''' <param name="importe">Input parameter of stored procedure</param>
		''' <param name="cveVig">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspPoGrDt(numeroPol As System.String, cveRenglon As System.Int16, fechaPol As System.DateTime, ctaMayor As System.String, subCta As System.String, ssubCta As System.String, sssubCta As System.String, concepto As System.String, carAbo As System.String, referencia As System.String, importe As System.Decimal,  _
cveVig As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@Numero_Pol", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numeroPol)
			parameters(1) = New SqlParameter("@Cve_Renglon", SqlDbType.SmallInt, 0, ParameterDirection.Input, True, 5, 0, "",  DataRowVersion.Current, cveRenglon)
			parameters(2) = New SqlParameter("@Fecha_Pol", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPol)
			parameters(3) = New SqlParameter("@Cta_Mayor", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ctaMayor)
			parameters(4) = New SqlParameter("@Sub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, subCta)
			parameters(5) = New SqlParameter("@SSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, ssubCta)
			parameters(6) = New SqlParameter("@SSSub_Cta", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, sssubCta)
			parameters(7) = New SqlParameter("@Concepto", SqlDbType.Char, 150, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, concepto)
			parameters(8) = New SqlParameter("@Car_Abo", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, carAbo)
			parameters(9) = New SqlParameter("@Referencia", SqlDbType.Char, 8, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, referencia)
			parameters(10) = New SqlParameter("@Importe", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importe)
			parameters(11) = New SqlParameter("@Cve_Vig", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, cveVig)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_PoGrDt]", parameters, transactionToUse)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'USP_RecepcionGanado' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspRecepcionGanadoCallBack(loteRecepcion As System.String, fechaRecepcion As System.DateTime, idProveedor As System.Int32, loteEngorda As System.String, cantCabezas As System.Int32, kilosEnviados As System.Decimal, kilosRecibidos As System.Decimal, unidad As System.String, conductor As System.String, placas As System.String, observaciones As System.String,  _
idUsuario As System.Int32, idTipoGanado As System.Int32, estatus As System.String, fechaCancelacion As System.DateTime, idUsuarioCancelacion As System.Int32, observacionesCancelacion As System.String, kilosPrimerPesada As System.Decimal, kilosSegundaPesada As System.Decimal, idCliente As System.Int32, cveLugarCompra As System.Int32, cveComprador As System.Int32,  _
horasViaje As System.Decimal, kilosComprado As System.Decimal, importeComprado As System.Decimal, diasCredito As System.Byte, fechaPago As System.DateTime, numFactura As System.String, fechaConta As System.DateTime, numPoliza As System.String, numCabezasMacho As System.Int32, numCabezasHembra As System.Int32, totalKilos As System.Decimal,  _
totalImporte As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'USP_RecepcionGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteRecepcion">Input parameter of stored procedure</param>
		''' <param name="fechaRecepcion">Input parameter of stored procedure</param>
		''' <param name="idProveedor">Input parameter of stored procedure</param>
		''' <param name="loteEngorda">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="kilosEnviados">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="idUsuario">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancelacion">Input parameter of stored procedure</param>
		''' <param name="observacionesCancelacion">Input parameter of stored procedure</param>
		''' <param name="kilosPrimerPesada">Input parameter of stored procedure</param>
		''' <param name="kilosSegundaPesada">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="cveLugarCompra">Input parameter of stored procedure</param>
		''' <param name="cveComprador">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="kilosComprado">Input parameter of stored procedure</param>
		''' <param name="importeComprado">Input parameter of stored procedure</param>
		''' <param name="diasCredito">Input parameter of stored procedure</param>
		''' <param name="fechaPago">Input parameter of stored procedure</param>
		''' <param name="numFactura">Input parameter of stored procedure</param>
		''' <param name="fechaConta">Input parameter of stored procedure</param>
		''' <param name="numPoliza">Input parameter of stored procedure</param>
		''' <param name="numCabezasMacho">Input parameter of stored procedure</param>
		''' <param name="numCabezasHembra">Input parameter of stored procedure</param>
		''' <param name="totalKilos">Input parameter of stored procedure</param>
		''' <param name="totalImporte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRecepcionGanado(loteRecepcion As System.String, fechaRecepcion As System.DateTime, idProveedor As System.Int32, loteEngorda As System.String, cantCabezas As System.Int32, kilosEnviados As System.Decimal, kilosRecibidos As System.Decimal, unidad As System.String, conductor As System.String, placas As System.String, observaciones As System.String,  _
idUsuario As System.Int32, idTipoGanado As System.Int32, estatus As System.String, fechaCancelacion As System.DateTime, idUsuarioCancelacion As System.Int32, observacionesCancelacion As System.String, kilosPrimerPesada As System.Decimal, kilosSegundaPesada As System.Decimal, idCliente As System.Int32, cveLugarCompra As System.Int32, cveComprador As System.Int32,  _
horasViaje As System.Decimal, kilosComprado As System.Decimal, importeComprado As System.Decimal, diasCredito As System.Byte, fechaPago As System.DateTime, numFactura As System.String, fechaConta As System.DateTime, numPoliza As System.String, numCabezasMacho As System.Int32, numCabezasHembra As System.Int32, totalKilos As System.Decimal,  _
totalImporte As System.Decimal, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(36 - 1) {}
			parameters(0) = New SqlParameter("@LoteRecepcion", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteRecepcion)
			parameters(1) = New SqlParameter("@FechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaRecepcion)
			parameters(2) = New SqlParameter("@IdProveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProveedor)
			parameters(3) = New SqlParameter("@LoteEngorda", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteEngorda)
			parameters(4) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(5) = New SqlParameter("@KilosEnviados", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosEnviados)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(8) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(9) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@IdUsuario", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuario)
			parameters(12) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(13) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(14) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(15) = New SqlParameter("@IdUsuarioCancelacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancelacion)
			parameters(16) = New SqlParameter("@ObservacionesCancelacion", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancelacion)
			parameters(17) = New SqlParameter("@KilosPrimerPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosPrimerPesada)
			parameters(18) = New SqlParameter("@KilosSegundaPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSegundaPesada)
			parameters(19) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(20) = New SqlParameter("@CveLugarCompra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveLugarCompra)
			parameters(21) = New SqlParameter("@CveComprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveComprador)
			parameters(22) = New SqlParameter("@HorasViaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horasViaje)
			parameters(23) = New SqlParameter("@KilosComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosComprado)
			parameters(24) = New SqlParameter("@ImporteComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeComprado)
			parameters(25) = New SqlParameter("@DiasCredito", SqlDbType.TinyInt, 0, ParameterDirection.Input, True, 3, 0, "",  DataRowVersion.Current, diasCredito)
			parameters(26) = New SqlParameter("@FechaPago", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPago)
			parameters(27) = New SqlParameter("@NumFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numFactura)
			parameters(28) = New SqlParameter("@FechaConta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaConta)
			parameters(29) = New SqlParameter("@NumPoliza", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numPoliza)
			parameters(30) = New SqlParameter("@NumCabezasMacho", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasMacho)
			parameters(31) = New SqlParameter("@NumCabezasHembra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasHembra)
			parameters(32) = New SqlParameter("@TotalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKilos)
			parameters(33) = New SqlParameter("@TotalImporte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalImporte)
			parameters(34) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(35) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_RecepcionGanado]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_RecepcionGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteRecepcion">Input parameter of stored procedure</param>
		''' <param name="fechaRecepcion">Input parameter of stored procedure</param>
		''' <param name="idProveedor">Input parameter of stored procedure</param>
		''' <param name="loteEngorda">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="kilosEnviados">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="idUsuario">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancelacion">Input parameter of stored procedure</param>
		''' <param name="observacionesCancelacion">Input parameter of stored procedure</param>
		''' <param name="kilosPrimerPesada">Input parameter of stored procedure</param>
		''' <param name="kilosSegundaPesada">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="cveLugarCompra">Input parameter of stored procedure</param>
		''' <param name="cveComprador">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="kilosComprado">Input parameter of stored procedure</param>
		''' <param name="importeComprado">Input parameter of stored procedure</param>
		''' <param name="diasCredito">Input parameter of stored procedure</param>
		''' <param name="fechaPago">Input parameter of stored procedure</param>
		''' <param name="numFactura">Input parameter of stored procedure</param>
		''' <param name="fechaConta">Input parameter of stored procedure</param>
		''' <param name="numPoliza">Input parameter of stored procedure</param>
		''' <param name="numCabezasMacho">Input parameter of stored procedure</param>
		''' <param name="numCabezasHembra">Input parameter of stored procedure</param>
		''' <param name="totalKilos">Input parameter of stored procedure</param>
		''' <param name="totalImporte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRecepcionGanado(loteRecepcion As System.String, fechaRecepcion As System.DateTime, idProveedor As System.Int32, loteEngorda As System.String, cantCabezas As System.Int32, kilosEnviados As System.Decimal, kilosRecibidos As System.Decimal, unidad As System.String, conductor As System.String, placas As System.String, observaciones As System.String,  _
idUsuario As System.Int32, idTipoGanado As System.Int32, estatus As System.String, fechaCancelacion As System.DateTime, idUsuarioCancelacion As System.Int32, observacionesCancelacion As System.String, kilosPrimerPesada As System.Decimal, kilosSegundaPesada As System.Decimal, idCliente As System.Int32, cveLugarCompra As System.Int32, cveComprador As System.Int32,  _
horasViaje As System.Decimal, kilosComprado As System.Decimal, importeComprado As System.Decimal, diasCredito As System.Byte, fechaPago As System.DateTime, numFactura As System.String, fechaConta As System.DateTime, numPoliza As System.String, numCabezasMacho As System.Int32, numCabezasHembra As System.Int32, totalKilos As System.Decimal,  _
totalImporte As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(36) {}
			parameters(0) = New SqlParameter("@LoteRecepcion", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteRecepcion)
			parameters(1) = New SqlParameter("@FechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaRecepcion)
			parameters(2) = New SqlParameter("@IdProveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProveedor)
			parameters(3) = New SqlParameter("@LoteEngorda", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteEngorda)
			parameters(4) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(5) = New SqlParameter("@KilosEnviados", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosEnviados)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(8) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(9) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@IdUsuario", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuario)
			parameters(12) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(13) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(14) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(15) = New SqlParameter("@IdUsuarioCancelacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancelacion)
			parameters(16) = New SqlParameter("@ObservacionesCancelacion", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancelacion)
			parameters(17) = New SqlParameter("@KilosPrimerPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosPrimerPesada)
			parameters(18) = New SqlParameter("@KilosSegundaPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSegundaPesada)
			parameters(19) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(20) = New SqlParameter("@CveLugarCompra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveLugarCompra)
			parameters(21) = New SqlParameter("@CveComprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveComprador)
			parameters(22) = New SqlParameter("@HorasViaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horasViaje)
			parameters(23) = New SqlParameter("@KilosComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosComprado)
			parameters(24) = New SqlParameter("@ImporteComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeComprado)
			parameters(25) = New SqlParameter("@DiasCredito", SqlDbType.TinyInt, 0, ParameterDirection.Input, True, 3, 0, "",  DataRowVersion.Current, diasCredito)
			parameters(26) = New SqlParameter("@FechaPago", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPago)
			parameters(27) = New SqlParameter("@NumFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numFactura)
			parameters(28) = New SqlParameter("@FechaConta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaConta)
			parameters(29) = New SqlParameter("@NumPoliza", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numPoliza)
			parameters(30) = New SqlParameter("@NumCabezasMacho", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasMacho)
			parameters(31) = New SqlParameter("@NumCabezasHembra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasHembra)
			parameters(32) = New SqlParameter("@TotalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKilos)
			parameters(33) = New SqlParameter("@TotalImporte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalImporte)
			parameters(34) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(35) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(36) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_RecepcionGanado]", parameters, Nothing)


			returnValue = CType(parameters(36).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_RecepcionGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteRecepcion">Input parameter of stored procedure</param>
		''' <param name="fechaRecepcion">Input parameter of stored procedure</param>
		''' <param name="idProveedor">Input parameter of stored procedure</param>
		''' <param name="loteEngorda">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="kilosEnviados">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="idUsuario">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancelacion">Input parameter of stored procedure</param>
		''' <param name="observacionesCancelacion">Input parameter of stored procedure</param>
		''' <param name="kilosPrimerPesada">Input parameter of stored procedure</param>
		''' <param name="kilosSegundaPesada">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="cveLugarCompra">Input parameter of stored procedure</param>
		''' <param name="cveComprador">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="kilosComprado">Input parameter of stored procedure</param>
		''' <param name="importeComprado">Input parameter of stored procedure</param>
		''' <param name="diasCredito">Input parameter of stored procedure</param>
		''' <param name="fechaPago">Input parameter of stored procedure</param>
		''' <param name="numFactura">Input parameter of stored procedure</param>
		''' <param name="fechaConta">Input parameter of stored procedure</param>
		''' <param name="numPoliza">Input parameter of stored procedure</param>
		''' <param name="numCabezasMacho">Input parameter of stored procedure</param>
		''' <param name="numCabezasHembra">Input parameter of stored procedure</param>
		''' <param name="totalKilos">Input parameter of stored procedure</param>
		''' <param name="totalImporte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRecepcionGanado(loteRecepcion As System.String, fechaRecepcion As System.DateTime, idProveedor As System.Int32, loteEngorda As System.String, cantCabezas As System.Int32, kilosEnviados As System.Decimal, kilosRecibidos As System.Decimal, unidad As System.String, conductor As System.String, placas As System.String, observaciones As System.String,  _
idUsuario As System.Int32, idTipoGanado As System.Int32, estatus As System.String, fechaCancelacion As System.DateTime, idUsuarioCancelacion As System.Int32, observacionesCancelacion As System.String, kilosPrimerPesada As System.Decimal, kilosSegundaPesada As System.Decimal, idCliente As System.Int32, cveLugarCompra As System.Int32, cveComprador As System.Int32,  _
horasViaje As System.Decimal, kilosComprado As System.Decimal, importeComprado As System.Decimal, diasCredito As System.Byte, fechaPago As System.DateTime, numFactura As System.String, fechaConta As System.DateTime, numPoliza As System.String, numCabezasMacho As System.Int32, numCabezasHembra As System.Int32, totalKilos As System.Decimal,  _
totalImporte As System.Decimal, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(36 - 1) {}
			parameters(0) = New SqlParameter("@LoteRecepcion", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteRecepcion)
			parameters(1) = New SqlParameter("@FechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaRecepcion)
			parameters(2) = New SqlParameter("@IdProveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProveedor)
			parameters(3) = New SqlParameter("@LoteEngorda", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteEngorda)
			parameters(4) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(5) = New SqlParameter("@KilosEnviados", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosEnviados)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(8) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(9) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@IdUsuario", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuario)
			parameters(12) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(13) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(14) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(15) = New SqlParameter("@IdUsuarioCancelacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancelacion)
			parameters(16) = New SqlParameter("@ObservacionesCancelacion", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancelacion)
			parameters(17) = New SqlParameter("@KilosPrimerPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosPrimerPesada)
			parameters(18) = New SqlParameter("@KilosSegundaPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSegundaPesada)
			parameters(19) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(20) = New SqlParameter("@CveLugarCompra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveLugarCompra)
			parameters(21) = New SqlParameter("@CveComprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveComprador)
			parameters(22) = New SqlParameter("@HorasViaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horasViaje)
			parameters(23) = New SqlParameter("@KilosComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosComprado)
			parameters(24) = New SqlParameter("@ImporteComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeComprado)
			parameters(25) = New SqlParameter("@DiasCredito", SqlDbType.TinyInt, 0, ParameterDirection.Input, True, 3, 0, "",  DataRowVersion.Current, diasCredito)
			parameters(26) = New SqlParameter("@FechaPago", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPago)
			parameters(27) = New SqlParameter("@NumFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numFactura)
			parameters(28) = New SqlParameter("@FechaConta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaConta)
			parameters(29) = New SqlParameter("@NumPoliza", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numPoliza)
			parameters(30) = New SqlParameter("@NumCabezasMacho", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasMacho)
			parameters(31) = New SqlParameter("@NumCabezasHembra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasHembra)
			parameters(32) = New SqlParameter("@TotalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKilos)
			parameters(33) = New SqlParameter("@TotalImporte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalImporte)
			parameters(34) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(35) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_RecepcionGanado]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'USP_RecepcionGanado'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteRecepcion">Input parameter of stored procedure</param>
		''' <param name="fechaRecepcion">Input parameter of stored procedure</param>
		''' <param name="idProveedor">Input parameter of stored procedure</param>
		''' <param name="loteEngorda">Input parameter of stored procedure</param>
		''' <param name="cantCabezas">Input parameter of stored procedure</param>
		''' <param name="kilosEnviados">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="unidad">Input parameter of stored procedure</param>
		''' <param name="conductor">Input parameter of stored procedure</param>
		''' <param name="placas">Input parameter of stored procedure</param>
		''' <param name="observaciones">Input parameter of stored procedure</param>
		''' <param name="idUsuario">Input parameter of stored procedure</param>
		''' <param name="idTipoGanado">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="fechaCancelacion">Input parameter of stored procedure</param>
		''' <param name="idUsuarioCancelacion">Input parameter of stored procedure</param>
		''' <param name="observacionesCancelacion">Input parameter of stored procedure</param>
		''' <param name="kilosPrimerPesada">Input parameter of stored procedure</param>
		''' <param name="kilosSegundaPesada">Input parameter of stored procedure</param>
		''' <param name="idCliente">Input parameter of stored procedure</param>
		''' <param name="cveLugarCompra">Input parameter of stored procedure</param>
		''' <param name="cveComprador">Input parameter of stored procedure</param>
		''' <param name="horasViaje">Input parameter of stored procedure</param>
		''' <param name="kilosComprado">Input parameter of stored procedure</param>
		''' <param name="importeComprado">Input parameter of stored procedure</param>
		''' <param name="diasCredito">Input parameter of stored procedure</param>
		''' <param name="fechaPago">Input parameter of stored procedure</param>
		''' <param name="numFactura">Input parameter of stored procedure</param>
		''' <param name="fechaConta">Input parameter of stored procedure</param>
		''' <param name="numPoliza">Input parameter of stored procedure</param>
		''' <param name="numCabezasMacho">Input parameter of stored procedure</param>
		''' <param name="numCabezasHembra">Input parameter of stored procedure</param>
		''' <param name="totalKilos">Input parameter of stored procedure</param>
		''' <param name="totalImporte">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRecepcionGanado(loteRecepcion As System.String, fechaRecepcion As System.DateTime, idProveedor As System.Int32, loteEngorda As System.String, cantCabezas As System.Int32, kilosEnviados As System.Decimal, kilosRecibidos As System.Decimal, unidad As System.String, conductor As System.String, placas As System.String, observaciones As System.String,  _
idUsuario As System.Int32, idTipoGanado As System.Int32, estatus As System.String, fechaCancelacion As System.DateTime, idUsuarioCancelacion As System.Int32, observacionesCancelacion As System.String, kilosPrimerPesada As System.Decimal, kilosSegundaPesada As System.Decimal, idCliente As System.Int32, cveLugarCompra As System.Int32, cveComprador As System.Int32,  _
horasViaje As System.Decimal, kilosComprado As System.Decimal, importeComprado As System.Decimal, diasCredito As System.Byte, fechaPago As System.DateTime, numFactura As System.String, fechaConta As System.DateTime, numPoliza As System.String, numCabezasMacho As System.Int32, numCabezasHembra As System.Int32, totalKilos As System.Decimal,  _
totalImporte As System.Decimal, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(36) {}
			parameters(0) = New SqlParameter("@LoteRecepcion", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteRecepcion)
			parameters(1) = New SqlParameter("@FechaRecepcion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaRecepcion)
			parameters(2) = New SqlParameter("@IdProveedor", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProveedor)
			parameters(3) = New SqlParameter("@LoteEngorda", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteEngorda)
			parameters(4) = New SqlParameter("@CantCabezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezas)
			parameters(5) = New SqlParameter("@KilosEnviados", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosEnviados)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@Unidad", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, unidad)
			parameters(8) = New SqlParameter("@Conductor", SqlDbType.VarChar, 120, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, conductor)
			parameters(9) = New SqlParameter("@Placas", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, placas)
			parameters(10) = New SqlParameter("@Observaciones", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observaciones)
			parameters(11) = New SqlParameter("@IdUsuario", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuario)
			parameters(12) = New SqlParameter("@IdTipoGanado", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idTipoGanado)
			parameters(13) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(14) = New SqlParameter("@FechaCancelacion", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCancelacion)
			parameters(15) = New SqlParameter("@IdUsuarioCancelacion", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idUsuarioCancelacion)
			parameters(16) = New SqlParameter("@ObservacionesCancelacion", SqlDbType.VarChar, 500, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, observacionesCancelacion)
			parameters(17) = New SqlParameter("@KilosPrimerPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosPrimerPesada)
			parameters(18) = New SqlParameter("@KilosSegundaPesada", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSegundaPesada)
			parameters(19) = New SqlParameter("@IdCliente", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idCliente)
			parameters(20) = New SqlParameter("@CveLugarCompra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveLugarCompra)
			parameters(21) = New SqlParameter("@CveComprador", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cveComprador)
			parameters(22) = New SqlParameter("@HorasViaje", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, horasViaje)
			parameters(23) = New SqlParameter("@KilosComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosComprado)
			parameters(24) = New SqlParameter("@ImporteComprado", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, importeComprado)
			parameters(25) = New SqlParameter("@DiasCredito", SqlDbType.TinyInt, 0, ParameterDirection.Input, True, 3, 0, "",  DataRowVersion.Current, diasCredito)
			parameters(26) = New SqlParameter("@FechaPago", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaPago)
			parameters(27) = New SqlParameter("@NumFactura", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numFactura)
			parameters(28) = New SqlParameter("@FechaConta", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaConta)
			parameters(29) = New SqlParameter("@NumPoliza", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, numPoliza)
			parameters(30) = New SqlParameter("@NumCabezasMacho", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasMacho)
			parameters(31) = New SqlParameter("@NumCabezasHembra", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numCabezasHembra)
			parameters(32) = New SqlParameter("@TotalKilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalKilos)
			parameters(33) = New SqlParameter("@TotalImporte", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, totalImporte)
			parameters(34) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(35) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(36) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[USP_RecepcionGanado]", parameters, transactionToUse)


			returnValue = CType(parameters(36).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_RegistroSacrificiosCab' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspRegistroSacrificiosCabCallBack(loteSacrificio As System.String, fechaSacrificio As System.DateTime, cantCabezasSacrificio As System.Int32, cantCabezasEnmantadas As System.Int32, cantCabezasClasificadas As System.Int32, cantCabezasSinSacrificar As System.Int32, kilosRecibidos As System.Decimal, kilosSacrificio As System.Decimal, cantCanalesSacrificio As System.Int32, kilosCalientes As System.Decimal, rendimiento As System.Decimal,  _
estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasEnmantadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasClasificadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSinSacrificar">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="kilosSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCanalesSacrificio">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosCab(loteSacrificio As System.String, fechaSacrificio As System.DateTime, cantCabezasSacrificio As System.Int32, cantCabezasEnmantadas As System.Int32, cantCabezasClasificadas As System.Int32, cantCabezasSinSacrificar As System.Int32, kilosRecibidos As System.Decimal, kilosSacrificio As System.Decimal, cantCanalesSacrificio As System.Int32, kilosCalientes As System.Decimal, rendimiento As System.Decimal,  _
estatus As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(2) = New SqlParameter("@CantCabezasSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSacrificio)
			parameters(3) = New SqlParameter("@CantCabezasEnmantadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasEnmantadas)
			parameters(4) = New SqlParameter("@CantCabezasClasificadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasClasificadas)
			parameters(5) = New SqlParameter("@CantCabezasSinSacrificar", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSinSacrificar)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@KilosSacrificio", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSacrificio)
			parameters(8) = New SqlParameter("@CantCanalesSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanalesSacrificio)
			parameters(9) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(10) = New SqlParameter("@Rendimiento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(11) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosCab]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasEnmantadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasClasificadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSinSacrificar">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="kilosSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCanalesSacrificio">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosCab(loteSacrificio As System.String, fechaSacrificio As System.DateTime, cantCabezasSacrificio As System.Int32, cantCabezasEnmantadas As System.Int32, cantCabezasClasificadas As System.Int32, cantCabezasSinSacrificar As System.Int32, kilosRecibidos As System.Decimal, kilosSacrificio As System.Decimal, cantCanalesSacrificio As System.Int32, kilosCalientes As System.Decimal, rendimiento As System.Decimal,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(2) = New SqlParameter("@CantCabezasSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSacrificio)
			parameters(3) = New SqlParameter("@CantCabezasEnmantadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasEnmantadas)
			parameters(4) = New SqlParameter("@CantCabezasClasificadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasClasificadas)
			parameters(5) = New SqlParameter("@CantCabezasSinSacrificar", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSinSacrificar)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@KilosSacrificio", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSacrificio)
			parameters(8) = New SqlParameter("@CantCanalesSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanalesSacrificio)
			parameters(9) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(10) = New SqlParameter("@Rendimiento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(11) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosCab]", parameters, Nothing)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasEnmantadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasClasificadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSinSacrificar">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="kilosSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCanalesSacrificio">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosCab(loteSacrificio As System.String, fechaSacrificio As System.DateTime, cantCabezasSacrificio As System.Int32, cantCabezasEnmantadas As System.Int32, cantCabezasClasificadas As System.Int32, cantCabezasSinSacrificar As System.Int32, kilosRecibidos As System.Decimal, kilosSacrificio As System.Decimal, cantCanalesSacrificio As System.Int32, kilosCalientes As System.Decimal, rendimiento As System.Decimal,  _
estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(14 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(2) = New SqlParameter("@CantCabezasSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSacrificio)
			parameters(3) = New SqlParameter("@CantCabezasEnmantadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasEnmantadas)
			parameters(4) = New SqlParameter("@CantCabezasClasificadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasClasificadas)
			parameters(5) = New SqlParameter("@CantCabezasSinSacrificar", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSinSacrificar)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@KilosSacrificio", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSacrificio)
			parameters(8) = New SqlParameter("@CantCanalesSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanalesSacrificio)
			parameters(9) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(10) = New SqlParameter("@Rendimiento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(11) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosCab]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosCab'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="fechaSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCabezasEnmantadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasClasificadas">Input parameter of stored procedure</param>
		''' <param name="cantCabezasSinSacrificar">Input parameter of stored procedure</param>
		''' <param name="kilosRecibidos">Input parameter of stored procedure</param>
		''' <param name="kilosSacrificio">Input parameter of stored procedure</param>
		''' <param name="cantCanalesSacrificio">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosCab(loteSacrificio As System.String, fechaSacrificio As System.DateTime, cantCabezasSacrificio As System.Int32, cantCabezasEnmantadas As System.Int32, cantCabezasClasificadas As System.Int32, cantCabezasSinSacrificar As System.Int32, kilosRecibidos As System.Decimal, kilosSacrificio As System.Decimal, cantCanalesSacrificio As System.Int32, kilosCalientes As System.Decimal, rendimiento As System.Decimal,  _
estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(14) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FechaSacrificio", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaSacrificio)
			parameters(2) = New SqlParameter("@CantCabezasSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSacrificio)
			parameters(3) = New SqlParameter("@CantCabezasEnmantadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasEnmantadas)
			parameters(4) = New SqlParameter("@CantCabezasClasificadas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasClasificadas)
			parameters(5) = New SqlParameter("@CantCabezasSinSacrificar", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCabezasSinSacrificar)
			parameters(6) = New SqlParameter("@KilosRecibidos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosRecibidos)
			parameters(7) = New SqlParameter("@KilosSacrificio", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosSacrificio)
			parameters(8) = New SqlParameter("@CantCanalesSacrificio", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, cantCanalesSacrificio)
			parameters(9) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(10) = New SqlParameter("@Rendimiento", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(11) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(12) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(13) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(14) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosCab]", parameters, transactionToUse)


			returnValue = CType(parameters(14).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_RegistroSacrificiosDecomisos' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspRegistroSacrificiosDecomisosCallBack(loteSacrificio As System.String, idProducto As System.Int32, piezas As System.Int32, kilos As System.Decimal, decomiso As System.Boolean, idAlmacen As System.Int32, folioMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDecomisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="decomiso">Input parameter of stored procedure</param>
		''' <param name="idAlmacen">Input parameter of stored procedure</param>
		''' <param name="folioMov">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDecomisos(loteSacrificio As System.String, idProducto As System.Int32, piezas As System.Int32, kilos As System.Decimal, decomiso As System.Boolean, idAlmacen As System.Int32, folioMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(2) = New SqlParameter("@Piezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, piezas)
			parameters(3) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(4) = New SqlParameter("@Decomiso", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomiso)
			parameters(5) = New SqlParameter("@IdAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idAlmacen)
			parameters(6) = New SqlParameter("@FolioMov", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMov)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDecomisos]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDecomisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="decomiso">Input parameter of stored procedure</param>
		''' <param name="idAlmacen">Input parameter of stored procedure</param>
		''' <param name="folioMov">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDecomisos(loteSacrificio As System.String, idProducto As System.Int32, piezas As System.Int32, kilos As System.Decimal, decomiso As System.Boolean, idAlmacen As System.Int32, folioMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(2) = New SqlParameter("@Piezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, piezas)
			parameters(3) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(4) = New SqlParameter("@Decomiso", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomiso)
			parameters(5) = New SqlParameter("@IdAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idAlmacen)
			parameters(6) = New SqlParameter("@FolioMov", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMov)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDecomisos]", parameters, Nothing)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDecomisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="decomiso">Input parameter of stored procedure</param>
		''' <param name="idAlmacen">Input parameter of stored procedure</param>
		''' <param name="folioMov">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDecomisos(loteSacrificio As System.String, idProducto As System.Int32, piezas As System.Int32, kilos As System.Decimal, decomiso As System.Boolean, idAlmacen As System.Int32, folioMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(10 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(2) = New SqlParameter("@Piezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, piezas)
			parameters(3) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(4) = New SqlParameter("@Decomiso", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomiso)
			parameters(5) = New SqlParameter("@IdAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idAlmacen)
			parameters(6) = New SqlParameter("@FolioMov", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMov)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDecomisos]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDecomisos'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="idProducto">Input parameter of stored procedure</param>
		''' <param name="piezas">Input parameter of stored procedure</param>
		''' <param name="kilos">Input parameter of stored procedure</param>
		''' <param name="decomiso">Input parameter of stored procedure</param>
		''' <param name="idAlmacen">Input parameter of stored procedure</param>
		''' <param name="folioMov">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDecomisos(loteSacrificio As System.String, idProducto As System.Int32, piezas As System.Int32, kilos As System.Decimal, decomiso As System.Boolean, idAlmacen As System.Int32, folioMov As System.String, estatus As System.String, func As System.String, numOpc As System.Int32, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(10) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@IdProducto", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idProducto)
			parameters(2) = New SqlParameter("@Piezas", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, piezas)
			parameters(3) = New SqlParameter("@Kilos", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilos)
			parameters(4) = New SqlParameter("@Decomiso", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, decomiso)
			parameters(5) = New SqlParameter("@IdAlmacen", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, idAlmacen)
			parameters(6) = New SqlParameter("@FolioMov", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioMov)
			parameters(7) = New SqlParameter("@Estatus", SqlDbType.Char, 12, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(8) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(9) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(10) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDecomisos]", parameters, transactionToUse)


			returnValue = CType(parameters(10).Value, Integer)
			Return toReturn
		End Function
	

		''' <summary>
		''' Delegate definition for stored procedure 'Usp_RegistroSacrificiosDet' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function UspRegistroSacrificiosDetCallBack(loteSacrificio As System.String, folioCanal As System.String, lado As System.Boolean, kilosCalientes As System.Decimal, fechaCaptura As System.DateTime, kilosFrios As System.Decimal, rendimiento As System.Decimal, loteCorte As System.String, estatus As System.String, func As System.String, numOpc As System.Int32 _
, transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="kilosFrios">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="loteCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDet(loteSacrificio As System.String, folioCanal As System.String, lado As System.Boolean, kilosCalientes As System.Decimal, fechaCaptura As System.DateTime, kilosFrios As System.Decimal, rendimiento As System.Decimal, loteCorte As System.String, estatus As System.String, func As System.String, numOpc As System.Int32 _
) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@KilosFrios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosFrios)
			parameters(6) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(7) = New SqlParameter("@LoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteCorte)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDet]", parameters, Nothing)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="kilosFrios">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="loteCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDet(loteSacrificio As System.String, folioCanal As System.String, lado As System.Boolean, kilosCalientes As System.Decimal, fechaCaptura As System.DateTime, kilosFrios As System.Decimal, rendimiento As System.Decimal, loteCorte As System.String, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef returnValue As System.Int32) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@KilosFrios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosFrios)
			parameters(6) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(7) = New SqlParameter("@LoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteCorte)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDet]", parameters, Nothing)


			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="kilosFrios">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="loteCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDet(loteSacrificio As System.String, folioCanal As System.String, lado As System.Boolean, kilosCalientes As System.Decimal, fechaCaptura As System.DateTime, kilosFrios As System.Decimal, rendimiento As System.Decimal, loteCorte As System.String, estatus As System.String, func As System.String, numOpc As System.Int32 _
, transactionToUse As ITransaction) As Integer
			' create parameters
			Dim parameters() As SqlParameter = New SqlParameter(11 - 1) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@KilosFrios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosFrios)
			parameters(6) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(7) = New SqlParameter("@LoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteCorte)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDet]", parameters, transactionToUse)

			
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure 'Usp_RegistroSacrificiosDet'.<br/><br/>
		''' 
		''' </summary>
		''' <param name="loteSacrificio">Input parameter of stored procedure</param>
		''' <param name="folioCanal">Input parameter of stored procedure</param>
		''' <param name="lado">Input parameter of stored procedure</param>
		''' <param name="kilosCalientes">Input parameter of stored procedure</param>
		''' <param name="fechaCaptura">Input parameter of stored procedure</param>
		''' <param name="kilosFrios">Input parameter of stored procedure</param>
		''' <param name="rendimiento">Input parameter of stored procedure</param>
		''' <param name="loteCorte">Input parameter of stored procedure</param>
		''' <param name="estatus">Input parameter of stored procedure</param>
		''' <param name="func">Input parameter of stored procedure</param>
		''' <param name="numOpc">Input parameter of stored procedure</param>
		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function UspRegistroSacrificiosDet(loteSacrificio As System.String, folioCanal As System.String, lado As System.Boolean, kilosCalientes As System.Decimal, fechaCaptura As System.DateTime, kilosFrios As System.Decimal, rendimiento As System.Decimal, loteCorte As System.String, estatus As System.String, func As System.String, numOpc As System.Int32 _
, ByRef returnValue As System.Int32, transactionToUse As ITransaction) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As SqlParameter = New SqlParameter(11) {}
			parameters(0) = New SqlParameter("@LoteSacrificio", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteSacrificio)
			parameters(1) = New SqlParameter("@FolioCanal", SqlDbType.Char, 15, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, folioCanal)
			parameters(2) = New SqlParameter("@Lado", SqlDbType.Bit, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, lado)
			parameters(3) = New SqlParameter("@KilosCalientes", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosCalientes)
			parameters(4) = New SqlParameter("@FechaCaptura", SqlDbType.DateTime, 0, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, fechaCaptura)
			parameters(5) = New SqlParameter("@KilosFrios", SqlDbType.Money, 0, ParameterDirection.Input, True, 19, 4, "",  DataRowVersion.Current, kilosFrios)
			parameters(6) = New SqlParameter("@Rendimiento", SqlDbType.SmallMoney, 0, ParameterDirection.Input, True, 10, 4, "",  DataRowVersion.Current, rendimiento)
			parameters(7) = New SqlParameter("@LoteCorte", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, loteCorte)
			parameters(8) = New SqlParameter("@Estatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, estatus)
			parameters(9) = New SqlParameter("@Func", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "",  DataRowVersion.Current, func)
			parameters(10) = New SqlParameter("@NumOpc", SqlDbType.Int, 0, ParameterDirection.Input, True, 10, 0, "",  DataRowVersion.Current, numOpc)

			' Return value parameter
			parameters(11) = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			

			' Call the stored proc.
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("[dbo].[Usp_RegistroSacrificiosDet]", parameters, transactionToUse)


			returnValue = CType(parameters(11).Value, Integer)
			Return toReturn
		End Function
	

#Region "Included Code"

#End Region
	End Class
End Namespace
